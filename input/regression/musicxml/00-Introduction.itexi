@iftex
@contents
@end iftex

@unnumbered Introduction

@heading Why a MusicXML test suite?

This test suite of sample @uref{http://www.musicxml.org/,
MusicXML} files is supposed to fill a severe gap for all
developers implementing MusicXML support in their application:
There is no complete test suite of MusicXML files available for
testing purposes.

@heading License of the test suite

This collection of MusicXML test files is distributed under the
@uref{https://www.opensource.org/licenses/mit-license.php, MIT
license}, which means that you can use the files for any purpose,
as long as you leave the copyright notice (or the @file{LICENSE}
file) intact.

@heading Connection with @uref{https://lilypond.org/,LilyPond}

At the same time as providing a generic test suite for MusicXML
documents, this test suite also serves as proofs for the
@command{musicxml2ly} script provided with LilyPond.  The images
shown in this document were generated by running
@command{musicxml2ly} and @command{lilypond} on the MusicXML
files.  As @command{musicxml2ly} does not yet perfectly support
every single aspect of MusicXML, the output is not supposed to be
used as a definitive reference rendering, but rather as an
indication how one particular application supports and interprets
each of the test files.

If something does not seem right in the output, it might either be
that this feature has not been implemented yet, has been wrongly
implemented, or a regression has crept in recently@enddots{}

In the web version of this document, you can click on the file name
of test to see the MusicXML input file.  If you click on the figure
you can see the corresponding @file{.ly} intermediary file.

@heading Structure of this test suite 

Each test file (typically hand-crafted from the MusicXML
specification) checks one particular aspect of MusicXML.  A short
description of the particular feature for a file is given inside
the file in a comment element of the form

@example
<identification><miscellaneous>
  <miscellaneous-field name="description"> .... </miscellaneous-field>
</miscellaneous></identification>
@end example

The files are categorized by their first two digits with the following meaning:

@indentedblock
@raggedright
@table @asis
@item 01--03
Basics: pitches, rests, rhythm.
@item 11--14
Staff attributes: time signatures, clefs, key signatures, staff details.
@item 21--24
Notes: chords, note settings, tuplets, grace notes.
@item 31--34
Notations and articulations: dynamics (staff-attached), notations
(note-attached), spanners, print-object, color, and font size issues.
@item 41--43
Parts: multiple parts, multi-voice parts, multi-staff parts.
@item 45--46
Repeat and measure issues.
@item 51--52
Page issues: header fields, page layout.
@item 55--59
Exact positioning of items, offsets, etc.
@item 61
Lyrics.
@item 71--75
Instrument-specific: guitar (chord, fretboards), transposing
instruments, percussion, figured bass, other instruments.
@item 81--89
MIDI generation (all sound-related issues).
@item 90--99
Various other: compressed MusicXML files, compatibility with
broken MusicXML files exported by other applications.
@end table
@end raggedright
@end indentedblock

Some of the categories (in particular, the exact item positioning
and the MIDI generation) don't have any test cases yet.


@unnumbered Test cases

@unmacro lynode
@macro lynode{TEXT}
@subheading \TEXT\
@end macro
