@c -*- coding: utf-8; mode: texinfo; documentlanguage: de -*-

@ignore
    Translation of GIT committish: e5a609e373eae846857f9a6d70a402a3d42b7d94

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes.
@end ignore

@c \version "2.19.21"

@c Translators: Till Paala, Reinhold Kainhofer

@node External programs
@chapter Externe Programme

LilyPond kann mit anderen Programmen auf verschiedene Weise interagieren.


@node Point and click
@section Point and click

Poind and click fügt Verlinkung für bestimmte Notationselemente
in die PDF-Dokumente ein.


@node Enabling point and click
@unnumberedsubsec Point and click aktivieren

@cindex point and click

Point and click erlaubt es, die Noten in der Eingabedatei schnell
zu finden, indem man auf sie im PDF-Programm klickt.  Das erleichtert
es, die Stellen zu finden, die Fehler in der Notation verursachen.

Wenn diese Funktionalität aktiv ist, fügt LilyPond Hyperlinks zur
PDF-Datei hinzu.  Diese Hyperlinks werden an den Webbrowser gesendet,
der einen Texteditor mit dem Cursor an der richtigen Stelle öffnet.

Damit diese Kettenreaktion funktionieren kann, müssen Sie das
PDF-Programm dazu anweisen, Hyperlinks zu folgen, indem das Skript
@file{lilypond-invoke-editor}, welches mit LilyPond kommt, verwendet
wird.

Für Xpdf unter UNIX sollte folgende Zeile in der Datei
@file{xpdfrc}. Unter UNIX findet man diese Datei
entweder in @file{/etc/xpdfrc} oder als @file{$HOME/.xpdfrc}:

@example
urlCommand     "lilypond-invoke-editor %s"
@end example

Das Programm @file{lilypond-invoke-editor} ist ein kleines
Hilfsprogramm.  Es ruft einen Editor für besondere @code{textedit}-URIs#
auf und einen Webbrowser für andere.  Es testes die Umgebungsvariable
@code{EDITOR} nach folgenden Mustern:

@table @code
@item emacs
  das ruft auf
@example
emacsclient --no-wait +@var{line}:@var{column} @var{file}
@end example
@item gvim
  das ruft auf
@example
gvim --remote +:@var{line}:norm@var{column} @var{file}
@end example

@item nedit
  das ruft auf
@example
  nc -noask +@var{line} @var{file}'
@end example
@end table

Die Umgebungsvariable @code{LYEDITOR} wird benutzt, um dieses Verhalten
zu umgehen.  Sie enthält die Kommandozeile, mit der der Editor aufgerufen
wird, wobei @code{%(file)s}, @code{%(column)s} und @code{%(line)s} mit
der Datei, Spalte und Zeile ersetzt wird.  Die Einstellung

@example
emacsclient --no-wait +%(line)s:%(column)s %(file)s
@end example

@noindent
für @code{LYEDITOR} entspricht dem normalen Aufruf von emacsclient.


@cindex Dateigröße, PDF
@cindex Ausgabedatei, Dateigröße

Die point-and-click-Links vergrößern die Größe des PDFs sehr stark.
Um die Größe von PDFs und auch PS-Dateien zu verkleinern, kann
point and click ausgeschaltet werden, indem man in der Eingabedatei

@example
\pointAndClickOff
@end example

@noindent
schreibt.  Point and click kann explizit aktiviert werden mit dem Befehl

@example
\pointAndClickOn
@end example

Alternativ können Sie point and click auch mit einer Kommandozeilenoption anschalten:

@example
lilypond -dno-point-and-click file.ly
@end example

@warning{Sie sollten immer point and click ausschalten, wenn Sie LilyPond-Dateien
verteilen wollen, damit keine Informationen über Ihre Dateistrukturen in den
Dateien gespeichert werden, was ein Sicherheitsrisiko darstellen könnte.}


@node Selective point-and-click
@unnumberedsubsec Selektives point-and-click

Für einige interaktive Anwendungen kann es von Vorteil sein, nur
einige Elemente mit Point and click zu aktivieren.  Wenn man
beispielsweise eine Anwendung erstellen will, die Audio oder Video
beginnend von einer angeklickten Note abspielt, würde es unpraktisch
sein, wenn die Point-and-click-Zeiger Information eines Bogens oder
Versetzungszeichen, die gleichzeitig mit der Note erscheinen,
darstellen würden.

Man kann dieses Verhalten erreichen, indem man angibt, welche
Ereignisse aufgenommen werden sollen:

@itemize
@item
Direkt in der @file{.ly}-Datei:

@example
\pointAndClickTypes #'note-event
\relative @{
  c'2\f( f)
@}
@end example

oder

@example
#(ly:set-option 'point-and-click 'note-event)
\relative @{
  c'2\f( f)
@}
@end example

@item
Auf der Kommandozeile:

@example
lilypond -dpoint-and-click=note-event   example.ly
@end example

@end itemize

Auch mehrere Ereignisse können eingebunden werden:

@itemize
@item
Direkt in der @file{.ly}-Datei:

@example
\pointAndClickTypes #'(note-event dynamic-event)
\relative @{
  c'2\f( f)
@}
@end example

oder

@example
#(ly:set-option 'point-and-click '(note-event dynamic-event))
\relative @{
  c'2\f( f)
@}
@end example

@item
Auf der Kommandozeile:

@smallexample
lilypond \
  -e"(ly:set-option 'point-and-click '(note-event dynamic-event))" \
  example.ly
@end smallexample

@end itemize


@node Text editor support
@section Unterstützung von Texteditoren

@cindex Editoren
@cindex vim
@cindex emacs
@cindex Modi, Editor
@cindex Syntaxhervorhebung
@cindex Hervorhebung, Syntax
@cindex Syntax highlight

Verschiedene Editoren unterstützen LilyPond


@node Emacs mode
@unnumberedsubsec Emacs-Modus

Emacs hat einen @file{lilypond-mode}-Modus, der Ergänzung von Befehlen,
Einrückung, Syntaxhervorhebung, die Paarung von LilyPond-Klammern,
einfache Tastaturkürzel zur Übersetzung und das Lesen von LilyPond-Dokumentation
mit Info unterstützt.  Wenn @file{lilypond-mode} nicht auf Ihrem Computer
installiert ist, siehe unten.

Ein Emacs-Modus zur Noteneingabe und zum Kompilieren mit LilyPond bfindet sich
in dem Quellarchiv im @file{elisp}-Verzeichnis.  Führen Sie @command{make
install} aus, damit es nach @var{elispdir} installiert wird.  Die Datei
@file{lilypond-init.el} sollte in @var{Ladepfad}@file{/site-start.d/} gespeichert
werden oder Ihrer @file{~/.emacs} bzw. @file{~/.emacs.el} hinzugefügt werden.

Als ein Benutzer können Sie Ihren Quellpfad (z. B. @file{~/site-lisp/})
zum @var{Ladepfad} hinzufügen, indem Sie die (veränderte) folgende
Zeile in Ihr @file{~/.emacs} kopieren:

@c any reason we do not advise:  (push "~/site-lisp" load-path)
@example
(setq load-path (append (list (expand-file-name "~/site-lisp")) load-path))
@end example


@node Vim mode
@unnumberedsubsec Vim-Modus

Für @uref{https://@/www@/.vim@/.org,Vim} gibt es ein Dateiartplugin, einen
Einzugsmodus und einen Syntaxhervorhebungsmodus für LilyPond.  Um alle diese
Eigenschaften zu aktivieren, erstellen (oder verändern) Sie die Datei
@file{$HOME/.vimrc}, sodass sie folgende Zeilen enthält:

@example
filetype off
set runtimepath+=/usr/local/share/lilypond/current/vim/
filetype on
@end example

@noindent
Wenn LilyPond nicht in @file{/usr/local/} installiert ist, müssen Sie
den Pfad anpassen.  Das wird besprochen in
@rlearningnamed{Other sources of information, Mehr Information}.


@node Other editors
@unnumberedsubsec Andere Editoren

Andere Editoren (sowohl Texteditoren als auch graphische Editoren) haben
Unterstützung für LilyPond, aber ihre besonderen Konfigurationsdateien werden
nicht mit LilyPond zusammen verteilt.  Lesen Sie die entsprechende Dokumenation
zu näheren Fragen.  Derartige Editoren finden sich unter @rwebnamed{Easier editing, Leichteres Editieren}.


@node Converting from other formats
@section Von anderen Formaten konvertieren

LilyPond kann auch Musik aus diversen anderen Formaten importieren.
Dieses Kapitel beschreibt die dazu mit LilyPond mitgelieferten
Hilfsprogramme. Daneben existieren natürlich auch noch weitere
Programme, die Dateien für LilyPond erstellen können, wie etwa
graphische Sequenzierprogramme und XML-Konverter. Näheres dazu
findet sich auf der @uref{https://@/lilypond@/.org,Homepage} von LilyPond.

Die im Folgenden beschriebenen Programme sind eigenständige Hilfsprogramme
und werden üblicherweise von der Kommandozeile aufgerufen. Siehe
@ref{Command-line usage} für weitere Informationen.

@knownissues
Leider haben wir nicht ausreichend viele Entwickler, um all die folgenden
Hilfsprogramme ständig zu warten. Wir stellen den aktuellen Stand zur
Verfügung, können aber leider Fehlerberichte nur selten bearbeiten.
Selbstverständlich sind Patches von Ihnen sehr willkommen!


@menu
* Invoking midi2ly::          Import von MIDI.
* Invoking musicxml2ly::       Import von MusicXML.
* Invoking abc2ly::           Import von ABC.
* Invoking etf2ly::           Import von (alten) Finale-Dateien.
* Other formats::
@end menu

@node Invoking midi2ly
@subsection @command{midi2ly} aufrufen

@cindex MIDI

@command{midi2ly} übersetzt eine Typ@tie{}1 MIDI-Datei in eine
Eingabedatei für LilyPond.

MIDI (Music Instrument Digital Interface) ist ein internationaler
Standard für digitale Instrumente: Es spezifiziert die Verkabelung,
ein serielles Protokoll und ein Dateiformat. Das MIDI-Dateiformat
ist der de-facto Standard um Musik von vielen Programmen zu exportieren.
Allerdings fehlen in den MIDI-Dateien viele Ausdrucks- und
Artikulationszeichen. Dennoch kann MIDI vielfach nützlich sein,
um Musik von einem Programm zu importieren, für das kein spezielles
Hilfsprogramm den direkten Import nach LilyPond unterstützt.

@command{midi2ly} konvertiert die MIDI-Spuren nach @rinternals{Staff} und
MIDI-Kanäle in @rinternals{Voice} Kontexte. Tonhöhen werden relativ
angegeben, Tondauern nur wenn nötig.

MIDI-Dateien können auch direkt von einem digitalen Keyboard
aufgenommen und dann in eine @file{.ly}-Datei konvertiert werden.
Allerdings sind Musikinterpretationen von Menschen (aus gutem Grund!)
rhythmisch nicht exakt genug um die Konvertierung von MIDI nach LY
trivial zu gestalten. Wenn @command{midi2ly} mit Quantisierung
(@option{-s} und @option{-d} Kommandozeilenoptionen) aufgerufen wird,
versucht es diese Unschärfen im Zeitablauf zu korrigieren, ist
allerdings nicht sonderlich gut darin. Daher können wir diese Technik
leider nicht für die Konvertierung von MIDI-Aufnahmen empfehlen.


@command{midi2ly} wird von der Kommandozeile folgendermaßen aufgerufen:
@example
midi2ly [@var{Optionen}]@dots{} @var{MIDI-Datei}
@end example

Unter @q{Kommandozeile} verstehen wir dabei die Kommandozeile des
jeweiligen Betriebssystems. Für nähere Informationen hierzu siehe
@ref{Converting from other formats}.

Die folgenden Kommandozeilenoptionen werden von @command{midi2ly}
unterstützt:

@table @code
@item -a, --absolute-pitches
Gibt absolute Tonhöhen aus.

@item -d, --duration-quant=@var{LÄNGE}
Quantisiert Tondauern zu Vielfachen von @var{LÄNGE}.

@item -e, --explicit-durations
Gibt alle Tondauern explizit an.

@item -h, --help
Zeigt eine Zusammenfassung der Programmbenutzung und der Optionen.

@item -k, --key=@var{acc}[:@var{Moll}]
Setzt die Standard-Tonart. @math{@var{acc} > 0} gibt die Anzahl der
Kreuze an, @math{@var{acc} < 0} gibt die Anzahl der Bs der Tonart an.
Eine Moll-Tonart wird durch @code{:1} angegeben.

@item -o, --output=@var{Datei}
Die Ausgabe wird in die Datei @var{Datei}@file{.ly} geschrieben.

@item -s, --start-quant=@var{LÄNGE}
Quantisiert den Beginn der Noten zu Vielfachen von @var{LÄNGE}.

@item -t, --allow-tuplet=@var{DUR}*@var{NUM}/@var{DEN}
Erlaubt Tuplet-Dauern der Form @var{DUR}*@var{NUM}/@var{DEN}.

@item -V, --verbose
Gibt ausführliche informative Meldungen während der Konvertierung aus.

@item -v, --version
Gibt die Versionsnummer aus.

@item -w, --warranty
Zeigt die Lizenzbedingungen und Urheberrechtshinweise.

@item -x, --text-lyrics
Interpretiert alle Texte als Liedtexte.
@end table


@knownissues

Überlappende Noten in einem Arpeggio werden nicht korrekt dargestellt.
Nur die erste Note wird eingelesen und konvertiert, die restlichen
werden ignoriert. Als Abhilfe können Sie alle Noten auf dieselbe
Tonlänge setzen und Phrasierungszeichen oder Pedalindikatoren
hinzufügen.


@node Invoking musicxml2ly
@subsection @command{musicxml2ly} aufrufen

@cindex MusicXML

@uref{http://@/www.@/musicxml@/.org/,MusicXML} ist ein XML-Dialekt
zur Darstellung von Musiknotation.

@command{musicxml2ly} wandelt eine MusicXML-Datei nach LilyPond um,
wobei sowohl die Noten, Artikulationszeichen, Struktur der Partitur,
Liedtexte etc. einer MusicXML-Datei (im @q{part-wise}-Format) in eine
@file{.ly}-Datei um.

@command{musicxml2ly} wird von der Kommandozeile folgendermaßen aufgerufen:
@example
musicxml2ly [@var{Optionen}]@dots{} @var{XML-Datei}
@end example

Unter @q{Kommandozeile} verstehen wir dabei die Kommandozeile des
jeweiligen Betriebssystems. Für nähere Informationen hierzu siehe
@ref{Converting from other formats}.

Wenn als Dateiname @file{-} angegeben wird, liest @command{musicxml2ly}
Daten direkt von der Kommandozeile ein.

Die folgenden Kommandozeilenoptionen werden von @command{musicxml2ly}
unterstützt:

@table @code
@item -a, --absolute
Konvertiert in absolute Tonhöhen.

@item -h, --help
Zeigt eine Zusammenfassung der Programmbenutzung und der Optionen.

@item -l, --language=SPRACHE
Benutzt SPRACHE für die Notenbezeichnungen, etwa "deutsch" für deutsche
Notenbezeichnungen.

@item --loglevel=@var{Logstufe}
Passt die Ausführlichkeit der Ausgabe entsprechend @var{Logstufe} an.
Mögliche Werte sind @code{NONE},
@code{ERROR}, @code{WARN}, @code{PROGRESS} (Standard) und @code{DEBUG}.

@item --lxml
Benutzt das lxml.etree Python-Paket für die Verarbeitung von XML (benötigt weniger Speicher und Rechenleistung)

@item -m --midi
Aktiviert die MIDI-Umgebung

@item --nd --no-articulation-directions
Konvertiert keine Richtungsangaben (@code{^}, @code{_} oder @code{-})
von Artikulations- und Lautstärkebezeichnungen.

@item --no-beaming
Konvertiert keine Informationen über die Balkensetzung aus der
MusicXML-Datei. Stattdessen wird dies LilyPond überlassen.

@item -o, --output=@var{Dateiname}
Die Ausgabe wird in die Datei @var{Dateiname}@file{.ly} geschrieben. Wird
als @var{Dateiname} nur @file{-} angegeben, wird das Ergebnis der Konvertierung
an der Kommandozeile ausgegeben. Wird diese Option nicht angegeben, so
erfolgt die Ausgabe in die Datei @var{XML-Datei}@file{.ly}.

@item -r, --relative
Konvertiert in relative Tonhöhen. (Standardeinstellung)

@item -v, --verbose
Gibt ausführliche informative Meldungen während der Konvertierung aus.

@item --version
Gibt die Versionsnummer aus.

@item -z, --compressed
Die Eingabedatei wird als komprimierte MusicXML-Datei eingelesen.
Dies ist die Standardeinstellung für Dateien mit der Erweiterung
@file{.xml}.
@end table


@node Invoking abc2ly
@subsection @command{abc2ly} aufrufen

@warning{Dieses Programm ist nicht unterstützt und kann aus kommenden
LilyPond-Versionen entfernt werden.}

@cindex ABC

ABC ist ein relativ einfaches ASCII-basierendes Musikformat und ist
dokumentiert auf der ABC-Homepage:

@quotation
@uref{http://@/www@/.walshaw@/.plus@/.com/@/abc/@/learn@/.html}.
@end quotation

@command{abc2ly} konvertiert ABC-Dateien nach LilyPond und wird
von der Kommandozeile folgendermaßen aufgerufen:

@example
abc2ly [@var{Optionen}]@dots{} @var{ABC-Datei}
@end example

Die folgenden Kommandozeilenoptionen werden von @command{abc2ly}
unterstützt:

@table @code
@item -b, --beams=None
Die Balkensetzung aus der ABC-Datei erhalten.
@item -h, --help
Zeigt eine Zusammenfassung der Programmbenutzung und der Optionen.
@item -o, --output=@var{Dateiname}
Die Ausgabe wird in die Datei @var{Dateiname}@file{.ly} geschrieben.
@item -s, --strict
Strenge Auslegung einer erfolgreichen Konvertierung.
@item -v, --version
Gibt die Versionsnummer aus.
@end table

Es existiert außerdem die Möglichkeit, LilyPond-Befehle für die
Konvertierung mit @command{abc2ly} gleich in der ABC-Datei anzugeben.
Wenn sich etwa in der ABC-Datei das Kommentar

@example
%%LY voices \set autoBeaming = ##f
@end example

@noindent
befindet, so wird der Text nach dem Schlüsselwort @q{voices} direkt
in die aktuelle Stimme in der LilyPond-Datei eingefügt.

Ebenso bewirkt

@example
%%LY slyrics more words
@end example

@noindent
dass alles nach dem @q{slyrics} Schlüsselwort an der aktuellen Stelle
im Liedtext eingefügt wird.  Gleichermaßen wird mit

@example
%%LY slyrics more words
@end example

@noindent
der Text, der auf das @qq{slylrics}-Schlüsselwort folgt, in die aktuelle
Gesangstextzeile eingefügt.


@knownissues

Der ABC-Standard ist eigentlich kein wirklich vollständiger Standard.
Für komplexere Notation wie etwa Polyphonie existieren verschiedene
Konventionen.

Mehrere Lieder in einer Datei können nicht konvertiert werden.

ABC synchronisiert den Liedtext am Anfang jeder Zeile mit den Noten,
@command{abc2ly} macht dies nicht.

@command{abc2ly} ignoriert die Balkensetzung in der ABC-Datei.


@node Invoking etf2ly
@subsection @command{etf2ly} aufrufen

@warning{Dieses Programm ist nicht unterstützt und kann in kommenden
LilyPond-Versionen entfernt werden.}

@cindex ETF
@cindex enigma
@cindex Finale
@cindex Coda Technology

ETF (Enigma Transport Format) ist ein Dateiformat, das Coda
Music Technology in älteren Versionen des Programms Finale benutzt hat.

@command{etf2ly} konvertiert Teile einer ETF-Datei nach LilyPond
und wird von der Kommandozeile folgendermaßen aufgerufen:

@example
etf2ly [@var{Optionen}]@dots{} @var{ETF-Datei}
@end example

Unter @q{Kommandozeile} verstehen wir dabei die Kommandozeile des
jeweiligen Betriebssystems. Für nähere Informationen hierzu siehe
@ref{Converting from other formats}.

Die folgenden Kommandozeilenoptionen werden von @command{etf2ly}
unterstützt:

@table @code
@item -h, --help
Zeigt eine Zusammenfassung der Programmbenutzung und der Optionen.
@item -o, --output=@var{Dateiname}
Die Ausgabe wird in die Datei @var{Dateiname}@file{.ly} geschrieben.
@item --version
Gibt die Versionsnummer aus.
@end table


@knownissues

Die Liste der Artikulationszeichen is unvollständig. Leere Takte
verwirren @command{etf2ly}. Mehrfache Vorschlagnoten werden falsch
beendet.


@node Other formats
@subsection Andere Formate

@cindex Externe Programme, LilyPond-Dateien erstellen

LilyPond kommt nicht mit der Unterstützung für andere Formate, aber einige
externe Programme können auch LilyPond-Dateien erstellen.  Diese finden
sich unter @rwebnamed{Easier editing, Leichteres Editieren}.



@node LilyPond output in other programs
@section LilyPond-Ausgabe in anderen Programmen

Dieser Abschnitt stellt Methoden vor, wie Text und Musik auf andere
Weise kombiniert werden können als dies durch @command{lilypond-book}
automatisiert geschieht.


@node Many quotes from a large score
@unnumberedsubsec Viele Zitate aus einer langen Partitur

Wenn aus einer großen Partitur viele kleine Fragmente eingefügt
werden sollen, kann dazu das @q{clip systems} Feature benutzt werden.
Siehe @rnotationnamed{Extracting fragments of music, Notationsfragmente extrahieren}.


@node Inserting LilyPond output into OpenOffice
@unnumberedsubsec LilyPond-Noten in OpenOffice.org integrieren

@cindex OpenOffice.org

Musik im LilyPond-Format kann in OpenOffice.org eingefügt werden mittels
@uref{https://github.com/openlilylib/LO-ly,OOoLilyPond}.


@node Inserting LilyPond output into other programs
@unnumberedsubsec LilyPond-Noten in andere Programme integrieren

Um die Ausgabe von LilyPond in anderen Programmen einzufügen,
sollte @code{lilypond} anstelle von @code{lilypond-book}
benutzt werden. Jedes Beispiel muss
getrennt manuell erzeugt und ins Dokument eingefügt werden;
für letzteres schlagen Sie bitte im Handbuch Ihrer
Textverarbeitungs-Software nach. Die meisten Programme
unterstützen das Einfügen von Grafiken im @file{PNG}-, @file{EPS}-
oder @file{PDF}-Format.

Um den leeren Rand um die Notenzeilen zu verringern, können folgende
Einstellungen benutzt werden:

@example
\paper@{
  indent=0\mm
  line-width=120\mm
  oddFooterMarkup=##f
  oddHeaderMarkup=##f
  bookTitleMarkup = ##f
  scoreTitleMarkup = ##f
@}

@{ c1 @}
@end example

Benutzbare Bilddateien können mit folgendem Befehl erzeugt werden:

@example
EPS

lilypond -dbackend=eps -dno-gs-load-fonts -dinclude-eps-fonts   Dateiname.ly

PNG

lilypond -dbackend=eps -dno-gs-load-fonts -dinclude-eps-fonts --png Dateiname.ly

Ein transparentes PNG

lilypond -dbackend=eps -dno-gs-load-fonts -dinclude-eps-fonts \
  -dpixmap-format=pngalpha --png myfile.ly
@end example


@node Independent includes
@section Unabhängige @code{include}-Abschnitte

Einige Leute haben große (und nützliche!) Code-Abschnitte geshrieben,
die man in vielen Projekten verwenden kann.  Dieser Code wird möglicherweise
auch eines Tages in LilyPond selbst integriert werden, aber bis dahin
müssen Sie ihn selber herunterladen und mit @code{\include} selber
einfügen.


@node MIDI articulation
@subsection MIDI-Artikulation

LilyPond kann benutzt werden, um MIDI-Ausgabe zu erzeugen, etwa
um hörend zu korrigieren, was man notiert hat.  Jedoch werden nur
Dynamik, explizite Tempoänderungen und die Noten und Dauern selber
in der MIDI-Datei aufgenommen.

Das @emph{articulate}-Projekt ist ein Versuch, mehr Information
in eine MIDI-Datei zu kopieren.  Es funktioniert, indem man Noten,
die sich nicht unter Bögen befinden, verkürzt, um die Noten
zu @qq{artikulieren}.  Die Stärke der Kürzung hängt von den
Aritkulationszeichen ab, die an die Noten gehängt werden:
Staccato halbiert den Notwert, Tenuto gibt der Note ihre gesamte Dauer
usw.  Das Skript kann auch Triller und Doppelschläge in MIDI umwandeln,
und man könnte auch andere Ornamente implementieren.

@example
@uref{http://@/www@/.nicta@/.com@/.au/@/people/@/chubbp/@/articulate}
@end example

@knownissues

Die größte Einschränkung ist, dass man nur die Sachen beeinflussen kann,
die man weiß: alles, was nur Textbeschriftung ist (anstelle einer Noteneigenschaft)
wird immernoch ignoriert.
