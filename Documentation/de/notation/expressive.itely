@c -*- coding: utf-8; mode: texinfo; documentlanguage: de -*-
@ignore
    Translation of GIT committish: e5a609e373eae846857f9a6d70a402a3d42b7d94

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c \version "2.21.0"

@c Translators: Till Paala

@node Expressive marks
@section Ausdrucksbezeichnungen

@lilypondfile[quote]{snippets/expressive-headword.ly}

Dieser Abschnitt zeigt verschiedene Ausdrucksbezeichnungen,
die zur Partitur hinzugefügt werden können.


@node Expressive marks attached to notes
@subsection Ausdrucksbezeichnungen an Noten angehängt

Dieser Abschnitt erklärt, wie man Ausdrucksbezeichnungen erstellt,
die an Noten gebunden sind: Artikulationszeichen, Ornamente und
Dynamikzeichen.  Es werden auch Methoden gezeigt, eigene
Ausdrucksbezeichnungen zu erstellen.


@node Articulations and ornamentations
@unnumberedsubsubsec Artikulationszeichen und Verzierungen

@cindex Artikulationszeichen
@cindex Beschriftung
@cindex Zeichen
@cindex Ornament
@cindex Espressivo
@cindex Fermate
@cindex Anstrich
@cindex Abstrich
@cindex Pedal-Bezeichnung
@cindex Orgelpedal-Bezeichnung
@cindex Doppelschlag
@cindex offen
@cindex gestopft
@cindex gedämpft
@cindex Flageolet
@cindex Triller
@cindex Praller
@cindex Mordent
@cindex Daumenbezeichnung
@cindex Segno
@cindex Coda
@cindex Varcoda
@cindex D'al Segno

@funindex \accent
@funindex \marcato
@funindex \staccatissimo
@funindex \espressivo
@funindex \staccato
@funindex \tenuto
@funindex \portato
@funindex \upbow
@funindex \downbow
@funindex \flageolet
@funindex \thumb
@funindex \lheel
@funindex \rheel
@funindex \ltoe
@funindex \rtoe
@funindex \open
@funindex \halfopen
@funindex \stopped
@funindex \snappizzicato
@funindex \turn
@funindex \reverseturn
@funindex \trill
@funindex \prall
@funindex \mordent
@funindex \prallprall
@funindex \prallmordent
@funindex \upprall
@funindex \downprall
@funindex \upmordent
@funindex \downmordent
@funindex \pralldown
@funindex \prallup
@funindex \lineprall
@funindex \signumcongruentiae
@funindex \shortfermata
@funindex \fermata
@funindex \longfermata
@funindex \verylongfermata
@funindex \segno
@funindex \coda
@funindex \varcoda

@funindex -

Eine Vielfalt an Symbolen kann über und unter den Noten erscheinen,
um zu markieren, auf welche Art die Note ausgeführt werden soll.
Hierzu wird folgende Syntax benutzt:

@example
@var{Note}\@var{Bezeichnung}
@end example

Die möglichen Werte für @var{Bezeichnung} sind aufgelistet in
@ref{List of articulations}.  Ein Beispiel:

@lilypond[verbatim,quote]
\relative {
  c''4\staccato c\mordent b2\turn
  c1\fermata
}
@end lilypond

@cindex Akzent
@cindex Marcato
@cindex Staccatissimo
@cindex Espressivo
@cindex Staccato
@cindex Portato
@cindex Tenuto

Einige dieser Artikulationszeichen haben eine Abkürzung, damit
es einfacher ist, sie zu schreiben.  Die Abkürzung wird an die
Notenbezeichnung gehängt, wobei ihre Syntax aus einem Minuszeichen
@code{-} besteht, gefolgt von dem Symbol, das dem
Artikulationszeichen zugeordnet ist.  Es gibt diese Abkürzungen
für @notation{marcato},
@notation{stopped} (gedämpft), @notation{tenuto},
@notation{staccatissimo}, @notation{accent}, @notation{staccato},
und @notation{portato}.  Die ihnen entsprechenden Symbole
werden also folgendermaßen notiert:

@lilypond[verbatim,quote]
\relative {
  c''4-^ c-+ c-- c-!
  c4-> c-. c2-_
}
@end lilypond

Die Regeln für die standardmäßige Platzierung von
Artikulationszeichen werden in der Datei @file{scm/script.scm}
definiert.  Artikulationszeichen und Ornamente können manuell
über oder unter dem System gesetzt werden, siehe
@ref{Direction and placement}.

Artikulationszeichen sind @code{Script}-Objekte.  Ihre Eigenschaften
werden ausführlich in @rinternals{Script} beschrieben.

Artikulationen können neben Noten auch an Pausen und Mehrtaktpausen
gehängt werden.  Beim Anhängen an eine Mehrtaktpause wird ein
@code{MultiMeasureRestScript}-Objekt erstellt.

@lilypond[verbatim,quote,fragment]
\override Script.color = #red
\override MultiMeasureRestScript.color = #blue
a'2\fermata r\fermata
R1\fermata
@end lilypond

Zusätzlich zu den Artikulationszeichen können auch Text und Beschriftung
an Noten angehängt werden.  Siehe auch @ref{Text scripts}.

Zu weiterer Information über die Reihenfolge von Scripten und
TextScripten, die an Noten angehängt werden, siehe 
@rlearningnamed{Placement of objects, Positionierung von Objekten}.

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/modifying-default-values-for-articulation-shorthand-notation.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/controlling-the-vertical-ordering-of-scripts.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/creating-a-delayed-turn.ly}


@morerefs
Glossar:
@rglos{tenuto},
@rglos{accent},
@rglos{staccato},
@rglos{portato}.

Handbuch zum Lernen:
@rlearningnamed{Placement of objects, Positionierung von Objekten}.

Notationsreferenz:
@ref{Text scripts},
@ref{Direction and placement},
@ref{List of articulations},
@ref{Trills}.

Installierte Dateien:
@file{scm/script.scm}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{Script},
@rinternals{TextScript}.


@node Dynamics
@unnumberedsubsubsec Dynamik

@cindex Lautstärke
@cindex Dynamik
@cindex absolute Lautstärke

@funindex \ppppp
@funindex \pppp
@funindex \ppp
@funindex \pp
@funindex \p
@funindex \mp
@funindex \mf
@funindex \f
@funindex \ff
@funindex \fff
@funindex \ffff
@funindex \fffff
@funindex \fp
@funindex \sf
@funindex \sff
@funindex \sp
@funindex \spp
@funindex \sfz
@funindex \rfz

Absolute Dynamikbezeichnung wird mit Befehlen nach den Noten
angezeigt, etwa @code{c4\ff}.  Die vordefinierten Befehle lauten:
@code{\ppppp}, @code{\pppp}, @code{\ppp},
@code{\pp}, @code{\p}, @code{\mp}, @code{\mf}, @code{\f}, @code{\ff},
@code{\fff}, @code{\ffff}, @code{fffff}, @code{\fp}, @code{\sf}, @code{\sff},
@code{\sp}, @code{\spp}, @code{\sfz}, and @code{\rfz}.  Die
Dynamikzeichen können manuell unter- oder oberhalb des Systems
platziert werden, siehe @ref{Direction and placement}.

@lilypond[verbatim,quote]
\relative c'' {
  c2\ppp c\mp
  c2\rfz c^\mf
  c2_\spp c^\ff
}
@end lilypond

@cindex Crescendo-Klammer
@cindex Klammer, Crescendo
@cindex Crescendo
@cindex Decrescendo
@cindex Diminuendo

@funindex \<
@funindex \>
@funindex \!
@funindex \cr
@funindex \decr

Eine @notation{Crescendo}-Klammer wird mit dem Befehl
@code{\<} begonnen und mit @code{\!}, einem absoluten Dynamikbefehl oder einer weiteren Crescendo- oder
Decrescendo-Klammer beendet.  Ein @notation{Decrescendo}
beginnt mit @code{\>} und wird auch beendet mit @code{\!},
einem absoluten Dynamikbefehl oder einem weiteren
Crescendo oder Decrescendo.  @code{\cr} und @code{\decr} können
anstelle von @code{\<} und
@code{\>} benutzt werden.  Die Befehle ergeben standardmäßig
Crescendo-Klammern.

@lilypond[verbatim,quote]
\relative c'' {
  c2\< c\!
  d2\< d\f
  e2\< e\>
  f2\> f\!
  e2\> e\mp
  d2\> d\>
  c1\!
}
@end lilypond

Eine Crescendo-Klammer, die mit @code{\!} beendet wird, endet an der rechten
Seite der Note, welcher @code{\!} zugeordnet ist.  In dem Fall, dass es durch
den Beginn eines anderen @notation{crescendo}- oder @notation{decrescendo}-Zeichens
beendet wird, endet es in der Mitte der Note, welche das nächste @code{\<}
oder @code{\>} angehängt hat.  Die nächste Klammer beginnt dann am rechten
Rand der selben Note anstatt dem normalerweise linken Rand, wenn die
vorherige Klammer mit @code{\!} beendet worden wäre.

@lilypond[verbatim,quote]
\relative {
  c''1\< | c4 a c\< a | c4 a c\! a\< | c4 a c a\!
}
@end lilypond

@cindex mehre Dynamikzeichen an einer Note
@cindex Dynamik, mehrere Zeichen an einer Note

Leere Pausenzeichen werden benötigt, um mehrere Zeichen für eine Note
zu notieren.  Das ist insbesondere nützlich, wenn man @notation{crescendo}
und @notation{decrescendo} zu der selben Note hinzufügen will:

@lilypond[verbatim,quote]
\relative {
  c''4\< c\! d\> e\!
  << f1 { s4 s4\< s4\> s4\! } >>
}
@end lilypond

@cindex Espressivo-Artikulation

@funindex \espressivo

Der @code{\espressivo}-Befehl kann eingesetzt werden, um crescendo
und decrescendo für die selbe Note anzuzeigen.  Dieser Befehl ist
jedoch als Artikulation, nicht als Dynamikzeichen implementiert.

@lilypond[verbatim,quote]
\relative {
  c''2 b4 a
  g1\espressivo
}
@end lilypond

@funindex \cresc
@funindex \decresc
@funindex \dim
Mit Text gesetzte Crescendo-Bezeichnungen beginnen mit @code{\cresc}.
Mit Text gesetzte Decrescendo-Bezeichnungen beginnen mit @code{\decresc}
oder @code{\dim}.  Fortsetzungslinien werden gesetzt, wenn sie benötigt werden.

@lilypond[verbatim,quote]
\relative {
  g'8\cresc a b c b c d e\mf |
  f8\decresc e d c e\> d c b |
  a1\dim ~ |
  a2. r4\! |
}
@end lilypond
 


@funindex \crescTextCresc
@funindex \dimTextDecresc
@funindex \dimTextDecr
@funindex \dimTextDim
@funindex \crescHairpin
@funindex \dimHairpin

Als Text gesetzte Dynamik-Bezeichnungen können auch die Crescendo-Klammern
ersetzen:

@lilypond[verbatim,quote]
\relative c'' {
  \crescTextCresc
  c4\< d e f\! |
  \dimTextDecresc
  g4\> e d c\! |
  \dimTextDecr
  e4\> d c b\! |
  \dimTextDim
  d4\> c b a\! |
  \crescHairpin
  \dimHairpin
  c4\< d\! e\> d\! |
}
@end lilypond

Um neue absolute Dynamikzeichen oder Text, der mit ihnen
angeordnet wird, zu erstellen, siehe @ref{New dynamic marks}.

@cindex Dynamik, vertikale Position
@cindex vertikale Position von Dynamik

Vertikale Position der Zeichen wird von der Funktion
@rinternals{DynamicLineSpanner} verwaltet.
@funindex \dynamicUp
@funindex \dynamicDown
@funindex \dynamicNeutral

Es gibt einen besonderen @code{Dynamics}-Kontext, um Crescendi und Decrescendi
auf einer eigenen Zeile zu notieren.  Mit leeren Pausen (@code{s}) werden die
Dauern gesetzt.  (Auch Noten in einem @code{Dynamics}-Kontext nehmen eine Dauer
ein, werden aber nicht gesetzt.)  Der @code{Dynamics}-Kontext ist sehr nützlich,
um andere Elemente wie Textbeschriftung, Text-Strecker und Klavierpedalbezeichnungen
aufzunehmen.

@lilypond[verbatim,quote]
<<
  \new Staff \relative {
    c'2 d4 e |
    c4 e e,2 |
    g'4 a g a |
    c1 |
  }
  \new Dynamics {
    s1\< |
    s1\f |
    s2\dim s2-"rit." |
    s1\p |
  }
>>
@end lilypond

@predefined
@code{\dynamicUp},
@code{\dynamicDown},
@code{\dynamicNeutral},
@code{\crescTextCresc},
@code{\dimTextDim},
@code{\dimTextDecr},
@code{\dimTextDecresc},
@code{\crescHairpin},
@code{\dimHairpin}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/setting-hairpin-behavior-at-bar-lines.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/setting-the-minimum-length-of-hairpins.ly}

@cindex al niente
@cindex niente, al

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/printing-hairpins-using-al-niente-notation.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/vertically-aligned-dynamics-and-textscripts.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/hiding-the-extender-line-for-text-dynamics.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/changing-text-and-spanner-styles-for-text-dynamics.ly}


@morerefs
Glossar:
@rglos{al niente},
@rglos{crescendo},
@rglos{decrescendo},
@rglos{hairpin}.
Handbuch zum Lernen:
@rlearningnamed{Articulation and dynamics, Artikulationszeichen und Lautstärke}.

Notationsreferenz:
@ref{Direction and placement},
@ref{New dynamic marks},
@ref{What goes into the MIDI output?},
@ref{Controlling MIDI dynamics}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{DynamicText},
@rinternals{Hairpin},
@rinternals{DynamicLineSpanner},
@rinternals{Dynamics}.


@node New dynamic marks
@unnumberedsubsubsec Neue Lautstärkezeichen

@cindex neue Dynamikzeichen
@cindex eigene Dynamikzeichen
@cindex Dynamikzeichen, eigene

Die einfachste Art, eigene Dynamikbezeichnungen zu erstellen,
ist die Benutzung von @code{\markup}-(Textbeschriftungs)-Objekten.

@lilypond[verbatim,quote]
moltoF = \markup { molto \dynamic f }

\relative {
  <d' e>16_\moltoF <d e>
  <d e>2..
}
@end lilypond

@cindex Dynamikzeichen, Anmerkung
@cindex Dynamikzeichen, Klammer
@cindex editorische Dynamikzeichen
@funindex \bracket
@funindex \dynamic

Mit einer Textbeschriftung können editorische Dynamikzeichen
(in runden oder eckigen Klammern) erstellt werden.  Die Syntax
für den Textbeschriftungsmodus wird erklärt in
@ref{Formatting text}.

@lilypond[verbatim,quote]
roundF = \markup {
    \center-align \concat { \bold { \italic ( }
           \dynamic f \bold { \italic ) } } }
boxF = \markup { \bracket { \dynamic f } }
\relative {
  c'1_\roundF
  c1_\boxF
}
@end lilypond

@cindex make-dynamic-script
@funindex make-dynamic-script

Einfache, mittig gesetzte Dynamikzeichen können schnell mit der
@code{make-dynamic-script}-Funktion erstellt werden.

@lilypond[verbatim,quote]
sfzp = #(make-dynamic-script "sfzp")
\relative {
  c'4 c c\sfzp c
}
@end lilypond

Allgemein gesagt kann @code{make-dynamic-script} jegliches
Textbeschriftungsobjekt als Argument haben.    Die
Schriftart für Dynamikzeichen enthält nur die Buchstaben
@code{f,m,p,r,s} sowie @code{z}; ein Dynamikzeichen, das
anderen Text oder Satzzeichen enthalten soll, benötigt
Textbeschriftungsbefehle, die die normale Schriftart
einschalten, etwa @code{\normal-text}.  Die Funktion
@code{make-dynamic-script} sollte anstelle einer normalen
Textbeschriftung vor allem deshalb benutzt werden, weil auf
diese Weise die vertikale Ausrichtung von den Textbeschriftungen
(engl. markup) und den spitzen Klammern an der selben Linie
gewährleistet wird.

@lilypond[verbatim,quote]
roundF = \markup { \center-align \concat {
           \normal-text { \bold { \italic ( } }
           \dynamic f
           \normal-text { \bold { \italic ) } } } }
boxF = \markup { \bracket { \dynamic f } }
mfEspress = \markup { \center-align \line {
              \hspace #3.7 mf \normal-text \italic espress. } }
roundFdynamic = #(make-dynamic-script roundF)
boxFdynamic = #(make-dynamic-script boxF)
mfEspressDynamic = #(make-dynamic-script mfEspress)
\relative {
  c'4_\roundFdynamic\< d e f
  g,1~_\boxFdynamic\>
  g1
  g'1~\mfEspressDynamic
  g1
}
@end lilypond

Anstelle dessen kann auch die Scheme-Form des Beschriftungs-Modus
verwendet werden.  Seine Syntax ist erklärt in
@rextendnamed{Markup construction in Scheme, Beschriftungskonstruktionen in Scheme}.

@lilypond[verbatim,quote]
moltoF = #(make-dynamic-script
            (markup #:normal-text "molto"
                    #:dynamic "f"))
\relative {
  <d' e>16 <d e>
  <d e>2..\moltoF
}
@end lilypond

Die Auswahl von Schriftarten in Textbeschriftungen ist erklärt in
@ref{Selecting font and font size}.


@morerefs
Notationsreferenz:
@ref{Formatting text},
@ref{Selecting font and font size},
@ref{What goes into the MIDI output?},
@ref{Controlling MIDI dynamics}.

Erweitern:
@rextendnamed{Markup construction in Scheme, Beschriftungskonstruktionen in Scheme}.

Schnipsel:
@rlsr{Expressive marks}.


@node Expressive marks as curves
@subsection Ausdrucksbezeichnungen als Bögen

Dieser Abschnitt erklärt, wie man verschiedene gebogene
Ausdrucksbezeichnungen erstellt: Legato- und Phrasierungsbögen,
Atemzeichen und Glissandos zu unbestimmten Tonhöhen.


@node Slurs
@unnumberedsubsubsec Legatobögen

@cindex Legatobögen

Ein Legatobogen (engl. slur) zeigt an, dass die Noten
@emph{legato} gespielt werden sollen. Er wird mit Klammern
hinter den Notenwerten notiert.

@warning{In polyphoner Musik muss ein Legatobogen in der gleichen
Stimme beendet werden, in der er begonnen wurde.}

@lilypond[verbatim,quote]
\relative {
  f''4( g a) a8 b(
  a4 g2 f4)
  <c e>2( <b d>2)
}
@end lilypond

@cindex Bögen, manuelle Platzierung
@cindex Legatobögen, manuelle Platzierung
@cindex Bögen, unter Noten
@cindex Bögen, über Noten
@funindex \slurDown
@funindex \slurNeutral


Legatobögen können manuell ober- oder unterhalb des Notensystems
besetzt werden, siehe
@ref{Direction and placement}.

@cindex Phrasierungsbögen
@cindex mehrfache Bögen
@cindex gleichzeitige Bögen
@cindex Bögen, Phrasierung
@cindex Bögen, mehrfach
@cindex Bögen, gleichzeitig

Gleichzeitige, überlappende Legatobögen sind nicht erlaubt, aber
ein Phrasierungsbogen kann einen Legatobogen überlappen.  Damit
können zwei Bögen gleichzeitig ausgegeben werden.  Siehe auch
@ref{Phrasing slurs}.

@cindex Legatobogen-Stil
@cindex durchgehender Legatobogen
@cindex massiver Legatobogen
@cindex gepunkteter Legatobogen
@cindex gestrichelter Legatobogen
@cindex Legatobogen, massiv
@cindex Legatobogen, gepunktet
@cindex Legatobogen, gestrichelt
@cindex Stil von Legatobögen
@funindex \slurDashed
@funindex \slurDotted
@funindex \slurSolid

Legatobögen können durchgehend, gepunktet oder gestrichelt dargestellt
werden.  Standard ist der durchgehende Bogen:

@lilypond[verbatim,quote]
\relative {
  c'4( e g2)
  \slurDashed
  g4( e c2)
  \slurDotted
  c4( e g2)
  \slurSolid
  g4( e c2)
}
@end lilypond

@funindex \slurHalfDashed
@funindex \slurHalfSolid
@cindex Bogen, halb gestrichelt, halb durchgehend

Bögen können auch halb gestrichelt (die erste Hälfte gestrichelt,
die zweite Hälfte durchgehend) erstellt werden, oder als
halb durchgehend (die erste Hälfte durchgehend, die
zweite Hälfte gestrichelt:

@lilypond[verbatim,quote]
\relative {
  c'4( e g2)
  \slurHalfDashed
  g4( e c2)
  \slurHalfSolid
  c4( e g2)
  \slurSolid
  g4( e c2)
}
@end lilypond

@funindex \slurDashPattern
@cindex Bogen, Strichelung definieren

Eigene Muster für die Strichelung können definiert werden:

@lilypond[verbatim,quote]
\relative {
  c'4( e g2)
  \slurDashPattern #0.7 #0.75
  g4( e c2)
  \slurDashPattern #0.5 #2.0
  c4( e g2)
  \slurSolid
  g4( e c2)
}
@end lilypond

@predefined
@funindex \slurUp

@code{\slurUp},
@code{\slurDown},
@code{\slurNeutral},
@code{\slurDashed},
@code{\slurDotted},
@code{\slurHalfDashed},
@code{\slurHalfSolid},
@code{\slurDashPattern},
@code{\slurSolid}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/using-double-slurs-for-legato-chords.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/positioning-text-markups-inside-slurs.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/making-slurs-with-complex-dash-structure.ly}


@morerefs
Glossar:
@rglos{slur}.

Handbuch zum Lernen:
@rlearningnamed{On the un-nestedness of brackets and ties,@"Uber die Nicht-Schachtelung von Klammern und
Bindebögen}.

Notationsreferenz:
@ref{Direction and placement},
@ref{Phrasing slurs}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{Slur}.



@node Phrasing slurs
@unnumberedsubsubsec Phrasierungsbögen

@cindex Phrasierungsbögen
@cindex Phrasierungszeichen
@cindex Bogen zur Phrasierung
@cindex Legatobogen zur Phrasierung
@funindex \(
@funindex \)

Ein Phrasierungsbogen verbindet Noten und wird verwendet, um einen
musikalischen Ausdruck anzuzeigen. Er wird mit den Befehlen
@code{\(} und @code{\)} eingegeben.

@lilypond[verbatim,quote]
\relative {
  c''4\( d( e) f(
  e2) d\)
}
@end lilypond

@funindex \phrasingSlurUp
@funindex \phrasingSlurDown
@funindex \phrasingSlurNeutral

Im typographischen Sinne verhalten sich Phrasierungsbögen genauso wie
Legatobögen. Sie werden aber als eigene Objekte behandelt. Ein
@code{\slurUp} hat also keine Auswirkung auf die Phrasierungsbögen.
Phrasierungsbögen können manuell oberhalb oder unterhalb des
Notensystems gesetzt werden, siehe
@ref{Direction and placement}.

@cindex gleichzeitige Phrasierungsbögen
@cindex mehrere Phrasierungsbögen
@cindex Bögen, gleichzeitige Phrasierung
@cindex Phrasierungsbögen, gleichzeitig
@cindex Phrasierungsbögen, mehrfach

Simultane oder überlappende Phrasierungsbögen sind nicht
erlaubt.

@funindex \phrasingSlurDashed
@funindex \phrasingSlurDotted
@funindex \phrasingSlurSolid
@cindex Phrasierungsbögen, gestrichelt
@cindex gestrichelter Phrasierungsbogen
@cindex Phrasierungsbögen, gepunktet
@cindex gepunkteter Phrasierungsbogen

Phrasierungsbögen können durchgehend, gepunktet oder gestrichelt dargestellt
werden.  Standard ist der durchgehende Bogen:

@lilypond[verbatim,quote]
\relative {
  c'4\( e g2\)
  \phrasingSlurDashed
  g4\( e c2\)
  \phrasingSlurDotted
  c4\( e g2\)
  \phrasingSlurSolid
  g4\( e c2\)
}
@end lilypond

funindex phrasingSlurHalfDashed
@funindex \phrasingSlurHalfDashed
@funindex \phrasingSlurHalfSolid

@cindex Phrasierungsbogen, halb durchgehend, halb gestrichelt
@cindex Bogen, halb durchgehend, halb gestrichelt

Phrasierungsbögen können auch als halbgestrichelt dargestellt
werden (die erste Hälfte gestrichelt, die zweite Hälfte durchgehend,
oder halb durchgehend (die erste Hälfte durchgehend, die zweite
gestrichelt):

@lilypond[verbatim,quote]
\relative {
  c'4\( e g2\)
  \phrasingSlurHalfDashed
  g4\( e c2\)
  \phrasingSlurHalfSolid
  c4\( e g2\)
  \phrasingSlurSolid
  g4\( e c2\)
}
@end lilypond

@funindex \phrasingSlurDashPattern
@cindex Phrasierungsbogen, Strichelmuster definieren

Eigene Strichelmuster für Phrasierungsbögen können definiert werden:

@lilypond[verbatim,quote]
\relative {
  c'4\( e g2\)
  \phrasingSlurDashPattern #0.7 #0.75
  g4\( e c2\)
  \phrasingSlurDashPattern #0.5 #2.0
  c4\( e g2\)
  \phrasingSlurSolid
  g4\( e c2\)
}
@end lilypond

Strichelmusterdefinitionen für Phrasierungsbögen haben die
gleiche Struktur wie die Definitionen für Legatobögen.  Zu
mehr Information über komplizierte Strichelmuster, siehe
die Schnipsel im Abschnitt @ref{Slurs}.


@predefined
@code{\phrasingSlurUp},
@code{\phrasingSlurDown},
@code{\phrasingSlurNeutral},
@code{\phrasingSlurDashed},
@code{\phrasingSlurDotted},
@code{\phrasingSlurHalfDashed},
@code{\phrasingSlurHalfSolid},
@code{\phrasingSlurDashPattern},
@code{\phrasingSlurSolid}.
@endpredefined

@morerefs
Handbuch zum Lernen:
@rlearningnamed{On the un-nestedness of brackets and ties,@"Uber die Nicht-Schachtelung von Klammern und
Bindebögen}.

Notationsreferenz:
@ref{Direction and placement}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{PhrasingSlur}.



@node Breath marks
@unnumberedsubsubsec Atemzeichen

@cindex Atemzeichen
@cindex Pausenzeichen
@funindex \breathe

Atemzeichen werden mit dem Befehl @code{\breathe} eingegeben.

@lilypond[verbatim,quote]
{ c''2. \breathe d''4 }
@end lilypond

Ein Atemzeichen bezeichnet gleichzeitig das Ende eines automatischen
Balkens.  Um das Verhalten zu verändern siehe @ref{Manual beams}.

@lilypond[verbatim,quote]
\relative { c''8 \breathe d e f g2 }
@end lilypond

Musikalische Zeichen für Atemzeichen in Alter Notation, auch
Divisiones genannt, sind unterstützt.  Für Einzelheiten siehe
@ref{Divisiones}.

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/changing-the-breath-mark-symbol.ly}

@cindex caesura
@cindex railroad tracks

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/inserting-a-caesura.ly}


@morerefs
Glossar:
@rglos{caesura}.

Notationsreferenz:
@ref{Divisiones}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{BreathingEvent},
@rinternals{BreathingSign},
@rinternals{Breathing_sign_engraver}.


@node Falls and doits
@unnumberedsubsubsec Glissando zu unbestimmter Tonhöhe

@cindex falls
@cindex doits
@cindex Glissando, unbestimmt
@cindex Glissando, nach oben
@cindex Glissando, nach unten
@cindex Gleiten nach oben/unten
@funindex \bendAfter


Gleiten nach oben und unten kann mit dem Befehl @code{\bendAfter}
notiert werden.  Die Richtung des Glissandos wird mit einem
Plus oder Minus (nach oben bzw. nach unten) angezeigt.  Die
Zahl zeigt die Intervallgröße an, über die sich das Glissando @emph{nach}
der Note erstreckt.

@lilypond[verbatim,quote]
\relative c'' {
  c2\bendAfter #+4
  c2\bendAfter #-4
  c2\bendAfter #+6.5
  c2\bendAfter #-6.5
  c2\bendAfter #+8
  c2\bendAfter #-8
}
@end lilypond

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/adjusting-the-shape-of-falls-and-doits.ly}

@morerefs
Glossar:
@rglos{fall},
@rglos{doit}.

Schnipsel:
@rlsr{Expressive marks}.


@node Expressive marks as lines
@subsection Ausdrucksbezeichnungen als Linien

Dieser Abschnitt zeigt, wie man verschiedene Ausdrucksbezeichnungen
erstellt, die sich linear erstrecken: Glissando, Arpeggio und
Triller.


@node Glissando
@unnumberedsubsubsec Glissando

@cindex Glissando
@funindex \glissando

Ein @notation{Glissando} wird
mit dem Befehl @code{\glissando} auf eine Note folgend notiert:

@lilypond[verbatim,quote,relative=2]
g2\glissando g'
c2\glissando c,
@end lilypond

Verschiedene Glissando-Stile sind möglich.  Für Einzelheiten siehe
@ref{Line styles}.

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/glissandi-can-skip-grobs.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/contemporary-glissando.ly}

@morerefs
Glossar:
@rglos{glissando}.

Notationsreferenz:
@ref{Line styles}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{Glissando}.

@knownissues
Printing text over the line (such as @notation{gliss.}) is not
supported.


@node Arpeggio
@unnumberedsubsubsec Arpeggio

@cindex Arpeggio
@cindex Gebrochene Akkorde
@cindex Akkord, gebrochen
@funindex \arpeggio
@funindex \arpeggioArrowUp
@funindex \arpeggioArrowDown
@funindex \arpeggioNormal

Ein @notation{Arpeggio} als Zeichen, dass ein Akkord gebrochen gespielt werden soll,
kann mit dem Befehl @code{\arpeggio} hinter der
Akkord-Konstruktion erzeugt werden.

@lilypond[verbatim,quote]
\relative { <c' e g c>1\arpeggio }
@end lilypond

Unterschiedliche Arpeggio-Typen können benutzt werden.
@code{\arpeggioNormal} stellt wieder das normale Verhalten
her:

@lilypond[verbatim,quote]
\relative {
  <c' e g c>2\arpeggio

  \arpeggioArrowUp
  <c e g c>2\arpeggio

  \arpeggioArrowDown
  <c e g c>2\arpeggio

  \arpeggioNormal
  <c e g c>2\arpeggio
}
@end lilypond

@cindex Arpeggio-Symbole, besondere
@cindex besondere Arpeggio-Symbole

@funindex \arpeggioBracket
@funindex \arpeggioParenthesis
@funindex \arpeggioParenthesisDashed

Besondere Arpeggios mit Klammern können erstellt werden:

@lilypond[verbatim,quote]
\relative {
  <c' e g c>2

  \arpeggioBracket
  <c e g c>2\arpeggio

  \arpeggioParenthesis
  <c e g c>2\arpeggio

  \arpeggioParenthesisDashed
  <c e g c>2\arpeggio

  \arpeggioNormal
  <c e g c>2\arpeggio
}
@end lilypond

Die @code{dash}-Eigenschaft der Arpeggioklammern werden von
der @code{'dash-definition}-Eigenschaft kontrolliert, die
beschrieben ist in @ref{Slurs}.

Ein Arpeggio kann auch explizit ausgeschrieben werden, indem
Überbindungsbögen benutzt werden.  Für mehr Information siehe
@ref{Ties}.

@predefined
@code{\arpeggio},
@code{\arpeggioArrowUp},
@code{\arpeggioArrowDown},
@code{\arpeggioNormal},
@code{\arpeggioBracket},
@code{\arpeggioParenthesis},
@code{\arpeggioParenthesisDashed}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/creating-cross-staff-arpeggios-in-a-piano-staff.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/creating-cross-staff-arpeggios-in-other-contexts.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/creating-arpeggios-across-notes-in-different-voices.ly}

@morerefs
Glossar:
@rglos{arpeggio}.

Notationsreferenz:
@ref{Slurs},
@ref{Ties}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{Arpeggio},
@rinternals{Slur},
@rinternals{PianoStaff}.

@knownissues
@cindex Arpeggio über Systeme im Klammernstil
@cindex Klammer-Arpeggio über Systeme
@cindex Zwischensysteme-Klammer-Arpeggio

Es ist nicht möglich, Arpeggios zwischen Systemen und solche, die sich
nur auf ein System erstrecken, zum gleichen Zeitpunkt in einem
Klaviersystem (@code{PianoStaff}) zu benutzen.

Die Arpeggios im Klammer-Stil funktionieren nicht über
mehrere Notensysteme.


@node Trills
@unnumberedsubsubsec Triller

@cindex Triller

@funindex \trill
@funindex \startTrillSpan
@funindex \stopTrillSpan

Kurze Triller ohne eine Dauer werden mit dem Befehl
@code{\trill} notiert, siehe auch
@ref{Articulations and ornamentations}.

Längere Triller mit einer Dauer werden mit den Befehlen
@code{\startTrillSpan} zu
Beginn und @code{\stopTrillSpan} am Ende erstellt.

@lilypond[verbatim,quote]
\relative {
  d''1\startTrillSpan
  d1
  c2\stopTrillSpan
  r2
}
@end lilypond

Ein Triller-Strekcer, der über einen Zeilenumbruch geht,
beginnt genau über der ersten Note auf der neue Zeile erneut.

@lilypond[ragged-right,verbatim,quote]
\relative {
  d''1\startTrillSpan
  \break
  d1
  c2\stopTrillSpan
  r2
}
@end lilypond

Aufeinanderfolgende Trillerstrecker funktieren ohne einen
@code{\stopTrillSpan}-Befehl, weil ein folgender Strecker
automatisch die rechte Begrenzung des vorhergehenden beendet.

@lilypond[verbatim,quote,relative=2]
d1\startTrillSpan
d1
d1\startTrillSpan
d2\stopTrillSpan
r2
@end lilypond

Triller können auch mit Vorschlägen kombiniert werden.  Die Syntax
für diese Konstruktion und die Methode, um die Position der Vorschläge
präzise zu positionieren, wird gezeigt in @ref{Grace notes}.

@lilypond[verbatim,quote]
\relative {
  d''1~\afterGrace
  d1\startTrillSpan { c32[ d]\stopTrillSpan }
  c2 r2
}
@end lilypond

@cindex Triller mit Tonhöhe

@funindex \pitchedTrill

Triller, die auf einer bestimmten Note ausgeführt werden sollen, können
mit dem Befehl @code{pitchedTrill} notiert werden.  Das erste
Argument ist die Hauptnote, das zweite die Note, auf der getrillert
wird.  Sie wird als Note ohne Hals in Klammern ausgegeben.

@lilypond[verbatim,quote]
\relative {
  \pitchedTrill
  d''2\startTrillSpan fis
  d2
  c2\stopTrillSpan
  r2
}
@end lilypond

@cindex Triller mit Tonhöhe und Versetzungszeichen
@cindex Versetzungszeichen, für Triller

Aufeinanderfolgende Versetzungszeichen der selben Note im selben
Takt müssen selbst hinzugefügt werden.  Nur das Versetzungszeichen
des ersten Trillers mit Tonhöhe innerhalb eines Taktes wird ausgegeben.

@lilypond[verbatim,quote]
\relative {
  \pitchedTrill
  eis''4\startTrillSpan fis
  eis4\stopTrillSpan
  \pitchedTrill
  eis4\startTrillSpan cis
  eis4\stopTrillSpan
  \pitchedTrill
  eis4\startTrillSpan fis
  eis4\stopTrillSpan
  \pitchedTrill
  eis4\startTrillSpan fis!
  eis4\stopTrillSpan
}
@end lilypond

@predefined
@code{\startTrillSpan},
@code{\stopTrillSpan}.
@endpredefined

@morerefs
Glossar:
@rglos{trill}.

Notationsreferenz:
@ref{Articulations and ornamentations},
@ref{Grace notes}.

Schnipsel:
@rlsr{Expressive marks}.

Referenz der Interna:
@rinternals{TrillSpanner}.
