@c -*- coding: utf-8; mode: texinfo; documentlanguage: de -*-
@ignore
    Translation of GIT committish: e5a609e373eae846857f9a6d70a402a3d42b7d94

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes.
@end ignore

@c \version "2.25.22"

@c Translators: Till Paala

@node Rhythms
@section Rhythmus

@lilypondfile[quote]{snippets/rhythms-headword.ly}

Dieser Abschnitt erklärt die Eingabe von Rhythmen, Pausen,
Dauern, Bebalkung und Takten.

@menu
* Writing rhythms::
* Writing rests::
* Displaying rhythms::
* Beams::
* Bars::
* Special rhythmic concerns::
@end menu


@node Writing rhythms
@subsection Rhythmen eingeben

@menu
* Durations::
* Tuplets::
* Scaling durations::
* Ties::
@end menu

@node Durations
@unnumberedsubsubsec Tondauern

@cindex Dauer
@cindex Notenlänge
@cindex Notendauer, Standard
@cindex Standard Notendauer


@funindex \longa
@funindex \breve
@funindex \maxima
@funindex longa
@funindex breve
@funindex maxima

Notenlängen (Dauern) werden durch
Zahlen und Punkte notiert: Dauern werden als reziproke Werte geschrieben.
Zum Beispiel wird eine Viertelnote mit @code{4} notiert (weil sie eine
1/4-Note ist), eine halbe Note mit @code{2} (weil sie eine 1/2-Note ist).
Noten, die länger als eine Ganze sind, müssen mit @code{\longa}
(für die Longa, also vier Ganze) und
@code{\breve} (für die Brevis, auch Doppelganze genannt) notiert werden.
Notendauern bis hin zu 128steln sind unterstützt. Kürzere Notenwerte können
auch notiert werden, können allerdings nur als Noten mit Balken auftreten.

@c Two 64th notes are needed to obtain beams
@lilypond[quote,verbatim]
\relative {
  \time 8/1
  c''\longa c\breve c1 c2
  c4 c8 c16 c32 c64 c128 c128
}
@end lilypond

Hier die selben Notendauern ohne die Balken.

@c not strictly "writing rhythms"; more of a "displaying" thing,
@c but it's ok here.  -gp
@lilypond[quote,verbatim]
\relative {
  \time 8/1
  \autoBeamOff
  c''\longa c\breve c1 c2
  c4 c8 c16 c32 c64 c128 c128
}
@end lilypond

Eine Note mit der vierfachen Dauer einer Brevis kann mit dem
Befehl @code{\maxima} eingegeben werden, aber ihre Darstellung
ist nur für die Alte Musiknotation unterstützt.  Zu Einzelheiten
siehe @ref{Ancient notation}.

@cindex Dauer, Standard
@cindex Standardnotendauer
@cindex Notendauer, Standard

Wenn die Dauer hinter einer Notenbezeichnung nicht angegeben ist,
wird die Dauer der vorhergehenden Note eingesetzt.  Der Standardwert
für die erste Note ist eine Viertel.

@lilypond[quote,verbatim]
\relative { a' a a2 a a4 a a1 a }
@end lilypond

@funindex .

@cindex Punktierung
@cindex Noten, punktiert
@cindex Doppelpunktierung
@cindex Noten, doppelpunktiert

Um punktierte Notendauern zu erhalten, muss einfach nur ein Punkt
(@code{.}) hinter die Zahl der Dauer gesetzt werden.  Zwei Punkte
ergeben eine doppelte Punktierung, usw.

@lilypond[quote,verbatim]
\relative { a'4 b c4. b8 a4. b4.. c8. }
@end lilypond

Manche Notenlängen können nicht mit binären Dauern und Punkten
dargestellt werden, sie können nur erreicht werden, indem man
Noten überbindet.  Für Einzelheiten siehe @ref{Ties}.

Wie den Silben von Gesangstext eigene Dauern zugewiesen werden
können und wie man sie an den Noten ausrichtet ist erklärt in
@ref{Vocal music}.

Optional können Noten streng proportional nach ihrer exakten
Dauer gesetzt werden.  Zu Einzelheiten hierzu und weiteren
Einstellungen für proportionale Notation siehe
@ref{Proportional notation}.

@funindex \dotsUp
@funindex \dotsDown
@funindex \dotsNeutral
@funindex dotsUp
@funindex dotsDown
@funindex dotsNeutral

Punkte werden normalerweise nach oben verschoben, damit sie die Notenlinien
nicht berühren.  Punkte können manuelle über oder unter dem
Notensystem gesetzt werden, zu Einzelheiten
siehe @ref{Direction and placement}.

@predefined
@code{\autoBeamOn},
@code{\autoBeamOff},
@code{\dotsUp},
@code{\dotsDown},
@code{\dotsNeutral}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/alternative-breve-notes.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/changing-the-number-of-augmentation-dots-per-note.ly}

@morerefs
Glossar:
@rglos{breve},
@rglos{longa},
@rglos{maxima},
@rglos{note value},
@rglos{Duration names notes and rests}.

Notationsreferenz:
@ref{Automatic beams},
@ref{Ties},
@ref{Stems},
@ref{Writing rhythms},
@ref{Writing rests},
@ref{Vocal music},
@ref{Ancient notation},
@ref{Proportional notation}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Dots},
@rinternals{DotColumn}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
Es gibt keine grundlegende Grenze für die Dauer von Pausen
(sowohl kürzer als auch länger), aber die Anzahl an Symbolen
ist begrenzt: Einzelne Pausen können von 128stel bis zur
Maxima (8 Ganze) gesetzt werden.


@node Tuplets
@unnumberedsubsubsec Andere rhythmische Aufteilungen

@cindex N-tolen
@cindex Triolen
@cindex Rhythmische Aufteilungen

@funindex \times

Triolen und andere rhythmische Aufteilungen werden aus einem musikalischen
Ausdruck erstellt, indem dessen Tondauern mit einem Bruch multipliziert werden.

@example
\times @var{Bruch} @var{musikalischer Ausdruck}
@end example

@noindent
Die Dauer eines @var{musikalischen Ausdrucks} wird mit dem Bruch multipliziert.
Der Nenner des Bruchs wird über (oder unter) den Noten ausgegeben,
optional mit einer eckigen Klammer, die die Noten einfasst.
Die üblichste Aufteilung ist die
Triole, in welcher drei Noten die Länge von zwei haben, der Wert jeder
einzelnen Note ist also 2/3 der notierten Länge.

@lilypond[quote,verbatim,relative=2]
a2 \tuplet 3/2 { b4 b b }
c4 c \tuplet 3/2 { b4 a g }
@end lilypond

@cindex Triolenklammer, Platzierung

@funindex \tupletUp
@funindex \tupletDown
@funindex \tupletNeutral
@funindex tupletUp
@funindex tupletDown
@funindex tupletNeutral

Triolenklammern können manuell über oder unter dem Notensystem
ausgegeben werden, siehe @ref{Direction and placement}.


N-tolen können ineinander geschachtelt werden:

@lilypond[quote,verbatim]
\relative {
  \autoBeamOff
  c''4 \tuplet 5/4 { f8 e f \tuplet 3/2 { e[ f g] } } f4
}
@end lilypond

Wenn man die Eigenschaften von N-tolen verändern will, die zum
selben musikalischen Zeitpunkt beginnen, muss @code{\tweak}
eingesetzt werden.

Um die Dauern von Noten zu ändern, ohne die N-tolen-Klammern
zu setzen, siehe @ref{Scaling durations}.

@predefined
@code{\tupletUp},
@code{\tupletDown},
@code{\tupletNeutral}.
@endpredefined

@snippets

@cindex N-tole, Formatierung
@cindex Triole, Formatierung
@cindex Formatierung von Triolen

@funindex tupletSpannerDuration
@funindex \tupletSpan

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/entering-several-tuplets-using-only-one--tuplet-command.ly}

@cindex Triolennummer, Änderung

@funindex TupletNumber

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/changing-the-tuplet-number.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/non-default-tuplet-numbers.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/controlling-tuplet-bracket-visibility.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/permitting-line-breaks-within-beamed-tuplets.ly}

@morerefs
Glossar:
@rglos{triplet},
@rglos{tuplet},
@rglos{polymetric}.

Handbuch zum Lernen:
@rlearningnamed{Tweaking methods, Optimierungsmethoden}.

Notationrreferenz:
@ref{Time administration},
@ref{Scaling durations},
@ref{The tweak command},
@ref{Polymetric notation}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{TupletBracket},
@rinternals{TupletNumber},
@rinternals{TimeScaledMusic}.

@cindex Verzierung innerhalb von rhythmischer Kombination
@cindex Stichnoten innerhalb von rhythmischer Kombination
@cindex Verzierung innerhalb von Triole

@knownissues
Verzierungen können innerhalb von Triolenklammern gesetzt werden,
@emph{außer} wenn ein System mit einer Verzierung beginnt, die von
einer N-tole gefolgt wird.  In diesem besonderen Fall müssen die
Verzierungen vor dem @code{\times}-Befehl gesetzt werden, damit sich
keine Fehler ergeben.

@cindex Tempobezeichnungen innerhalb von N-tolen-Klammern

Wenn man eine N-tole zu Beginn eines Stückes notiert, das eine
Tempobezeichnung mit @code{\tempo} enthält, müssen die Noten
in einer explizit begonnenen Stimme notiert werden.  Siehe
auch @rlearningnamed{Voices contain music, Voice enthält Noten}.


@node Scaling durations
@unnumberedsubsubsec Tondauern skalieren

@cindex Dauern skalieren
@cindex Skalieren von Dauern

Die Dauer von einzelnen Noten, Pausen oder Akkorden kann mit einem Bruch multipliziert werden,
indem hinter die Notendauer @qq{*@var{N/M}} (oder @qq{*@var{N}} wenn @var{M} 1 ist)
geschrieben wird.  Die Erscheinung der Noten oder Pausen wird
dadurch nicht beeinflusst, die neue Dauer wird aber dazu
benutzt, ihre Position im Takt zu errechnen und die neue
Dauer in der MIDI-Ausgabe einzusetzen. Die Faktoren, mit
denen multipliziert wird, können auch kombiniert werden, etwa
@qq{*L*M*/N}.  Die Faktoren sind Teil der Dauer: wenn man keine Dauer
für die nächste Note angibt, wird die Dauer der vorigen Note mit allen
Skalierungsfaktoren übernommen.

Im nächsten Beispiel nehmen die drei ersten Noten genau zwei Schläge ein,
aber es wird keine Triolenklammer über ihnen ausgegeben.

@lilypond[quote,verbatim]
\relative {
  \time 2/4
  % Alter durations to triplets
  a'4*2/3 gis a
  % Normal durations
  a4 a
  % Double the duration of chord
  <a d>4*2
  % Duration of quarter, appears like sixteenth
  b16*4 c4
}
@end lilypond

Die Dauer von unsichtbaren Pausen kann auch mit einem Faktor
beeinflusst werden.  Das ist sinnvoll, wenn man viele Takte
überspringen muss, etwa @code{s1*23}.

@cindex Musik komprimieren
@cindex Komprimieren von Noten
@cindex Noten komprimieren
@cindex Noten ausdehnen
@cindex Ausdehnen von Noten
@cindex Dauern skalieren

@funindex \scaleDurations

Längere Notenabschnitte können auf die gleiche Art durch Multiplikation
mit einem Bruch komprimiert werden, als ob jede Note, jeder
Akkord oder jede Pause mit dem Bruch multipliziert würde.
Damit bleibt das Aussehen der Musik unverändert, aber die
interne Dauer der Noten wird mit dem Bruch multipliziert.
Hier ein Beispiel, das zeigt, wie Noten komprimiert und
ausgedehnt werden kann:

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Normal durations
<c a>4 c8 a
% Scale music by *2/3
\scaleDurations 2/3 {
  <c a f>4. c8 a f
}
% Scale music by *2
\scaleDurations 1/2 {
  <c' a>4 c8 b
}
@end lilypond

Eine Anwendung für diesen Befehl ist polymetrische Notation,
siehe @ref{Polymetric notation}.

@morerefs
Notationsreferenz:
@ref{Tuplets},
@ref{Invisible rests},
@ref{Polymetric notation}.

Schnipsel:
@rlsr{Rhythms}.


@node Ties
@unnumberedsubsubsec Bindebögen

@cindex Bindebogen
@cindex @"Uberbindung

@funindex ~

Ein Bindebogen verbindet zwei benachbarte Noten der selben
Tonhöhe.  Als Resultat wird die Dauer der Notenlänge verlängert.

@warning{Bindebögen (engl. tie) dürfen nicht mit Legatobögen
(engl. slur) verwechselt werden, durch
die die Vortragsart bezeichnet wird, noch mit Phrasierungsbögen
(engl. phrasing slur),
die musikalische Phrasen anzeigen.  Ein Bindebogen ist nur eine
Art, die Tondauer zu verlängern, ähnlich etwa wie die
Punktierung.}

Ein Bindebogen wird mit der
Tilde @code{~} (AltGr++) notiert.

@lilypond[quote,verbatim,relative=2]
a2 ~ 2
@end lilypond

Bindebögen werden eingesetzt, wenn die Note entweder über eine
Taktlinie hinüberreicht, oder wenn die entsprechende Dauer der
Note nicht mit Punktierung erreicht werden kann.  Bindebögen
sollten auch benutzt werden, wenn Notenwerte über die
inneren Unterteilungen von Takten hinüberreichen:

@lilypond[quote]
\relative {
  r8 c'8 ~ 2 r4 |
  r8^"not" c2 ~ 8 r4
}
@end lilypond

Wenn viele Noten über Taktlinien gebunden werden müssen, kann
es einfacher sein, automatische Notenaufteilung einzustellen,
wie beschrieben in @ref{Automatic note splitting}.
Mit diesem Mechanismus werden lange Noten
automatisch aufgeteilt, wenn sie über Taktgrenzen reichen.

@cindex Bindebögen und Akkorde
@cindex @"Uberbindungen und Akkorde
@cindex Akkorde und Überbindungen

Wenn ein Bindebogen an einen Akkord gehängt wird, werden alle Noten
dieses Akkordes übergebunden.  Wenn kein Notenkopf passt, wird auch
kein Bogen erzeugt.  Noten in Akkorden können auch einzeln übergebunden
werden, indem sie innerhalb des Akkordes hinter die entsprechende Note
geschrieben werden.

@lilypond[quote,verbatim,relative=1]
<c e g> ~ <c e g>
<c~ e g~ b> <c e g b>
@end lilypond

@cindex Bindebögen wiederholen
@cindex Wiederholung und Bindebögen
@cindex @"Uberbindung und Wiederholungen
@cindex Volta-Klammern und Wiederholungen
@cindex Volta und Überbindung

@funindex \repeatTie

Wenn die zweite Variante einer Wiederholung mit einer übergebundenen
Note anfängt, muss der Bindebogen wie folgt notiert werden:

@lilypond[quote,relative=2,verbatim]
\repeat volta 2 { c g <c e>2 ~ }
\alternative {
  % First alternative: following note is tied normally
  { <c e>2. r4 }
  % Second alternative: following note has a repeated tie
  { <c e>2\repeatTie d4 c } }
@end lilypond

@cindex Laissez vibrer
@cindex Ausklingen lassen, Bögen
@cindex Bögen, laissez vibrer
@cindex Ausklingen lassen

@funindex \laissezVibrer

So genannte @notation{laissez vibrer}-Bögen werden verwendet um anzuzeigen, dass
man die Musik ausklingen lassen soll. Sie werden in der Klavier-, Harfen-,
anderer Saiteninstrument- und Schlagzeugnotation verwendet. Sie können folgendermaßen notiert werden:

@lilypond[quote,verbatim,fragment]
<c' f' g'>1\laissezVibrer
@end lilypond

@cindex ties, placement

@funindex \tieUp
@funindex \tieDown
@funindex \tieNeutral
@funindex tieUp
@funindex tieDown
@funindex tieNeutral

Bindebögen können manuell über oder unter dem Notensystem
gesetzt werden.  Zu Einzelheiten siehe @ref{Direction and placement}.

@cindex Bindebögen, Aussehen
@cindex Bindebögen, gestrichelt
@cindex Bindebögen, gepunktet
@cindex Bindebögen, durchgehend

@funindex \tieDotted
@funindex \tieDashed
@funindex \tieSolid
@funindex tieDotted
@funindex tieDashed
@funindex tieSolid

Bindebögen können durchgehend, gestrichelt, gepunktet oder in einer Kombination
von Strichen und durchgehender Linie definiert werden.

@lilypond[quote, verbatim, relative=1]
\tieDotted
c2 ~ 2
\tieDashed
c2 ~ 2
\tieHalfDashed
c2 ~ 2
\tieHalfSolid
c2 ~ 2
\tieSolid
c2 ~ 2
@end lilypond

Eigene Strichelungsmuster können definiert werden:

@lilypond[quote, verbatim, relative=1]
\tieDashPattern #0.3 #0.75
c2 ~ 2
\tieDashPattern #0.7 #1.5
c2 ~ 2
\tieSolid
c2 ~ 2
@end lilypond

Die Definition von Muster für die Strichelung der Bindebögen hat
die gleiche Struktur wie die Definition für Legatobögen.  Zu
weiterer Information zu komplizierten Strichelungsmustern, siehe
die Schnipsel im Abschnitt @ref{Slurs}.

Durch Veränderung der Eigenschaften @var{whiteout} (weiß malen) und
@var{layer} (Ebene) kann verhindert werden, dass Bindebögen mit anderen
Objekten im Notensystem zusammenstoßen.

@lilypond[verbatim,quote,ragged-right]
\relative {
  \override Tie.layer = #-2
  \override Staff.TimeSignature.layer = #-1
  \override Staff.KeySignature.layer = #-1
  \override Staff.TimeSignature.whiteout = ##t
  \override Staff.KeySignature.whiteout = ##t
  b'2 b~
  \time 3/4
  \key a \major
  b r4
}
@end lilypond

@predefined
@code{\tieUp},
@code{\tieDown},
@code{\tieNeutral},
@code{\tieDotted},
@code{\tieDashed},
@code{\tieDashPattern},
@code{\tieHalfDashed},
@code{\tieHalfSolid},
@code{\tieSolid}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/using-ties-with-arpeggios.ly}

@anchor{Bindebögen von Hand setzen}
@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/engraving-ties-manually.ly}

@morerefs
Glossar:
@rglos{tie},
@rglos{laissez vibrer}.

Notationsreferenz:
@ref{Slurs},
@ref{Automatic note splitting}.

Schnipsel:
@rlsr{Expressive marks},
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{LaissezVibrerTie},
@rinternals{LaissezVibrerTieColumn},
@rinternals{TieColumn},
@rinternals{Tie}.

@knownissues
Der Wechsel zwischen Systemen bei aktiver Überbindung produziert keinen
gekrümmten Bogen.

Änderung von Schlüssel oder Oktavierung zwischen übergebundenen Noten
ist nicht richtig definiert. In diesen Fällen kann es besser sein, einen
Legatobogen zu verwenden.


@node Writing rests
@subsection Pausen eingeben

Pausen werden als Teil der musikalischen Ausdrücke zusammen mit
den Noten notiert.

@menu
* Rests::
* Invisible rests::
* Full measure rests::
@end menu

@node Rests
@unnumberedsubsubsec Pausen

@cindex Pausen
@cindex Pausendauern
@cindex Maxima-Pause
@cindex Longa-Pause
@cindex Brevis-Pause

@funindex \rest
@funindex r
@funindex \maxima
@funindex \longa
@funindex \breve
@funindex rest
@funindex maxima
@funindex longa
@funindex breve

Pausen werden wie Noten eingegeben, ihre Bezeichnung ist @code{r}.
Dauern, die länger als eine Ganze sind, haben die
vordefinierten Befehle:

@c \time 16/1 is used to avoid spurious bar lines
@c and long tracts of empty measures
@lilypond[quote,verbatim]
\new Staff {
  % These two lines are just to prettify this example
  \time 16/1
  \omit Staff.TimeSignature
  % Print a maxima rest, equal to four breves
  r\maxima
  % Print a longa rest, equal to two breves
  r\longa
  % Print a breve rest
  r\breve
  r1 r2 r4 r8 r16 r32 r64 r128
}
@end lilypond

@cindex Pausen, mehrtaktig
@cindex Pausen, ganztaktig
@cindex Ganztaktpausen
@cindex Mehrtaktpausen

Pausen, die ganze Takte ausfüllen und in der Taktmitte zentriert
werden sollen, müssen als mehrtaktige Pausen eingegeben werden.
Sie können sowohl für einen einzigen Takt als auch für mehrere
Takte verwendet werden, Näheres im Abschnitt
@ref{Full measure rests}.

@cindex Pausen, vertikale Position festlegen

Um die vertikale Position einer Pause explizit festzulegen,
kann eine Note eingegeben werden, gefolgt vom Befehl @code{\rest}.
Die Pause wird dann an die Stelle gesetzt, wo sich sonst die
Note befinden würde.  Damit wird die manuelle Formatierung von mehrstimmiger Musik
sehr viel einfacher, da die Formatierungsfunktion zur automatischen
Auflösung von Zusammenstößen diese Pausen nicht mit einbezieht.

@lilypond[quote,verbatim]
\relative { a'4\rest d4\rest }
@end lilypond

@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/rest-styles.ly}

@morerefs
Glossar:
@rglos{breve},
@rglos{longa},
@rglos{maxima}.

Notationsreferenz:
@ref{Full measure rests}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Rest}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
Es gibt keine grundlegende Grenze für die Dauer von Pausen (sowohl
kürzer als auch länger), aber die Anzahl von Symbolen ist
begrenzt: Es gibt Zeichen für Pausen von einer 128 bis zu einer
Maxima (8 Ganze).


@node Invisible rests
@unnumberedsubsubsec Unsichtbare Pausen

@cindex Skip
@cindex @"Uberspringen von Zeichen
@cindex Unsichtbare Pausen
@cindex Pausen, unsichtbar
@cindex Platzhalternoten

@funindex \skip
@funindex s

Eine unsichtbare Pause (auch als @qq{skip} oder Überspringung bezeichnet)
kann wie eine Note eingegeben werden, die Notationsbezeichnung ist @code{s}.

@lilypond[quote,verbatim,relative=2]
a4 a4 s4 a4 \skip 1 a4
@end lilypond

@cindex Gesangstext, Note überspringen

Die @code{s}-Syntax steht nur im Noten- oder Akkordmodus zur Verfügung. In
anderen Situationen, z. B. innerhalb eines Liedtextes, muss
der Befehl @code{\skip} benutzt werden.  @code{\skip} benötigt eine
explizite Dauerangabe.

@lilypond[quote,verbatim]
<<
  {
    a'2 \skip2 a'2 a'2
  }
  \new Lyrics {
    \lyricmode {
      foo2 \skip 1 bla2
    }
  }
>>
@end lilypond

Weil @code{\skip} ein Befehl ist, wirkt er sich nicht auf die Dauer
der folgenden Noten aus, anders als@tie{}@code{s}.

@lilypond[quote,verbatim]
<<
  {
    \repeat unfold 8 { a'4 }
  }
  {
    a'4 \skip 2 a' |
    s2 a'
  }
>>
@end lilypond

Die Platzhalterpause mit @code{s} erstellt @code{Staff}- und
@code{Voice}-Kontext, wenn es erforderlich ist, genauso wie Noten und Pausen.

@lilypond[quote,verbatim]
{ s1 s s }
@end lilypond

Der Überspringungsbefehl (@code{\skip}) ist einfach ein leerer Platzhalter.
Durch ihn wird überhaupt nichts gesetzt, auch keine transparenten Objekte.

@lilypond[quote,verbatim]
% This is valid input, but does nothing
{ \skip 1 \skip1 \skip 1 }
@end lilypond

@morerefs
Handbuch zum lernen:
@rlearningnamed{Visibility and color of objects, Sichtbarkeit und Farbe von Objekten}.

Notationsreferenz:
@ref{Hidden notes},
@ref{Visibility of objects}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{SkipMusic}



@node Full measure rests
@unnumberedsubsubsec Ganztaktpausen

@cindex Ganztaktpausen
@cindex Mehrtaktpausen
@cindex Pausen, Ganztakt-
@cindex Pausen, Mehrtakt-

@funindex R

Pausen für einen oder mehrere ganze Takte werden wie
Noten eingegeben, wobei die Bezeichnung ein Großbuchstabe
@code{R} ist:

@lilypond[quote,verbatim,relative=2]
% Rest measures contracted to single measure
\compressEmptyMeasures
R1*4
R1*24
R1*4
b2^"Tutti" b4 a4
@end lilypond

Die Dauer von Ganztaktpausen wird genauso angegeben wie die
Dauer von Noten.  Die Dauer einer Ganztaktpause muss immer
eine ganze Anzahl an Taktlängen sein, weshalb Punktierungen
und Brüche recht häufig eingesetzt werden müssen.

@lilypond[quote,relative=2,verbatim]
\compressEmptyMeasures
\time 2/4
R1 | R2 |
\time 3/4
R2. | R2.*2 |
\time 13/8
R1*13/8 | R1*13/8*12 |
\time 10/8
R4*5*4 |
@end lilypond

Eine Ganztaktpause wird abhängig von der Taktart entweder als
Ganze oder Brevis-Pause gesetzt, zentriert im Takt.

@lilypond[quote,verbatim,fragment]
\time 4/4
R1 |
\time 6/4
R1*3/2 |
\time 8/4
R1*2 |
@end lilypond

@cindex Mehrtaktpausen, ausschreiben
@cindex Pausen, mehrere Takte ausschreiben
@cindex Pausen, mehrere Takte komprimieren
@cindex Mehrtaktpausen, komprimieren

@funindex \expandEmptyMeasures
@funindex \compressEmptyMeasures

In den Standardeinstellungen werden mehrtaktige Pausen
ausgeschrieben gesetzt, sodass sie die entsprechende Anzahl von
Takten einnehmen.  Alternativ kann die mehrtaktige Pause
aber auch nur in einem Takt angezeigt werden, der ein
Mehrtaktpausensymbol beinhaltet, wobei die Anzahl der Takte
der Pausendauer über dem Pausenzeichen ausgegeben wird:

@lilypond[quote,relative=2,verbatim]
% Default behavior
\time 3/4 r2. | R2.*2 |
\time 2/4 R2 |
\time 4/4
% Rest measures contracted to single measure
\compressEmptyMeasures
r1 | R1*17 | R1*4 |
% Rest measures expanded
\expandEmptyMeasures
\time 3/4
R2.*2 |
@end lilypond


@cindex Text über Mehrtaktpausen
@cindex Mehrtaktpausen, Text hinzufügen
@cindex Beschriftung über Mehrtaktpausen
@cindex Mehrtaktpausen, Beschriftung
@cindex Fermate über Mehrtaktpausen
@cindex Mehrtaktpause mit Fermate

@funindex MultiMeasureRestScript
@funindex MultiMeasureRestText

Textbeschriftung kann Mehrtaktpausen mit @code{\markup}
hinzugefügt werden.

@lilypond[quote,verbatim,relative=2]
\compressEmptyMeasures
\time 3/4
R2.*10^\markup { \italic "ad lib." }
@end lilypond

@warning{Beschriftungen und Artikulationen, die an Mehrtaktpausen gehängt
werden, sind Objekte vom Typ @code{MultiMeasureRestText} bzw.
@code{MultiMeasureRestScript}, nicht vom Typ @code{TextScript}
bzw. @code{Script}.  Änderungen etwa mit @code{@bs{}override}
müssen auf das richtige Objekt gerichtet werden, damit sie
nicht ignoriert werden.  Siehe auch das folgende Beispiel.
}

@lilypond[quote,verbatim,fragment]
% Dies hat keine Auswirkungen wegen der falschen Objektnamen
\override TextScript.padding = #5
\override Script.color = #blue
R1^"falsch"
R1\fermata
% Dies sind die richtigen Objektnamen
\override MultiMeasureRestText.padding = #5
\override MultiMeasureRestScript.color = #blue
R1^"richtig"
R1\fermata
@end lilypond

Wenn eine Mehrtaktpause direkt auf einen Auftakt mit @code{\partial}
folgt, werden möglicherweise daraus resultierende
Taktprüfungswarnungen nicht angezeigt.

@predefined
@funindex \textLengthOn
@funindex \textLengthOff
@funindex \compressEmptyMeasures
@funindex \expandEmptyMeasures

@code{\textLengthOn},
@code{\textLengthOff},
@code{\compressEmptyMeasures},
@code{\expandEmptyMeasures}.
@endpredefined

@snippets

@cindex Kirchenpausen
@cindex Pausen, Kirchenstil
@cindex Balkenpausen, mehrtaktig

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/changing-form-of-multi-measure-rests.ly}

@cindex Mehrtaktpausen, Positionierung
@cindex Position von Mehrtaktpausen

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/positioning-multi-measure-rests.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/multi-measure-rest-markup.ly}

@morerefs
Glossar:
@rglos{multi-measure rest}.

Notationsreferenz:
@ref{Durations},
@ref{Text},
@ref{Formatting text},
@ref{Text scripts}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{MultiMeasureRest},
@rinternals{MultiMeasureRestNumber},
@rinternals{MultiMeasureRestScript},
@rinternals{MultiMeasureRestText}.

@cindex Fingersatz und Mehrtaktpausen
@cindex Mehrtaktpausen und Fingersatz
@cindex Ganztaktpausen und Fingersatz

@knownissues
Wenn man versucht, mit Fingersatz (etwa @code{R1*10-4} Zahlen
über Ganztaktpausen zu setzen, kann die Zahl des Fingersatzes
(4) mit der Taktanzahl (10) zusammenstoßen.

@cindex Zusammenfalten von Pausen
@cindex Pausen, Zusammenfalten

Es gibt keine Möglichkeit, normale Pausen automatisch zu
Ganztaktpausen zu reduzieren.

@cindex Pausen, Zusammenstöße

Ganztaktpausen werden bei der Vermeidung von Zusammenstößen nicht
berücksichtigt.


@node Displaying rhythms
@subsection Rhythmen anzeigen lassen

@menu
* Time signature::
* Metronome marks::
* Upbeats::
* Unmetered music::
* Polymetric notation::
* Automatic note splitting::
* Showing melody rhythms::
@end menu

@node Time signature
@unnumberedsubsubsec Taktangabe

@cindex Taktangabe
@cindex Metrum

@funindex \time

Taktangaben werden wie folgt erstellt.

@lilypond[quote,verbatim,relative=2]
\time 2/4 c'2
\time 3/4 c'2.
@end lilypond

@cindex Taktangabe, Sichtbarkeit

Taktangaben werden zu Beginn eines Stückes gesetzt und immer dann,
wenn sich die Taktart ändert.  Wenn eine Änderung am Ende einer
Zeile geschieht, wird eine warnende Taktangabe am Ende der Zeile
ausgegeben.  Dieses Verhalten kann verändert werden, siehe
@ref{Visibility of objects}.

@lilypond[quote,verbatim]
\relative c'' {
  \time 2/4
  c2 c
  \break
  c c
  \break
  \time 4/4
  c c c c
}
@end lilypond

@funindex \numericTimeSignature
@funindex \defaultTimeSignature
@funindex numericTimeSignature
@funindex defaultTimeSignature

@cindex Stil von Taktangaben
@cindex Taktangaben-Stile

Das Symbol für die Taktarten 2/2 und 4/4 kann in ein Zahlensymbol
umgewandelt werden:

@lilypond[quote,verbatim]
\relative c'' {
  % Default style
  \time 4/4 c1
  \time 2/2 c1
  % Change to numeric style
  \numericTimeSignature
  \time 4/4 c1
  \time 2/2 c1
  % Revert to default style
  \defaultTimeSignature
  \time 4/4 c1
  \time 2/2 c1
}
@end lilypond

Symbole für Modus und Proprietas der mensuralen Notation
werden behandelt unter @ref{Mensural time signatures}.

@cindex Taktart, Standardeinstellung
@cindex Standardtakteinstellungen
@cindex Bebalkung, Taktartstandard
@cindex Balken, Taktartstandard

@funindex \overrideTimeSignatureSettings

Zusätzlich zu der gedruckten Taktart werden mit der Definition des
Befehls @code{\time} auch die Standardwerte fürt die Eigenschaften
@code{baseMoment}, @code{beatStructure} und @code{beamExtensions}
gesetzt.  Die vordefinierten Standardwerte für diese Eigenschaften
finden sich in @file{scm/time-signature-settings.scm}.  Die existierenden
Standardwerte können verändert oder neue Standardwerte hinzugefügt
werden.

@lilypond[quote,verbatim]
\score {
  \new Staff {
    \relative c' {
      \overrideTimeSignatureSettings
        4/4        % timeSignatureFraction
        #1/4       % beatBase
        3,1        % beatStructure
        #'()       % beamExceptions
      \time 4/4
      \repeat unfold 8 { c8 } |
    }
  }
}
@end lilypond

@code{\overrideTimeSignatureSettings} braucht fünf Argumente:

@enumerate

@item
@code{@var{timeSignatureFraction}} (Taktart-Bruch), ein Bruch,
der den Takt beschreibt.

@item
@code{@var{beatBase}} (Grundmoment-Bruch), ein Bruch, der
den Zähler und Nenner der Grundschlageinheit der Taktart enhält.

@item
@code{@var{beatStructure}} (Taktzeit-Struktur), eine Scheme-Liste, die
die Struktur der Taktschläge anzeigt, in Einheiten des Grundmoments.

@item
@code{@var{beamExceptions}} (Balken-Ausnahmen), eine Aliste, die alle
Bebalkungsregeln für die Taktart enthält, außer dem Balken, der zum Taktende
endet, wie beschrieben in @ref{Setting automatic beam behavior}.
@end enumerate

Der Kontext, der @code{\overrideTimeSignatureSettings} enthält, muss
begonnen sein, bevor @code{\overrideTimeSignatureSettings} aufgerufen
wird.  Das heißt, dass er entweder explizit begonnen wird oder sich
Noten in dem Kontext befinen müssen, bevor
@code{\overrideTimeSignatureSettings} aufgerufen wird:

@lilypond[quote,verbatim]
\score {
  \relative c' {
    % This call will fail because the context isn't yet instantiated
    \overrideTimeSignatureSettings
      4/4        % timeSignatureFraction
      #1/4       % beatBase
      3,1        % beatStructure
      #'()       % beamExceptions
    \time 4/4
    c8^\markup {"Beamed (2 2)"}
    \repeat unfold 7 { c8 } |
    % This call will succeed
    \overrideTimeSignatureSettings
      4/4        % timeSignatureFraction
      #1/4       % beatBase
      3,1        % beatStructure
      #'()       % beamExceptions
    \time 4/4
    c8^\markup {"Beamed (3 1)"}
    \repeat unfold 7 { c8 } |
  }
}
@end lilypond

@cindex Taktart, Standardeigenschaften wiederherstellen
@cindex Wiederherstellen von Taktart-Standardeigenschaften
@cindex Zurücksetzen von Taktart-Standardeigenschaften

@funindex \revertTimeSignatureSettings

Veränderte Werte der Taktart-Eigenschaften können wieder auf den
Standard zurückgesetzt werden:

@lilypond[quote,verbatim]
\score{
  \relative {
    \repeat unfold 8 { c'8 } |
    \overrideTimeSignatureSettings
      4/4        % timeSignatureFraction
      #1/4       % beatBase
      3,1        % beatStructure
      #'()       % beamExceptions
    \time 4/4
    \repeat unfold 8 { c8 } |
    \revertTimeSignatureSettings 4/4
    \time 4/4
    \repeat unfold 8 { c8 } |
  }
}
@end lilypond

Unterschiedliche Werte der Standard-Taktarteigenschaften für unterschiedliche
Notensysteme können eingerichtet werden, indem man den
@code{Timing_translator} und den @code{Default_bar_line_engraver} aus dem
@code{Score}-Kontext in den @code{Staff}-Kontext verschiebt.

@lilypond[quote, verbatim]
\score {
  \new StaffGroup <<
     \new Staff {
        \overrideTimeSignatureSettings
          4/4        % timeSignatureFraction
          #1/4       % beatBase
          3,1        % beatStructure
          #'()       % beamExceptions
        \time 4/4
        \repeat unfold 8 {c''8}
     }
     \new Staff {
        \overrideTimeSignatureSettings
          4/4        % timeSignatureFraction
          #1/4       % beatBase
          1,3        % beatStructure
          #'()       % beamExceptions
        \time 4/4
        \repeat unfold 8 {c''8}
     }
  >>
  \layout {
    \context {
      \Score
      \remove Timing_translator
    }
    \context {
      \Staff
      \consists Timing_translator
    }
  }
}
@end lilypond

@predefined
@code{\numericTimeSignature},
@code{\defaultTimeSignature}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/time-signature-printing-only-the-numerator-as-a-number-instead-of-the-fraction.ly}


@morerefs
Glossar:
@rglos{time signature}

Notationsreferenz:
@ref{Mensural time signatures},
@ref{Time administration}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{TimeSignature},
@rinternals{Timing_translator}.


@node Metronome marks
@unnumberedsubsubsec Metronomangabe

@cindex Tempo
@cindex Metronombezeichnung
@cindex Tempobezeichnung
@cindex Aufführungsanweisung: Tempo

@funindex \tempo

Eine Metronomanweisung wird wie folgt erstellt:

@lilypond[verbatim,quote]
\relative {
  \tempo 4 = 120
  c'2 d
  e4. d8 c2
}
@end lilypond

Metronombezeichnungen können auch für einen Zahlenbereich notiert werden:

@lilypond[verbatim,quote]
\relative {
  \tempo 4 = 40 - 46
  c'4. e8 a4 g
  b,2 d4 r
}
@end lilypond

Anstelle dessen kann auch Text als Argument angegeben werden:

@lilypond[verbatim,quote]
\relative {
  \tempo "Allegretto"
    c''4 e d c
    b4. a16 b c4 r4
}
@end lilypond

Wenn eine Metronombezeichnung und Text kombiniert wird, wird
die Metronombezeichnung automatisch in Klammern gesetzt:

@lilypond[verbatim,quote]
\relative {
  \tempo "Allegro" 4 = 160
  g'4 c d e
  d4 b g2
}
@end lilypond

Der Text kann ein beliebiges Textbeschriftungsobjekt sein:

@lilypond[verbatim,quote]
\relative {
  \tempo \markup { \italic Faster } 4 = 132
  a'8-. r8 b-. r gis-. r a-. r
}
@end lilypond

Eine Metronombezeichnung in Klammern ohne Text kann erstellt
werden, indem eine leere Zeichenkette hinzugefügt wird:

@lilypond[verbatim,quote]
\relative {
  \tempo "" 8 = 96
  d''4 g e c
}
@end lilypond


@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/printing-metronome-and-rehearsal-marks-below-the-staff.ly}

@c perhaps also an example of how to move it horizontally?

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/changing-the-tempo-without-a-metronome-mark.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/creating-metronome-marks-in-markup-mode.ly}

Zu Einzelheiten siehe @ref{Formatting text}.

@morerefs
Glossar:
@rglos{metronome},
@rglos{metronomic indication},
@rglos{tempo indication},
@rglos{metronome mark}.

Notationsreferenz:
@ref{Formatting text},
@ref{MIDI output}.

Schnipsel:
@rlsr{Staff notation}.

Referenz der Interna:
@rinternals{MetronomeMark}.


@node Upbeats
@unnumberedsubsubsec Auftakte

@cindex Auftakt
@cindex Takte verkürzen
@cindex partieller Takt
@cindex halber Takt
@cindex Teiltakt

@funindex measurePosition
@funindex \partial

Verkleinerte Takte, wie etwa ein Auftakt, werden mit dem
Befehl @code{\partial} notiert, dessen Syntax lautet:

@example
\partial @var{Dauer}
@end example

@noindent
wobei @code{@var{Dauer}} die Länger der Noten darstellt,
bevor der nächste vollständige Takt beginnt:

@lilypond[quote,verbatim,relative=1]
\time 3/4
\partial 8
e8 | a4 c8 b c4 |
@end lilypond

Die @var{Dauer} kan ein beliebiger Wert kleiner als der vollständige
Takt sein.

@lilypond[quote,verbatim]
\relative {
  \time 3/4
  \partial 4.
  r4 e'8 | a4 c8 b c4 |
}
@end lilypond

@code{\partial @var{Dauer}} kann auch folgendermaßen geschrieben werden:

@example
\set Timing.measurePosition -@var{Länge der Dauer}
@end example

So wird etwa aus @code{\partial 8}:

@lilypond[quote,verbatim,relative=1]
\time 3/4
\set Timing.measurePosition = #(ly:make-moment -1/8)
e8 | a4 c8 b c4 |
@end lilypond

Die Eigenschaft @code{measurePosition} (Takt-Position) enthält
eine rationale Zahl,
die anzeigt, wie groß der Abstand zum Taktanfang ist. Deshalb ist
sie eine negative Zahl; @code{\partial 4} wird also intern übersetzt
zu @w{@code{-4}} was soviel bedeutet wie:
@qq{Eine Viertel bleibt übrig vom ganzen Takt.}

@morerefs
Glossar:
@rglos{anacrusis}.

Notationsreferenz:
@ref{Grace notes}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Timing_translator}.

@cindex Kadenz und Zeilenumbruch
@cindex Kadenz und Seitenumbruch
@cindex Musik ohne Metrum, Umbrüche
@cindex nicht metrische Musik, Umbrüche
@cindex Umbrüche in nicht metrischer Musik
@cindex Umbrüche in Kadenzen
@cindex Zeilenumbrüche in Kadenzen
@cindex Seitenumbrüche in Kadenzen
@cindex Zeilenumbrüche in nicht metrischer Musik
@cindex Seitenumbrüche in nicht metrischer Musik

@knownissues
@code{\partial} ist nur für den Anfang eines Stückes vorgesehen. Wenn der
Befehl nach dem Anfang verwendet wird, können Warnungen oder Probleme
auftreten.  In solchem Fall sollten Sie @code{\set Timing.measurePosition}
benutzen.

@lilypond[quote,verbatim,relative=1]
\time 6/8
\partial 8
e8 | a4 c8 b[ c b] |
\set Timing.measurePosition = #(ly:make-moment -1/4)
r8 e,8 | a4 c8 b[ c b] |
@end lilypond


@node Unmetered music
@unnumberedsubsubsec Musik ohne Metrum

@cindex Kadenz
@cindex Bebalkung in Kadenzen
@cindex Bebalken in taktloser Musik
@cindex Kadenzen, Bebalkung
@cindex Balken in Kadenzen
@cindex Taktlose Musik, Bebalkung
@cindex Noten ohne Takt
@cindex Taktart, Noten ohne
@cindex Metrum, Noten ohne

@funindex \cadenzaOn
@funindex \cadenzaOff
@funindex cadenzaOn
@funindex cadenzaOff

In Musik mit Metrum werden Taktstriche automatisch eingefügt und Taktzahlen
automatisch berechnet.  In Musik ohne Metrum hingegen (etwa Kadenzen) ist
das nicht gewollt und kann @qq{ausgeschaltet} werden mit dem Befehl
@code{\cadenzaOn}, um dann wieder zum normalen Verhalten mit
@code{\cadenzaOff} zurückzukehren.

@lilypond[verbatim,quote]
\relative c'' {
  c4 d e d
  \cadenzaOn
  c4 c d8[ d d] f4 g4.
  \cadenzaOff
  \bar "|"
  d4 e d c
}
@end lilypond

Taktnummerierung wird am Ende der Kadenz wieder aufgenommen:

@lilypond[verbatim,relative=2,fragment]
% Show all bar numbers
\override Score.BarNumber.break-visibility = #all-visible
c4 d e d
\cadenzaOn
c4 c d8[ d d] f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

Ein neuer Takt wird nie innerhalb der Kadenz begonnen, auch wenn einer
oder mehrere @code{\bar}-Befehle eingefügt ewrden.  Darum müssen auch
Erinnerungsversetzungszeichen manuell eingefügt werden.  Siehe
@ref{Accidentals}.

@lilypond[verbatim,relative=2,quote]
c4 d e d
\cadenzaOn
cis4 d cis d
\bar "|"
cis4 d cis! d
\cadenzaOff
\bar "|"
@end lilypond

Automatische Bebalkung wird durch @code{\cadenzeOn} ausgestellt.  Darum müssen
alle Balken in Kadenzen manuell eingegeben werden (siehe @ref{Manual beams}).

@lilypond[verbatim,quote]
\relative {
  \repeat unfold 8 { c''8 }
  \cadenzaOn
  cis8 c c c c
  \bar"|"
  c8 c c
  \cadenzaOff
  \repeat unfold 8 { c8 }
}
@end lilypond

Diese vordefinierten Befehle wirken sich auf alle Systeme in der
Partitur aus, auch wenn sie nur in einer einzigen Stimme notiert werden.
Um dieses Verhalten zu ändern, müsen Sie @code{Timing_translator}
aus dem @code{Score}-Kontext in den @code{Staff}-Kontext verschieben,
wie gezeigt in @ref{Polymetric notation}.

@predefined
@code{\cadenzaOn},
@code{\cadenzaOff}.
@endpredefined

@morerefs
Glossar:
@rglos{cadenza}.

Notationsreferenz:
@ref{Visibility of objects},
@ref{Polymetric notation},
@ref{Manual beams},
@ref{Accidentals}.

Schnipsel:
@rlsr{Rhythms}.

@cindex Kadenz und Zeilenumbrüche
@cindex Musik ohne Metrum, Zeilenumbrüche
@cindex Zeilenumbrüche in Musik ohne Metrum
@cindex Zeilenumbrüche in Kadenzen
@cindex Seitenumbrüche in Musik ohne Metrum
@cindex Seitenumbrüche in Kadenzen
@cindex Kadenz und Seitenumbrüche
@cindex Musik ohne Metrum, Seitenumbrüche

@knownissues

Automatische Zeilen- und Seitenumbrüche werden nur an Taktstrichen
vorgenommen, sodass @qq{unsichtbare} Taktstriche manuell eingefügt
werden müssen, damit Umbrüche erlaubt werden:

@example
\bar ""
@end example

Man muss explizit einen @code{Voice}-Kontext erstellen, wenn
man ein Stück mit @code{cadenzaOn} beginnen will, weil sonst
ein seltsamer Fehler auftreten kann.

@example
\new Voice @{
  \relative c' @{
    \cadenzaOn
    c16[^"Solo Free Time" d e f] g2.
    \bar "||"
    \cadenzaOff
  @}
@}
@end example


@node Polymetric notation
@unnumberedsubsubsec Polymetrische Notation

@cindex doppelte Taktartensymbole
@cindex Taktartensymbole, doppelt
@cindex Taktartensymbole, unterteilt
@cindex Taktarten, polymetrisch
@cindex polymetrische Taktarten
@cindex Metrum, polymetrisch
@cindex unterteilte Taktarten

@funindex timeSignatureFraction
@funindex \scaleDurations
@funindex \times

Polymetrische Notation ist direkt unterstützt, oder
indem man das sichtbare Taktart-Symbol verändert und zusätzlich
die Notendauern skaliert.

@subsubheading Unterschiedliche Taktarten mit gleicher Taktlänge

Für jedes System wird eine gemeinsame Taktart gesetzt und dann
die Einstellung von @code{timeSignatureFraction} auf den gewünschten
Bruch geändert.  Mit dem Befehl @code{\scaleDurations} werden
die Dauern der Noten auf jedem System dann auf die gemeinsame
Taktart skaliert.  Siehe auch @ref{Scaling durations}.

@cindex Bebalkung in polymetrischer Notation
@cindex Polymetrische Notation und Balken
@cindex Balken in polymetrischer Notation

In folgendem Beispiel werden Noten mit den Taktarten 3/4, 9/8 und
10/8 parallel notiert.  Im zweiten System werden die gezeigten
Dauern mit 2/3 multipliziert, da 2/3 x 9/8 = 3/4, und im dritten
System werden die gezeigten Dauern mit 3/5 multipliziert, da
3/5 x 10/8 = 3/4.  Oft wird es nötig sein, Balken manuell zu setzen,
weil die Skalierung sich auch auf die automatische Bebalkung
auswirkt.

@lilypond[quote,verbatim]
\relative <<
  \new Staff {
    \time 3/4
    c'4 c c |
    c4 c c |
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = 9/8
    \scaleDurations 2/3 {
      \repeat unfold 3 { c8[ c c] }
      \repeat unfold 3 { c4 c8 }
    }
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = 10/8
    \scaleDurations 3/5 {
      \repeat unfold 2 { c8[ c c] }
      \repeat unfold 2 { c8[ c] } |
      c4. c4. \tuplet 3/2 { c8[ c c] } c4
    }
  }
>>
@end lilypond

@subsubheading Unterschiedlichen Taktarten mit unterschiedlicher
Taktlänge

Jedes System kann auch eine eigene unabhängige Taktart erhalten.
Dazu muss der @code{Timing_translator} und der
@code{Default_bar_line_engraver} in den @code{Staff}-Kontext
verschoben werden.

@lilypond[quote,verbatim]
\layout {
  \context {
    \Score
    \remove Timing_translator
  }
  \context {
    \Staff
    \consists Timing_translator
  }
}

% Now each staff has its own time signature.

\relative <<
  \new Staff {
    \time 3/4
    c'4 c c |
    c4 c c |
  }
  \new Staff {
    \time 2/4
    c4 c |
    c4 c |
    c4 c |
  }
  \new Staff {
    \time 3/8
    c4. |
    c8 c c |
    c4. |
    c8 c c |
  }
>>
@end lilypond

@funindex \compoundMeter
@cindex Zusammengesetzte Taktarten
@cindex Taktarten, zusammengesetzt

@subsubheading Zusammengesetzte Taktarten

Taktarten aus mehreren Teilen werden mit der Funktion
@code{\compoundMeter} erstellt.  Die Syntax ist folgende:

@example
\compoundMeter #'(Liste aus Listen)
@end example

Die einfachste Konstruktion ist eine einzige Liste, wobei die letzte
Zahl den Nenner des Bruches darstellt, während die vorherkommenden
Zahlen die Zähler sind.

@lilypond[quote,verbatim]
\relative {
  \compoundMeter #'((2 2 2 8))
  \repeat unfold 6 c'8 \repeat unfold 12 c16
}
@end lilypond

Kompliziertere Taktarten können durch zusätzliche Listen erstellt
werden (von Klammern abgegrenzt).  Automatische Balken werden
entsprechend der Werte angepasst.

@lilypond[quote,verbatim]
\relative {
  \compoundMeter #'((1 4) (3 8))
  \repeat unfold 5 c'8 \repeat unfold 10 c16
}

\relative {
  \compoundMeter #'((1 2 3 8) (3 4))
  \repeat unfold 12 c'8
}
@end lilypond

@morerefs
Glossar:
@rglos{polymetric},
@rglos{polymetric time signature},
@rglos{meter}.

Notationsreferenz:
@ref{Time signature},
@ref{Automatic beams},
@ref{Manual beams},
@ref{Scaling durations}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{TimeSignature},
@rinternals{Timing_translator},
@rinternals{Staff}.

@knownissues

Wenn unterschiedliche Taktarten parallel benutzt werden, werden
Noten auf demselben musikalischen Moment horizontal auf die
gleiche Position gesetzt.  Die unterschiedlichen Taktlinien
führen allerdings dazu, dass die Noten nicht ganz so regelmäßig
gesetzt werden, wie es ohne unterschiedliche Taktarten der
Fall wäre.


@node Automatic note splitting
@unnumberedsubsubsec Automatische Aufteilung von Noten

@cindex Noten, Aufteilen
@cindex Aufteilen von Noten
@cindex automatisches Aufteilen von Noten
@cindex Pausen, Aufteilen
@cindex Aufteilen von Pausen

@funindex Note_heads_engraver
@funindex Completion_heads_engraver
@funindex Completion_rest_engraver

Lange Noten, die über Taktlinien hinüberreichen, können
automatisch in übergebundene Noten aufgeteilt werden.
Dieses Verhalten erreicht man, indem der @rinternals{Note_heads_engraver}
mit dem @rinternals{Completion_heads_engraver} ausgetauscht wird.  Auf
gleiche Art können lange Pausen, die über Taktgrenzen reichen, automatisch
aufgeteilt werden, indem man den @code{Rest_engraver} mit dem
@code{Completion_rest_engraver} ersetzt.  Im nächsten Beispiel werden
Noten und Pausen, die über die Taktlinie dauern, aufgeteilt; Noten
werden auch übergebunden.

@lilypond[quote,verbatim]
\new Voice \with {
  \remove Note_heads_engraver
  \consists Completion_heads_engraver
  \remove Rest_engraver
  \consists Completion_rest_engraver
}
\relative {
  c'2. c8 d4 e f g a b c8 c2 b4 a g16 f4 e d c8. c2 r1*2
}
@end lilypond

Dieser Engraver teilt alle Noten und Pausen
auf, die über eine Taktlinie dauern und fügt für Noten Bindebögen hinzu.
Er kann unter Anderem dann nützlich sein, wenn man komplexe
Partituren auf Fehler überprüfen möchte: Wenn die Takte nicht
vollständig gefüllt sind, zeigt die Überbindung genau an, wie viele
Notenwerte noch in dem jeweiligen Takt fehlen.

@morerefs
Glossar:
@rglos{tie}

Handbuch zum Lernen:
@rlearningnamed{Engravers explained, Was sind Engraver?},
@rlearningnamed{Adding and removing engravers, Engraver hinzufügen und entfernen}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Note_heads_engraver},
@rinternals{Completion_heads_engraver},
@rinternals{Rest_engraver},
@rinternals{Completion_rest_engraver},
@rinternals{Forbid_line_break_engraver}.

@knownissues

Nicht alle Notenwerte (besonders wenn sie andere rhythmische
Aufteilungen beinhalten) können exakt durch normale Noten und
Punktierungen wiedergegeben werden. Der Engraver setzt aber
trotzdem keine Triolen etc.

@code{Completion_heads_engraver} wirkt sich nur auf Noten aus;
Pausen werden nicht aufgeteilt.


@node Showing melody rhythms
@unnumberedsubsubsec Melodierhythmus anzeigen

@cindex Melodierhythmus: Anzeige
@cindex Rhythmus der Melodie anzeigen

Manchmal soll nur der Rhythmus einer Melodie dargestellt werden. Das
erreicht man mit einem Rhythmus-Notensystem. Alle Tonhöhen werden
auf eine Linie reduziert und das System hat auch nur eine einzige
Linie.

@lilypond[quote,verbatim]
<<
  \new RhythmicStaff {
    \new Voice = "myRhythm" \relative {
      \time 4/4
      c'4 e8 f g2
      r4 g g f
      g1
    }
  }
  \new Lyrics {
    \lyricsto "myRhythm" {
      This is my song
      I like to sing
    }
  }
>>
@end lilypond

@cindex Gitarren-Akkordnotation
@cindex Schlagrhythmus, Gitarre
@cindex Gitarrenschlagrhythmus, Notation

@funindex Pitch_squash_engraver
@funindex \improvisationOn
@funindex \improvisationOff

Akkordnotation für Gitarren bezeichnet auch oft zusätzlich den
geschlagenen Rhythmus.  Das kann notiert werden unter Verwendung
des @code{Pitch_squash_engraver} und indem  Tonhöhenimprovisation
eingeschaltet wird mit @code{\improvisationOn}.

@lilypond[quote,verbatim]
<<
  \new ChordNames {
    \chordmode {
      c1 f g c
    }
  }

  \new Voice \with {
    \consists Pitch_squash_engraver
  } \relative c'' {
    \improvisationOn
    c4 c8 c c4 c8 c
    f4 f8 f f4 f8 f
    g4 g8 g g4 g8 g
    c4 c8 c c4 c8 c
  }
>>
@end lilypond

@predefined
@code{\improvisationOn},
@code{\improvisationOff}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/guitar-strum-rhythms.ly}

@morerefs
Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{RhythmicStaff},
@rinternals{Pitch_squash_engraver}.



@node Beams
@subsection Balken

@menu
* Automatic beams::
* Setting automatic beam behavior::
* Manual beams::
* Feathered beams::
@end menu


@node Automatic beams
@unnumberedsubsubsec Automatische Balken

LilyPond setzt Balken (engl. beam) automatisch.

@cindex Balken, Einstellungen
@cindex Balken, eigene Regeln
@cindex automatische Bebalkung
@cindex Balken, automatisch
@cindex eigene Balkenregeln

@funindex \autoBeamOn
@funindex \autoBeamOff

@lilypond[quote,verbatim]
\relative c'' {
  \time 2/4 c8 c c c
  \time 6/8 c8 c c c8. c16 c8
}
@end lilypond

Wenn diese automatischen Entscheidungen nicht gut genug sind, können
die Balken auch explizit eingegeben werden, siehe
@ref{Manual beams}.  Balken @emph{müssen} auch auf diese Weise eingegeben
werden, wenn sie über Pausen hinwegreichen sollen.

Wenn automatische Bebalkung nicht benötigt wird, kann sie mit dem Befehl @code{\autoBeamOff}
aufgehoben werden und mit dem Befehl @code{\autoBeamOn} wieder
eingeschaltet werden.

@lilypond[quote,verbatim]
\relative c' {
  c4 c8 c8. c16 c8. c16 c8
  \autoBeamOff
  c4 c8 c8. c16 c8.
  \autoBeamOn
  c16 c8
}
@end lilypond

@cindex Melismen, Balken
@cindex Balken und Melismen

@warning{Wenn Balken eingesetzt werden, um Melismen in Gesang zu notieren,
sollte die automatische Bebalkung mit @code{@bs{}autoBeamOff} ausgeschaltet
werden und die Balken manuell notiert werden.  Die Benutzung von
@code{@bs{}partCombine} zusammen mit @code{@bs{}autoBeamOff} kann zu
unbeabsichtigten Ergebnissen führen.  Siehe die Schnipsel für mehr
Information.}

Balkenmuster, die sich von den automatisch erstellen unterscheiden,
können erstellt werden, siehe @ref{Setting automatic beam behavior}.

@predefined
@code{\autoBeamOff},
@code{\autoBeamOn}.
@endpredefined

@funindex breakable
@cindex Zeilenumbruch, Balken
@cindex Balken, Zeilenumbrüche
@cindex Balken mit Knie
@cindex weit außeinander liegende Balken
@cindex auto-knee-gap

@snippets
@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/beams-across-line-breaks.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/changing-beam-knee-gap.ly}

@cindex Balken, \partCombine und \autoBeamOff
@cindex Stimmen, \autoBeamOff und \partCombine

@lilypondfile [verbatim, quote, ragged-right, texidoc, doctitle]
{snippets/partcombine-and--autobeamoff.ly}

@morerefs
Notationsreferenz:
@ref{Manual beams},
@ref{Setting automatic beam behavior}.

Installierte Dateien:
@file{scm/auto-beam.scm}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Auto_beam_engraver},
@rinternals{Beam_engraver},
@rinternals{Beam},
@rinternals{BeamEvent},
@rinternals{BeamForbidEvent},
@rinternals{beam-interface},
@rinternals{unbreakable-spanner-interface}.

@knownissues
Die Eigenschaften eines Balkens werden am @emph{Beginn} seiner
Konstruktion bestimmt.  Alle zusätzlichen Änderungen der
Balkeneigenschaften, die auftreten, bevor der Balken zuende
ist, werden nicht ausgewertet, bevor nicht der @emph{nächste}
Balken beginnt.


@node Setting automatic beam behavior
@unnumberedsubsubsec Einstellung von automatischen Balken

@cindex autobeam
@cindex Verändern von automatischer Bebalkung
@cindex Bebalkung, automatisch, Einstellungen
@cindex Text und Balken
@cindex Gesangstext und Balken
@cindex Balken und Gesangstext

@funindex autoBeaming
@funindex beatStructure
@funindex beamExceptions
@funindex measureLength
@funindex baseMoment
@funindex \time
@funindex \set

Wenn die automatischen Balken angeschaltet sind, wird die Platzierung der
automatischen Balken von drei Kontexteigenschaften bestimmt:
@code{baseMoment}, @code{beatStructure} und @code{beamExceptions}.
Wenn eine @code{beamExceptions}-Regel für die aktuelle Taktart definiert ist,
wird diese Regel zur Bestimmmung der Balkenplatzierung herangezogen.  Wenn keine
@code{beamExceptions}-Regel für die aktuelle Taktart vorhanden ist, wird
die Platzierung der Balken durch die Einstellungen von @code{baseMoment}
und @code{beatStructure} bestimmt.

Standardmäßig sind @code{beamExceptions}-Regel für alle häufigen Taktarten
vordefiniert, sodass die @code{beamExceptions}-Regeln deaktiviert werden
müssen, wenn die Balkenplatzierung aufgrund von @code{baseMoment} und
@code{beatStructure} stattfinden soll.  Die @code{beamExceptions}-Regeln werden
deaktiviert durch

@example
\set Timing.beamExceptions = #'()
@end example


@subsubheading @i{Bebalkung basierend auf @code{baseMoment} und @code{beatStructure}}

In den meisten Fällen enden automatische Balken am Ende eines Taktes.
Die Endpunkte für Schläge werden durch die Kontexteigenschaften
@code{baseMoment} und @code{beatStructure} bestimmt.  @code{beatStructure}
ist eine Scheme-Liste, die die Länge jedes Schlages im Takt in
Einheiten von @code{baseMoment} angibt.  Der Standard von
@code{baseMoment} ist Eins durch den Numerator der Taktangabe.  Der
Standardwert jeder Längeneinheit @code{baseMoment} ist ein
einzelner Taktschlag.


@lilypond[quote,relative=2,verbatim]
\time 5/16
c16^"default" c c c c |
\set Timing.beatStructure = 2,3
c16^"(2+3)" c c c c |
\set Timing.beatStructure = 3,2
c16^"(3+2)" c c c c |
@end lilypond

Wenn eine häufige Taktart benützt wird, @emph{muss} @code{beamExceptions}
deaktiviert werden, damit @code{beatStructure} funktionieren kann.
Der @code{\set Timing.beamExceptions = #'()}-Befehl kann immer eingefügt
werden, wenn die Bebalkung von @code{beatStructure} bestimmt werden soll.

@lilypond[quote,relative=2,verbatim]
\time 4/4
a8^"default" a a a a a a a

\set Timing.beatBase = #1/4
\set Timing.beatStructure = 1,1,1,1
a8^"no change" a a a a a a a

\set Timing.beamExceptions = #'()
\set Timing.beatBase = #1/4
\set Timing.beatStructure = 1,1,1,1
a8^"changed" a a a a a a a
@end lilypond

Balkenregelveränderungen können auf bestimmte Kontexte beschränkt
werden.  Wenn keine Regeln in einen unteren Kontext definiert
sind, gelten die Regeln des höheren Kontext, in dem sich der
niedrigere befindet.

@lilypond[quote, verbatim,relative=1]
\new Staff <<
  \time 7/8
  \set Staff.beatStructure = 2,3,2
  \new Voice = one {
    \relative {
        a'8 a a a a a a
    }
  }
  \new Voice  = two {
    \relative {
      \voiceTwo
      \set Voice.beatStructure = 1,3,3
      f'8 f f f f f f
    }
  }
>>
@end lilypond

Wenn mehrere Stimmen eingesetzt werden, muss der @code{Staff}-Kontext
definiert werden, wenn die Balkenregeln auf alle Stimmen des
Systems angewendet werden sollen:

@lilypond[quote,verbatim,relative=2]
\time 7/8
% rhythm 3-1-1-2
% Context applied to Voice by dafault --  does not work correctly
% Because of autogenerated voices, all beating will
% be at beatBase #1/8
\set beatStructure = 3,1,1,2
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>

% Works correctly with context Staff specified
\set Staff.beatStructure = 3,1,1,2
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>
@end lilypond

Der Wert von @code{baseMoment} kann angepasst werden, um das
Bebalkungsverhalten zu ändern, wenn gewünscht.  In diesem Fall
muss der Wert von @code{beatStructure} so gesetzt werden, dass
er kompatibel mit dem neuen Wert von @code{baseMoment} ist.

@lilypond[quote,verbatim,relative=2]
\time 5/8
\set Timing.beatBase = #1/16
\set Timing.beatStructure = 7,3
\repeat unfold 10 { a16 }
@end lilypond

Der Standardwert von @code{baseMoment} ist Eins durch den Denominator
der Taktangabe.  Alle Ausnahmen dieses Standards finden sich in der Datei
@file{scm/time-signature-settings.scm}.

@subsubheading @i{Bebalkung basierend auf @code{beamExceptions}}

Besondere automatische Bebalkungsregeln (außer dass ein Balken auf einem
Taktschlag aufhört) sind in der @code{beamExceptions}-Eigenschaft
definiert.

@lilypond[quote,relative=2,verbatim]
\time 3/16
\set Timing.beatStructure = 2,1
\set Timing.beamExceptions =
  #'(                         ;start of alist
     (end .                   ;entry for end of beams
      (                       ;start of alist of end points
       ((1 . 32) . (2 2 2))   ;rule for 1/32 beams -- end each 1/16
      )))                     %close all entries
c16 c c |
\repeat unfold 6 { c32 } |
@end lilypond

@code{beamExceptions} ist eine Aliste mit einem Schlüssel der Regeltypen
(rule-type) und einem Wert der Bebalkungsregeln (beaming-rules).

Im Moment ist der einzige mögliche rule-type @code{'end} für ein
Balkenende.

Beaming-rules ist eine Scheme-Aliste (oder eine paarige Liste), die
den Balkentyp und die Gruppierung anzeigt, die auf Balken angewendet
werden, welche Noten mit einer kürzesten Dauer des Balkentyps enthalten.

@example
#'((beam-type1 . grouping-1)
   (beam-type2 . grouping-2)
   (beam-type3 . grouping-3))
@end example

Beam-type ist ein Scheme-Paar, das die Dauer eines Balkens anzeigt,
etwa @code{(1 . 16)} für ein Sechszehntel.

Grouping ist eine Scheme-Liste, die die auf den Balken anzuwendene
Gruppierung anzeigt.  Die Gruppierung wird in Einheiten des
Balkentyps angegeben.

@warning{Ein @code{beamExceptions}-Wert muss eine @emph{vollständige}
Ausnahme-Liste sein.  Das heißt, dass jede Ausnahme, die angewendet werden
soll, auch in die Einstellungen mit aufgenommen werden muss.  Es ist nicht
möglich, nur eine der Einstellungen zu ändern, zu entfernen oder hinzuzufügen.
Das mag seltsam erscheinen, bedeutet aber, dass die aktuellen
Balkenregeln bekann sein müssen, um ein neues Bebalkungsmuster definieren zu können.}

Wenn die Taktart geändert wird, werden neue Standardwerte für
@code{Timing.baseMoment}, @code{Timing.beatStructure} und
@code{Timing.beamExceptions} definiert.  Wenn die Taktart
definiert wird, werden die automatischen Bebalkungsregeln für den
@code{Timing}-Kontext auf den Standard zurückgesetzt.

@lilypond[quote,verbatim]
\relative a' {
  \time 6/8
  \repeat unfold 6 { a8 }
  % group (4 + 2)
  \set Timing.beatStructure = 4,2
  \repeat unfold 6 { a8 }
  % go back to default behavior
  \time 6/8
  \repeat unfold 6 { a8 }
}
@end lilypond

Die automatischen Standardeinstellungen für die Bebalkung einer
Taktart werden in der Datei @file{scm/time-signature-settings.scm}
bestimmt.  Änderungen der automatischen Bebalkungsregeln für eine Taktart
werden in @ref{Time signature} beschrieben.

Die meisten automatischen Bebalkungsregeln für eine Taktart enthalten einen
Eintrag für @code{beamExceptions}.  Beispielsweise wird in einem 4/4-Takt
versucht, den Takt in zwei Hälfen zu teilen, wenn nur Achtelnoten vorkommen.
Die @code{beamExceptions}-Regel kann die @code{beatStructure}-Einstellung
überschreiben, wenn @code{beamExceptions} nicht zurückgesetzt wird:

@lilypond[quote,verbatim,fragment]
\time 4/4
\set Timing.beatBase = #1/8
\set Timing.beatStructure = 3,3,2
% This won't beam (3 3 2) because of beamExceptions
\repeat unfold 8 {c''8} |
% This will beam (3 3 2) because we clear beamExceptions
\set Timing.beamExceptions = #'()
\repeat unfold 8 {c''8}
@end lilypond

Auf gleiche Art werden Achtelnoten im 3/4-Takt über den ganzen Takt hin
mit Balken versehen.  Damit Achtelnoten im 3/4-Takt auf jedem Schlag
einen neuen Balken erhalten, muss @code{beamExceptions} verändert werden:

@lilypond[quote,verbatim,relative=2]
\time 3/4
% by default we beam in (6) due to beamExceptions
\repeat unfold 6 {a8} |
% This will beam (1 1 1) due to beatLength
\set Timing.beamExceptions = #'()
\repeat unfold 6 {a8}
@end lilypond

In Notenstichen der romantischen und klassischen Periode wird teilweise auch
ein halber Takt Achtelnoten im 3/4-Takt mit einem Balken versehen, moderner
Notenstich vermeidet dies jedoch, um nicht den falschen Eindruck eines
6/8-Taktes entstehen zu lassen (siehe Gould, S. 153).  Eine ähnliche Situation
entsteht im 3/8-Takt.  Dieses Verhalten wird durch
die Eigenschaft @code{beamHalfMeasure} bestimmt, welche sich nur auf
Takte mit einer 3 im Zähler auswirkt:

@lilypond[quote,verbatim]
\relative a' {
  \time 3/4
  r4. a8 a a |
  \set Timing.beamHalfMeasure = ##f
  r4. a8 a a |
}
@end lilypond

@subsubheading @i{Wie die automatische Bebalkung funktioniert}

Wenn die automatische Bebalkung aktiviert ist, wird die Platzierung
der automatischen Balken durch die Kontexteigenschaften
@code{baseMoment}, @code{beatStructure} und @code{beamExceptions}
bestimmt.

Die folgenden Regeln, in der Reihenfolge ihrer Priorität, gelten, wenn das Aussehen der Balken bestimmt wird:

@itemize

@item
Wenn ein manueller Balken mit @code{[...]} definiert ist, wird er gesetzt, andernfalls

@item
wenn eine Balkenendung-Regel für den Balkentyp in
@code{beamExceptions} definiert ist, wird sie verwendet, um die
gültigen Plätze für Balkenenden zu berechnen, andernfalls

@item
wenn eine Balkenendung-Regel für einen größeren Balkentyp
in @code{beamExceptions} definiert ist, wird sie verwendet,
um die gültigen Plätze für Balkenenden zu berechnen, andernfalls

@item
benutze die Werte von @code{baseMoment} und @code{beatStructure},
um die Enden der Balken im Takt zu definieren und beende Balken
am Ende jedes Taktes.

@end itemize

In den oben genannten Regeln ist der Balkentyp die Dauer der
kürzesten Note der bebalkten Gruppe.

Die Standardbebalkungsregeln finden sich in der Datei
@file{scm/time-signature-settings.scm}.

@snippets
@cindex Balken, Unterteilung
@funindex subdivideBeams

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/subdividing-beams.ly}

@cindex Bebalkung nach Taktschlag

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/strict-beat-beaming.ly}

@cindex Taktgruppen
@cindex Schlaggruppen
@cindex Taktschläge gruppieren
@cindex Takt unterteilen
@cindex Unterteilen von Takten
@funindex autoBeamSettings

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/conducting-signs,-measure-grouping-signs.ly}

@cindex Balken, letzter in Partitur
@cindex Balken, letzter in polyphoner Stimme

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/beam-endings-in-score-context.ly}

@morerefs
Installierte Dateien:
@file{scm/beam-settings.scm}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Auto_beam_engraver},
@rinternals{Beam},
@rinternals{BeamForbidEvent},
@rinternals{beam-interface}.

@knownissues
Wenn eine Partitur endet, während ein automatischer Balken noch
nicht beendet wurde und weiterhin Noten erwartet, wird dieser
letzte Balken nicht ausgegeben.  Das Gleiche gilt auch für
polyphone Stimmen, die mit der
@code{<< @dots{} \\ @dots{} >>}-Konstruktion notiert wurden.  Wenn eine
polyphone Stimme endet, während ein Balken noch weitere Noten
erwartet, wird der Balken nicht gesetzt.  Eine Notlösung für
dieses Probelm ist, den letzten Balken in der Stimme oder
Partitur manuell zu setzen.

Die Standardeinstellungen weisen den  dem
@code{Score}-Kontext zu.  Das bedeutet, dass das Setzen der
Taktart (time signature) in einem System sich auch auf die Bebalkung
der anderen Systeme auswirkt.  Darum verändert eine neue Taktart in einem
späteren System auch alle früher vorgenommenen eigenen Einstellungen
der Bebalkung eines anderen Systems.  Eine Möglichkeit, dieses Problem zu
vermeiden, ist es, die Taktart nur in einem System zu setzen.

@lilypond[quote,verbatim,relative=2]
<<
  \new Staff {
    \time 3/4
    \set Timing.beatBase = #1/8
    \set Timing.beatStructure = 1,5
    \repeat unfold 6 { a8 }
  }
  \new Staff {
    \repeat unfold 6 { a8 }
  }
>>
@end lilypond

Die Standardbebalkungsregeln für die Taktart können auch verändert
werden, sodass die gewünschte Bebalkung immer benützt wird.  Veränderungen
der automatischen Bebalkungsregeln für eine Taktart sind in
@ref{Time signature} beschrieben.

@lilypond[quote,verbatim]
<<
  \new Staff {
    \overrideTimeSignatureSettings
      3/4               % timeSignatureFraction
      #1/8              % beatBase
      1,5               % beatStructure
      #'()		% beamExceptions
    \time 3/4
    \repeat unfold 6 { a'8 }
  }
  \new Staff {
    \time 3/4
    \repeat unfold 6 { a'8 }
  }
>>
@end lilypond


@node Manual beams
@unnumberedsubsubsec Manuelle Balken

@cindex manuelle Balken
@cindex Balken, manuell

@funindex ]
@funindex [

In einigen Fällen kann es nötig sein, den automatischen Algorithmus
für die Balken zu überschreiben. Die automatischen Balken werden
beispielsweise nicht über Pausen oder Taktlinien hinweg gesetzt, und
in Gesang werden die Balken oft nach dem Rhythmus des Textes und
nicht dem der Musik gesetzt.
Manuell definierte Balken werden mit den Zeichen @code{[} und
@code{]} (AltGr+8 bzw. 9) markiert.

@lilypond[quote,verbatim]
\relative { r4 r8[ g' a r] r g[ | a] r }
@end lilypond

@cindex manuelle Balken, Richtung zuweisen
@cindex manuelle Balken, Verzierungen
@cindex Verzierungen, manuelle Bebalkung

Die Richtung von Balken kann mit den Richtungszeichen verändert werden:

@lilypond[quote,verbatim]
\relative { c''8^[ d e] c,_[ d e f g] }
@end lilypond

@funindex \noBeam

Einzelne Noten können mit dem Befehl @code{\noBeam} markiert werden,
damit sie nicht mit einem Balken versehen werden.

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\time 2/4 c8 c\noBeam c c
@end lilypond

Balken von Verzierungsnoten und normale Balken können gleichzeitig
gesetzt werden.  Unbebalkte Verzierungen werden nicht innerhalb von
normalen Balken gesetzt.

@lilypond[quote,verbatim]
\relative {
  c''4 d8[
  \grace { e32 d c d }
  e8] e[ e
  \grace { f16 }
  e8 e]
}
@end lilypond

@funindex stemLeftBeamCount
@funindex stemRightBeamCount

Noch bessere manuelle Kontrolle über die Balken kann durch Setzen
der Eigenschaften @code{stemLeftBeamCount} und
@code{stemRightBeamCount} erreicht werden.  Sie bestimmen
die Anzahl von Balken, die rechts und links vom Hals der nächsten
Note gesetzt werden sollen.  Wenn eine Eigenschaften gesetzt ist,
wird ihr Wert nur einmal eingesetzt und dann wieder auf Null gesetzt.
Im folgenden Beispiel hat das letzte @code{f} nur einen Balken
an seiner linken Seite (der als Achtelbalken der gesamten
Gruppe gewertet wird).

@lilypond[quote,verbatim]
\relative a' {
  a8[ r16 f g a]
  a8[ r16
  \set stemLeftBeamCount = #2
  \set stemRightBeamCount = #1
  f16
  \set stemLeftBeamCount = #1
  g16 a]
}
@end lilypond

@snippets
@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/flat-flags-and-beam-nibs.ly}

@morerefs
Notationsreferenz:
@ref{Direction and placement},
@ref{Grace notes}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Beam},
@rinternals{BeamEvent},
@rinternals{Beam_engraver},
@rinternals{beam-interface},
@rinternals{Stem_engraver}.


@node Feathered beams
@unnumberedsubsubsec Gespreizte Balken

@cindex Balken, gespreizt
@cindex gespreizte Balken

@funindex \featherDurations
@funindex grow-direction

Gespreizte Balken werden teilweise eingesetzt um anzuzeigen, dass
kleine Notengruppen in beschleunigendem oder verlangsamendem Tempo
gespielt werden sollen, ohne dass sich das Tempo des Stückes
verändert.  Die Reichweite der gespreizten Balken muss manuell
mit @code{[} und @code{]} angegeben werden und die Spreizung wird
kontrolliert, indem der Balken-Eigenschaft @code{grow-direction}
eine Richtung zugewiesen wird.

Wenn die Anordnung der Noten und die MIDI-Ausgabe das @emph{Ritardando}
oder @emph{Accelerando}, wie es die Spreizung angibt, reflektieren soll,
müssen die Noten als ein musikalischer Ausdruck notiert werden,
der von geschweiften Klammern umgeben ist und dem ein
@code{featheredDurations}-(gespreizteDauern)-Befehl vorangestellt
ist, der das Verhältnis der ersten und letzten Dauer definiert.

Die eckigen Klammern geben die Reichweite des Balkens an und die
geschweiften Klammern zeigen, auf welche Noten sich die Veränderung
der Dauern auswirkt.  Normalerweise bezieht sich das auf die
selbe Notengruppe, aber das ist nicht unbedingt erforderlich: beide
Befehle sind unabhängig voneinander.

Im folgenden Beispiel nehmen die acht 16-Noten exakt die gleiche
Zeit ein wie eine halbe Note, aber die erste Note ist halb so lang
wie die letzte der Gruppe, und die Noten dazwischen werden stufenweise
verlängert.  Die ersten vier 32-Noten beschleunigen stufenweise
das Tempo, während die darauffolgenden vier 32-Noten ein
gleichmäßiges Tempo haben.

@lilypond[verbatim,quote]
\relative c' {
  \override Beam.grow-direction = #LEFT
  \featherDurations 2/1
  { c16[ c c c c c c c] }
  \override Beam.grow-direction = #RIGHT
  \featherDurations 2/3
  { c32[ d e f] }
  % revert to non-feathered beams
  \override Beam.grow-direction = #'()
  { g32[ a b c] }
}
@end lilypond

@noindent
Die Platzierung der Noten im Druckbild entspricht den Notendauern
nur annähernd, aber die MIDI-Ausgabe ist exakt.

@predefined
@code{\featherDurations}.
@endpredefined

@morerefs
Snippets:
@rlsr{Rhythms}.

@knownissues
Der @code{\featherDurations}-Befehl funktioniert nur mit kurzen
Notenabschnitten, und wenn die Zahlen in den Brüchen klein
sind.


@node Bars
@subsection Takte

@menu
* Bar lines::
* Bar numbers::
* Bar and bar number checks::
* Rehearsal marks::
@end menu

@node Bar lines
@unnumberedsubsubsec Taktstriche

@c wrong word on purpose here:
@cindex Taktlinien
@cindex Taktstriche
@cindex Doppellinie
@cindex schließende Taktstriche
@cindex Taktstriche, schließend
@cindex Doppelter Taktstrich
@cindex Taktstrich, doppelt
@cindex Wiederholungszeichen

@funindex \bar

Taktstriche trennen Takte voneinander, werden aber auch verwendet,
um Wiederholungen anzuzeigen. Normalerweise werden sie automatisch
nach Vorgabe der aktuellen Taktart eingefügt.

Die einfachen, automatisch eingefügten Taktstriche können mit dem
@code{\bar}-Befehl geändert werden.  Eine doppelter Taktstrich etwa
wird normalerweise am Ende eines Stückes gesetzt:

@lilypond[quote,verbatim]
\relative { e'4 d c2 \bar "|." }
@end lilypond

Es ist kein Fehler, wenn die letzte Note in einem Takt nicht
zum automatisch eingefügten Taktstrich aufhört: es wird angenommen,
dass die Note im nächsten Takt weitergeht.  Wenn aber eine ganze
Reihe solcher überlappenden Takte auftritt, können die Noten
gedrungen aussehen oder sogar über den Seitenrand hinausragen.  Das
kommt daher, dass Zeilenumbrüche nur dann vorgenommen werden, wenn
ein vollständiger Takt auftritt, also ein Takt, an dem alle Noten
vor dem Taktstrich zu Ende sind.

@warning{Eine falsche Dauer kann bewirken, dass Zeilenumbrüche
verhindert werden, woraus resultiert, dass die Noten entweder
sehr stark gedrängt auf der Zeile notiert werden, oder die Zeile
über den Seitenrand hinausragt.}

@cindex Zeilenumbrüche
@cindex unsichtbare Taktstriche
@cindex Taktstriche, unsichtbar
@cindex Taktlinien, unsichtbar

Zeilenumbrüche werden erlaubt, wenn ein Taktstrich manuell eingefügt
wird, auch, wenn es sich um keinen vollständigen Takt handelt.  Um
einen Zeilenumbruch zu erlauben, ohne den Taktstrich auszugeben,
kann

@example
\bar ""
@end example

@noindent
benutzt werden.  Damit wird ein unsichtbarer Taktstrich an dieser Stelle eingefügt
und damit ein Zeilenumbruch erlaubt (aber nicht erzwungen), ohne
dass sich die Anzahl der Takte erhöhen würde.  Um einen
Zeilenumbruch zu erzwingen, siehe
@ref{Line breaking}.

@cindex manuelle Taktstriche
@cindex Taktstriche, manuell
@cindex Taktlinie, manuell

Diese Taktstrichart und auch andere besondere Taktstriche
können manuell an jeder Stelle in der Partitur eingefügt werden.
Wenn sie mit dem Ende eines Taktes übereinstimmen, wird der
automatische Taktstrich durch den manuellen ersetzt.  Diese
manuellen Einfügungen haben keine Auswirkung auf die Zählung und
Position der folgenden automatischen Taktstriche.

Dabe gilt zu beachten, dass manuell gesetzten Taktstriche nur
visuell sichtbar sind.  Sie wirken sich auf keine der Eigenschaften
aus, die ein normaler Taktstrich beeinflussen würde, wie etwa
Taktzahlen, Versetzungszeichen, Zeilenumbrüche usw.  Sie beeinflussen
auch nicht die Berechnung und Platzierung von weiteren automatischen
Taktstrichen.  Wenn ein manueller Taktstrich dort gesetzt wird, wo
ein automatischer Taktstrich sowieso wäre, werden die Auswirkungen
des originalen Taktstriches nicht verändert.

Manuell können zwei einfache Taktstriche und zusätzlich fünf Arten
eines doppelten Taktstriches gesetzt werden:

@lilypond[quote,verbatim]
\relative {
  f'1 \bar "|"
  f1 \bar "."
  g1 \bar "||"
  a1 \bar ".|"
  b1 \bar ".."
  c1 \bar "|.|"
  d1 \bar "|."
  e1
}
@end lilypond

Zusätzlich gibt es noch punktierte und gestrichelte Taktstriche:

@lilypond[quote,verbatim]
\relative {
  f'1 \bar ";"
  g1 \bar "!"
  a1
}
@end lilypond

@noindent
und fünf unterschiedliche Wiederholungstaktstriche:

@lilypond[quote,relative=1,verbatim]
f1 \bar ".|:" g \bar ":..:" a \bar ":|.|:" b \bar ":|.:" c \bar ":|." d
@end lilypond

Zusätzlich kann eine Taktlinie mit einem einfachen Apostroph gesetzt werden:

@lilypond[quote,relative=1,verbatim]
f1 \bar ".|:"
g1 \bar ":..:"
a1 \bar ":|.|:"
b1 \bar ":|.:"
c1 \bar ":|."
e1
@end lilypond

Zusätzliche kann ein Taktstrich auch nur als kleines Komma gesetzt
werden:

@lilypond[quote,relative=1,verbatim]
f1 \bar "'"
@end lilypond

Derartige Apostrophe werden allerdings vor allem im gregorianischen
Choral eingesetzt, und es wird empfohlen, anstatt dessen
@code{\divisioMinima} zu benutzen, wie beschrieben im Abschnitt
@ref{Divisiones}.

@cindex segno

Für @emph{segno}-Zeichen innerhalb des Systems gibt es drei
Taktstricharten, die sich in ihrem Verhalten an Zeilenumbrüchen
unterscheiden:

@lilypond[quote,verbatim]
\fixed c' {
  c4 4 4 4
  \bar "S"
  d4 4 4 4 \break
  \bar "S"
  e4 4 4 4
  \bar "S-|"
  f4 4 4 4 \break
  \bar "S-|"
  g4 4 4 4
  \bar "S-||"
  a4 4 4 4 \break
  \bar "S-||"
  b4 4 4 4
  \bar "S-S"
  c'4 4 4 4 \break
  \bar "S-S"
  d'1
}
@end lilypond

@cindex Wiederholungen

Auch wenn die Taktlinien, die Wiederholungen angeben, manuell
eingefügt werden können, wird die Wiederholung dadurch nicht von
LilyPond erkannt.  Wiederholte Stellen werden besser notiert, indem
man die Wiederholungs-Befehle einsetzt, die automatische die
richtigen Taktlinien setzen.  Das ist beschrieben in@ref{Repeats}.

Zusätzlich kann noch @code{"||:"} verwendet werden, dass sich
genauso wie @code{"|:"} verhält, außer bei Zeilenumbrüchen, wo ein
doppelter Taktstrich am Ende der Zeile ausgegeben wird und ein
öffnender Wiederholungsstrich am Anfang der nächsten Zeile.

@lilypond[quote,verbatim]
\fixed c' {
  c4 4 4 4
  \bar ".|:"
  d4 4 4 4 \break
  \bar ".|:"
  e4 4 4 4
  \bar ".|:-|"
  f4 4 4 4 \break
  \bar ".|:-|"
  g4 4 4 4
  \bar ".|:-||"
  a4 4 4 4 \break
  \bar ".|:-||"
  b4 4 4 4
  \bar ".|:-|."
  c'4 4 4 4 \break
  \bar ".|:-|."
  d'4 4 4 4
}
@end lilypond

Für Kombinationen von Wiederholungen mit dem segno-Zeichen gibt
es sechs verschiedene Variationen:

@lilypond[quote,verbatim]
\fixed c' {
  g,4 4 4 4
  \bar ":|.S"
  a,4 4 4 4 \break
  \bar ":|.S"
  b,4 4 4 4
  \bar ":|.S-S"
  c4 4 4 4 \break
  \bar ":|.S-S"
  d4 4 4 4
  \bar "S.|:-S"
  e4 4 4 4 \break
  \bar "S.|:-S"
  f4 4 4 4
  \bar "S.|:"
  g4 4 4 4 \break
  \bar "S.|:"
  a4 4 4 4
  \bar "S.|:-|"
  b4 4 4 4 \break
  \bar "S.|:-|"
  c'4 4 4 4
  \bar "S.|:-||"
  d'4 4 4 4 \break
  \bar "S.|:-||"
  e'4 4 4 4
  \bar ":|.S.|:"
  f'4 4 4 4 \break
  \bar ":|.S.|:"
  g'4 4 4 4
  \bar ":|.S.|:-S"
  a'4 4 4 4 \break
  \bar ":|.S.|:-S"
  b'1
}
@end lilypond

Darüber hinaus wählt der @code{\inStaffSegno}-Befehl eines dieser
Segno-Taktstriche aus, in Zusammenarbeit mit dem
@code{\repeat volta}-Befehl.

In Partituren mit vielen Systemen wird ein @code{\bar}-Befehl in einem
System automatisch auf alle anderen Systeme angewendet. Die resultierenden
Taktstriche sind miteinander verbunden innerhalb einer Gruppe
(@code{StaffGroup}) oder einem Klaviersystem
(@code{PianoStaff} bzw. (@code{GrandStaff}).

@lilypond[quote,verbatim]
<<
  \new StaffGroup <<
    \new Staff \relative {
      e'4 d
      \bar "||"
      f4 e
    }
    \new Staff \relative { \clef bass c'4 g e g }
  >>
  \new Staff \relative { \clef bass c'2 c2 }
>>
@end lilypond

@cindex Standardtaktstrich, Änderung
@cindex Taktstriche, Änderung von Standard


@snippets

@funindex whichBar
@funindex measureBarType
@funindex \bar
@funindex bartype

Der Befehl @code{\bar }@var{Taktart} ist eine Kurzform von:
@code{\set Timing.whichBar = }@var{Taktart}. Immer, wenn
@code{whichBar} auf einen Wert gesetzt wird, wird ein
Taktstrich dieses Typs erzeugt.

Der automatisch erzeugte Taktstrich ist @code{"|"}.  Das kann
jederzeit durch den Befehl @code{\set Timing.measureBarType = }
@var{Taktstrichart} geändert werden.

@morerefs
Notationsreferenz:
@ref{Line breaking},
@ref{Repeats},
@ref{Grouping staves}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{BarLine} (erstellt auf @rinternals{Staff}-Ebene),
@rinternals{SpanBar} (über Systeme),
@rinternals{Timing_translator} (für Timing-Eigenschaften).



@node Bar numbers
@unnumberedsubsubsec Taktzahlen

@cindex Taktnummern
@cindex Nummerierung von Takten
@cindex Zahl eines Taktes
@cindex Taktzahlen

@funindex currentBarNumber

Taktzahlen werden standardmäßig zu Beginn eines jeden Systems
ausgegeben, ausgenommen ist die erste Zeile.  Die Zahl selber
wird in der @code{currentBarNumber}-Eigenschaft gespeichert, die
normalerweise für jeden Takt aktualisiert wird.  Sie kann aber auch
manuell gesetzt werden:

@lilypond[verbatim,quote,fragment,relative=1]
c1 c c c
\break
\set Score.currentBarNumber = #50
c1 c c c
@end lilypond

@cindex Taktzahlen, gleichmäßige Abstände

@funindex barNumberVisibility
@funindex BarNumber

Taktnummern können in regelmäßigem Abstand ausgegeben werden,
anstatt dass sie nur am Beginn des Systems erscheinen.  Um das
zu erreichen, muss die Standardeinstellung verändert werden, um
zu erlauben, dass Taktnummern an anderen Stellen als dem
Beginn von Systemen ausgegeben werden.  Das wird mit der
Eigenschaft @code{break-visibility} von @code{BarNumber} vorgenommen.
Sie braucht drei Werte, die auf @code{#t} (wahr) oder @code{#f}
(falsch) gestellt werden können, womit angegeben wird, ob die
Taktnummer an der entsprechenden Stelle sichtbar ist.  Die
Reihenfolge der Werte ist: @var{Ende der Zeile}, @var{Mitte
der Zeile} und @var{Beginn der Zeile}.  Im folgenden
Beispiel werden die Taktlinien überall ausgegeben:

@lilypond[verbatim,quote,relative=1]
\override Score.BarNumber.break-visibility = ##(#t #t #t)
\set Score.currentBarNumber = #11
% Permit first bar number to be printed
\bar ""
c1 | c | c | c
\break
c1 | c | c | c
@end lilypond


@cindex Taktnummer, Form
@cindex Aussehen von Taktnummern

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/printing-the-bar-number-for-the-first-measure.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/printing-bar-numbers-at-regular-intervals.ly}

@cindex Taktzahlen mit Buchstaben
@cindex Taktzahlen in Wiederholungen

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/alternative-bar-numbering.ly}

@cindex Ausrichtung von Taktlinien
@cindex Taktlinien, Ausrichtung

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/printing-bar-numbers-inside-boxes-or-circles.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/aligning-bar-numbers.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{snippets/removing-bar-numbers-from-a-score.ly}


@morerefs
Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{BarNumber},
@rinternals{Bar_number_engraver}.

@cindex Taktnummern, Zusammenstöße
@cindex Zusammenstöße, Taktnummern

@knownissues
Taktnummern können mit der oberen Ecke der Klammer zu Beginn des
Systems zusammenstoßen.  Um das zu verhindert, kann die
@code{padding}-Eigenschaft von @code{BarNumber} verwendet werden,
um die Zahl zu verschieben.  Für mehr Information siehe
@rinternals{StaffGroup} und @rinternals{BarNumber}.


@node Bar and bar number checks
@unnumberedsubsubsec Takt- und Taktzahlüberprüfung

@cindex Taktüberprüfung

@funindex barCheckSynchronize
@funindex |

Die Taktüberprüfung hilft, Fehler in den Notendauern zu entdecken.
Eine Taktüberprüfung wird mit dem Taktstrichsymbol @qq{|} (Taste AltGr+<)
eingegeben. Immer, wenn LilyPond bei der Ausgabe des Notendrucks
auf dieses Zeichen stößt, sollte hier in den Noten auch ein
Taktstrich erscheinen. Wenn das nicht der Fall ist, wird eine Warnung
ausgegeben. Im nächsten Beispiel resultiert die zweite Taktüberprüfung
in einer Fehlermeldung.

@example
\time 3/4 c2 e4 | g2 |
@end example

Taktüberprüfungen können auch in Gesangstexten verwendet werden:

@example
\lyricmode @{
  \time 2/4
  Twin -- kle | Twin -- kle
@}
@end example

Besonders in mehrstimmiger komplizierter Musik können
falschen Notenwerte die ganze Partitur durcheinander bringen.
Es lohnt sich also, die Fehlersuche damit zu beginnen, nicht bestandene
Taktüberprüfungen zu kontrollieren.

Wenn aufeinander folgende Taktüberprüfungen mit dem gleichen
Abstand Fehler produzieren, wird eventuell nur die erste Warnung
ausgegeben.  Damit wird die Warnung auf den Ursprung de Fehlers
fokussiert.

@funindex |
@funindex "|"

Es ist auch möglich, die Bedeutung des Symbols @code{|} (Pipe)
umzudefinieren, so dass hiermit eine andere Aktion als eine
Taktüberprüfung erreicht wird.
Das geschieht, indem man der Pipe (@code{"|"} einen musikalischen
Ausdruck zuweist.  Im nächsten Beispiel wird @code{|} dazu
verwendet, eine doppelte Taktlinie auszugeben, woimmer man
das Zeichen auch setzt.  Gleichzeitig hört das Zeichen auf,
als Taktüberprüfung zu funktionieren.

@lilypond[quote,verbatim]
"|" = \bar "||"
{
  c'2 c' |
  c'2 c'
  c'2 | c'
  c'2 c'
}
@end lilypond

@funindex \barNumberCheck

Wenn man größere Musikstücke kopiert, kann es hilfreich sein, wenn
LilyPond überprüft, ob die Taktnummer, in der Sie gerade kopieren,
mit der des Originales übereinstimmt. Das kann mit dem Befehl
@code{\barNumberCheck} folgenderweise überprüft werden:

@verbatim
\barNumberCheck #123
@end verbatim

@noindent
Eine Warnung wird ausgegeben, wenn der interne Zähler
@code{currentBarNumber} von LilyPond
nicht mit dem Wert 123 übereinstimmt.

@morerefs
Schnipsel:
@rlsr{Rhythms}.


@node Rehearsal marks
@unnumberedsubsubsec Übungszeichen

@cindex @"Ubungszeichen
@cindex Abschnitte markieren
@cindex Markieren von Abschnitten

@funindex \mark

Übungszeichen können mit dem @code{\mark}-Befehl ausgegeben werden:

@lilypond[quote,verbatim,relative=2]
c1 \mark \default
c1 \mark \default
c1 \mark #8
c1 \mark \default
c1 \mark \default
@end lilypond

@noindent
Das Zeichen wird automatisch um einen Wert heraufgesetzt, wenn man
@code{\mark \default} benutzt, aber man kann auch eine Ganzzahl
als Argument einsetzen, wenn man das Zeichen manuell setzen will.
Der Wert, der eingesetzt werden soll, wird in der Eigenschaft
@code{rehearsalMark} gespeichert.

@lilypond[quote,verbatim]
\relative c'' {
  c1 \mark \default
  c1 \mark \default
  c1 \mark #8
  c1 \mark \default
  c1 \mark \default
}
@end lilypond

@noindent
Der Buchstabe@tie{}@qq{I} wird ausgelassen, was den allgemeinen
Notensatzregeln entspricht. Wenn Sie dennoch den Buchstaben
@qq{I} benutzen, wollen, müssen Sie einen der folgenden Stile benutzen,
je nachdem, was für einen Übungszeichenstil Sie wollen (Buchstaben,
Buchstaben in einem Kasten, Buchstaben in einem Kreis).

@example
\set Score.rehearsalMarkFormatter = #format-mark-alphabet
\set Score.rehearsalMarkFormatter = #format-mark-box-alphabet
\set Score.rehearsalMarkFormatter = #format-mark-circle-alphabet
@end example

@lilypond[quote,verbatim]
\relative c'' {
  \set Score.rehearsalMarkFormatter = #format-mark-box-alphabet
  c1 \mark \default
  c1 \mark \default
  c1 \mark #8
  c1 \mark \default
  c1 \mark \default
}
@end lilypond

@cindex @"Ubungszeichen formatieren
@cindex Stil von Übungszeichen
@cindex @"Ubungszeichenstil
@cindex Art der Übungszeichen
@cindex Zeichen, Übung: Formatierung
@cindex manuelles Übungszeichen
@cindex Formatierung von Übungszeichen

Der Stil der Übungszeichen wird von der Eigenschaft @code{rehearsalMarkFormatter} definiert.  Das ist eine Funktion, die
das aktuelle Zeichen und den aktuellen Kontext als Argument
annimmt.  Sie gibt dann ein Textbeschriftungsobjekt aus.  Im
folgenden Beispiel ist @code{rehearsalMarkFormatter} so definiert, dass
eine Zahl ausgegeben wird.  Dann wird ein Übungszeichen in einem
Kasten produziert.

@lilypond[quote,verbatim]
\relative c'' {
  \set Score.rehearsalMarkFormatter = #format-mark-numbers
  c1 \mark \default
  c1 \mark \default
  \set Score.rehearsalMarkFormatter = #format-mark-box-numbers
  c1 \mark \default
  \set Score.rehearsalMarkFormatter = #format-mark-circle-numbers
  c1 \mark \default
  \set Score.rehearsalMarkFormatter = #format-mark-circle-letters
  c1
}
@end lilypond

Die Datei @file{scm/translation-functions.scm} beinhaltet
die Definitionen für @code{format-mark-numbers} (erstelle-Zeichen-Nummern),
@code{format-mark-box-numbers} (erstelle-Zeichen-Kasten-Nummern),
@code{format-mark-letters} (erstelle-Zeichen-Buchstaben) und
@code{format-mark-box-letters} (erstelle-Zeichen-Kasten-Buchstaben).  Sie können als Anleitung
für eigene Formatierungsfunktionen dienen.

Die Funktionen @code{format-mark-barnumbers},
@code{format-mark-box-barnumbers}und
@code{format-mark-circle-barnumbers} könenn eingesetzt werden,
um Taktnummern anstelle der fortlaufenden Zahlen bzw. Buchstaben
zu erhalten.

Andere Übungszeichenstile können auch manuell gesetzt werden:

@example
\mark "A1"
@end example

@noindent
@code{Score.rehearsalMarkFormatter} hat keine Auswirkungen auf solcherart
definierte Zeichen.  Man kann aber auch mit @code{\markup}
Textbeschriftungsobjekte zu dem selbstdefinierten Zeichen
hinzufügen:

@example
\mark \markup@{ \box A1 @}
@end example

@cindex Segno
@cindex Coda
@cindex D.S. al Fine
@cindex Dal Segno
@cindex Fermate
@cindex Noten-Schriftzeichen
@cindex Schriftzeichen, Notenschrift
@cindex Musikbuchstaben

@funindex \musicglyph

Musikbuchstaben (wie etwa das Segno-Zeichen) können mit dem Befehl
@code{\musicglyph} als ein
@code{\mark}-Zeichen definierte werden:

@lilypond[quote,verbatim]
\relative c' {
  c1 \mark \markup { \musicglyph "scripts.segno" }
  c1 \mark \markup { \musicglyph "scripts.coda" }
  c1 \mark \markup { \musicglyph "scripts.ufermata" }
  c1
}
@end lilypond

@noindent
Siehe @ref{The Emmentaler font}, wo alle Symbole gezeigt sind, die
mit dem Befehl @code{\musicglyph} ausgegeben werden können.

Übliche Veränderungen der Positionierung von Übungszeichen finden
sich in @ref{Formatting text}.  Zu noch präzieserer Kontrolle
siehe @code{break-alignable-interface} in @ref{Aligning objects}.

Die Datei @file{scm/translation-functions.scm} enthält die Definitionen
von @code{format-mark-numbers} und @code{format-mark-letters}.  Sie
können als Anregung für andere Formatierungsfunktionen genommen werden.

@morerefs
Notationsreferenz:
@ref{The Emmentaler font},
@ref{Formatting text},
@ref{Aligning objects}.

Installierte Dateien:
@file{scm/translation-functions.scm}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{MarkEvent},
@rinternals{Mark_engraver},
@rinternals{RehearsalMark}.


@node Special rhythmic concerns
@subsection Besondere rhythmische Fragen

@menu
* Grace notes::
* Aligning to cadenzas::
* Time administration::
@end menu

@node Grace notes
@unnumberedsubsubsec Verzierungen

@funindex \grace
@funindex \slashedGrace
@funindex \acciaccatura
@funindex \appoggiatura

@cindex Verzierungen
@cindex Ziernoten
@cindex Vorhalt
@cindex Vorschlag
@cindex Ornamente

Verzierungen, mit dem Befehl @code{\grace} notiert, sind ausgeschriebene
Ornamente.  Sie werden in einer kleineren Schriftgröße gesetzt und nehmen
keine logische Zeit im Takt ein.

@lilypond[quote,verbatim]
\relative {
  c''4 \grace b16 a4(
  \grace { b16 c16 } a2)
}
@end lilypond

Es gibt drei Arten von Verzierungen:
den Vorschlag (engl. acciaccatura), eine angebundene Verzierungsnote
mit einem Schrägstrich durch den Hals, und den Vorhalt (engl. appoggiatura),
welcher den Wert der Hauptnote um seinen eigenen Wert verkürzt und
ohne Schrägstrich notiert wird.  Man kann einen Vorschlag auch mit
Schrägstrich durch den Hals, aber ohne Legatobogen notieren.  Diese
Verzierung wird mit dem Befehl @code{\slashedGrace} notiert und wird
zwischen Noten notiert, die selber einen Legatobogen haben.

@lilypond[quote,verbatim]
\relative {
  \acciaccatura d''8 c4
  \appoggiatura e8 d4
  \acciaccatura { g16 f } e2
  \slashedGrace a,8 g4
  \slashedGrace b16 a4(
  \slashedGrace b8 a2)
}
@end lilypond

Die Position von Verzierungen ist zwischen Notensystemen
synchronisiert.  Im nächsten Beispiel stehen im einen
System zwei 16-Noten für jede 8-Note des zweiten Systems:

@lilypond[quote,relative=2,verbatim]
<< \new Staff { e2 \grace { c16 d e f } e2 }
   \new Staff { c2 \grace { g8 b } c2 } >>
@end lilypond

@funindex \afterGrace

@cindex Verzierung, danach
@cindex Nachschlag

Wenn Sie eine Note mit einer Verzierung abschließen wollen, müssen
Sie den @code{\afterGrace}-Befehl benutzen.  Er benötigt zwei
Argumente: die Hauptnote und die Verzierung, die nach der
Hauptnote folgen soll:

@lilypond[quote,verbatim]
\relative { c''1 \afterGrace d1 { c16[ d] } c1 }
@end lilypond

Damit wird die Verzierung mit einem Abstand von der Hauptnote
gesetzt, der 3/4 der Dauer der Hauptnote entspricht.  Dieser
Standard kann durch Definition von @code{afterGraceFraction}
verändert werden.  Das nächste Beispiel zeigt, wie sich
der Abstand verändert, wenn der Wert 3/4, 15/16 und 1/2 der
Hauptnote beträgt.

@lilypond[quote,verbatim]
<<
  \new Staff \relative {
    c''1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff \relative {
    #(define afterGraceFraction (cons 15 16))
    c''1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff \relative {
    #(define afterGraceFraction (cons 1 2))
    c''1 \afterGrace d1 { c16[ d] } c1
  }
>>
@end lilypond

Der Abstand zwischen der Hauptnote und der Verzierung kann auch
mit unsichtbaren Noten beeinflusst werden.  Im nächsten Beispiel
wird die Verzierung mit einem Abstand von 7/8 zur Hauptnote
gesetzt.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  << { d1^\trill_( }
     { s2 s4. \grace { c16 d } } >>
  c1)
}
@end lilypond

@cindex Veränderung von Verzierungsnoten
@cindex Verzierungen verändern
@cindex Verzierungen, Aussehen verändern

Ein @code{\grace}-Notenabschnitt wird nach besonderen Satzregeln
gesetzt, um z. B. kleinere Noten zu benutzen und die Richtung der
Hälse einzustellen.  Veränderungen am Layout müssen also innerhalb
des Verzierungsausdrucks gesetzt werden, damit sie auch eine Auswirkung haben.  Die Veränderungen müssen auch innerhalb des
Verzierungsausdrucks rückgängig gemacht werden.  In diesem
Fall wird die Richtung der Hälse geändert und dann wieder der
Standard eingestellt:

@lilypond[quote,verbatim]
\new Voice \relative {
  \acciaccatura {
    \stemDown
    f''16->
    \stemNeutral
  }
  g4 e c2
}
@end lilypond

@cindex Hals, mit Schrägstrich
@cindex durchgestrichener Hals
@cindex Notenhals, durchgestrichen

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/using-grace-note-slashes-with-normal-heads.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/tweaking-grace-layout-within-music.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/redefining-grace-note-global-defaults.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{snippets/positioning-grace-notes-with-floating-space.ly}

@morerefs
Glossar:
@rglos{grace notes},
@rglos{acciaccatura},
@rglos{appoggiatura}.

Notationsreferenz:
@ref{Scaling durations},
@ref{Manual beams}.

Installierte Dateien:
@file{ly/grace-init.ly}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{GraceMusic},
@rinternals{Grace_beam_engraver},
@rinternals{Grace_engraver},
@rinternals{Grace_spacing_engraver}.

@knownissues
@cindex Vorschlag, mehrere Noten
@cindex mehrnotiger Vorschlag
@cindex Synchronisation von Verzierungen
@cindex Verzierungen, Synchronisation

Ein Vorschlag (@emph{acciaccatura}) mit mehreren Noten und
Balken wird ohne den Schrägstrich gesetzt und sieht einem
Vorhalt (@emph{appoggiatura}) sehr ähnlich.

@c TODO Add link to LSR snippet to add slash when available

Die Synchronisation von Verzierungen kann auch zu Überraschungen führen.
Auch andere Symbole der Systeme, wie Vorzeichen, Taktlinien usw., werden
synchronisiert. Vorsicht ist geboten, wenn nur in bestimmten Systemen
Verzierungen vorkommen:

@lilypond[quote,verbatim]
<<
  \new Staff \relative { e''4 \section \grace c16 d2. }
  \new Staff \relative { c''4 \section d2. }
>>
@end lilypond

@noindent
Dem kann abgeholfen werden, indem unsichtbare Verzierungsnoten der selben
Länge in die anderen Systeme gesetzt werden. Im obigen Beispiel müsste
also

@lilypond[quote,ragged-right,relative=2,verbatim,fragment]
<<
  \new Staff { e4 \section \grace c16 d2. }
  \new Staff { c4 \section \grace s16 d2. }
>>
@end lilypond

@noindent
gesetzt werden.

Der Einsatz von Verzierungsnoten innerhalb von Stimmen-Kontexten
kann den Notensatz der Stimme verwirren.  Dieses Problem kann
umgangen werden, indem man eine Note oder Pause zwischen dem
@code{Voice}-Befehl und der Verzierungsnote setzt.

@lilypond[quote,verbatim]
accMusic = {
  \acciaccatura { f8 } e8 r8 \acciaccatura { f8 } e8 r4
}

\new Staff {
  <<
    \new Voice {
      \relative c'' {
        r8 r8 \voiceOne \accMusic \oneVoice r8 |
        r8 \voiceOne r8 \accMusic \oneVoice r8 |
      }
    }
    \new Voice {
      \relative c' {
        s8 s8 \voiceTwo \accMusic \oneVoice s8 |
        s8 \voiceTwo r8 \accMusic \oneVoice s8 |
      }
    }
  >>
}
@end lilypond

Verzierungsabschnitte sollten nur innerhalb von sequentiellen musikalischen
Ausdrücken benützt werden. Wenn sie ineinandergeschachtelt werden, kann es
zu Fehlermeldungen oder Abstürzen kommen.

Jede Verzierungsnote in der MIDI-Ausgabe hat ein Viertel der Dauer ihrer
wirklichen Dauer.  Wenn die addierte Dauer der Verzierungsnoten länger als
die Dauer der vorhergehenden Note dauert, wird der Fehler
@qq{@code{Going back in MIDI time}} ausgegeben.  Man muss die Verzierungsnoten
entweder kürzer machen, etwa:

@example
\acciaccatura @{ c'8[ d' e' f' g'] @}
@end example

@noindent
wird zu:

@example
\acciaccatura @{ c'16[ d' e' f' g'] @}
@end example

@noindent
oder die Dauern explizit ändern:

@example
\acciaccatura @{ \scaleDurations 1/2 @{ c'8[ d' e' f' g'] @} @}
@end example

Siehe @ref{Scaling durations}.


@node Aligning to cadenzas
@unnumberedsubsubsec An Kadenzen ausrichten

@cindex Kadenz, Ausrichten an
@cindex Ausrichten an Kadenz

In Orchesterpartituren stellen Kadenzen ein besonderes Problem dar:
Wenn in der Partitur ein Instrument eine Kadenz spielt, die notiert
wird, müssen die anderen Stimmen genau die entsprechende Anzahl Noten
überspringen, damit sie nicht zu früh oder zu spät einsetzen.

Eine Lösung ist es, die Funktionen @code{mmrest-of-length} oder
@code{skip-of-length} zu benutzen.  Diese Scheme-Funktionen
brauchen einen definierten Notenabschnitt (eine Variable)
als Argument und produzieren entweder Ganztaktpausen oder leere
Takte, die genauso lang sind wie der Notenabschnitt.

@lilypond[verbatim,quote]
MyCadenza = \relative {
  c'4 d8 e f g g4
  f2 g4 g
}

\new GrandStaff <<
  \new Staff {
    \MyCadenza c'1
    \MyCadenza c'1
  }
  \new Staff {
    #(mmrest-of-length MyCadenza)
    c'1
    #(skip-of-length MyCadenza)
    c'1
  }
>>
@end lilypond

@morerefs
Glossar:
@rglos{cadenza}.

Schnipsel:
@rlsr{Rhythms}.



@node Time administration
@unnumberedsubsubsec Verwaltung der Zeiteinheiten

@cindex Verwaltung der Zeiteinheiten
@cindex Zeit (in der Partitur)
@cindex Noten ohne Takt
@cindex Takt, Noten ohne
@cindex Noten ohne Metrum
@cindex Metrum, Noten ohne

@funindex currentBarNumber
@funindex measurePosition
@funindex measureLength

Die Zeit in einer Partitur wird vom @code{Timing_translator}
verwaltet, der sich in den Standardeinstellungen im @code{Score}-Kontext
befindet.  Eine Parallelbezeichnung, @code{Timing}, wird
dem Kontext hinzugefügt, in dem sich @code{Timing_translator}
befindet.  Um sicherzugehen, dass @code{Timing} erhältlich ist,
muss man eventuell den enthaltenden Kontext manuell erstellen
(also etwa einen @code{Voice}- oder @code{Staff}-Kontext.

Die folgenden Eigenschaften von @code{Timing} werden eingesetzt,
um die Zeit in Partituren zu verwalten.

@cindex Taktnummer

@table @code
@item currentBarNumber (aktuelle Taktnummer)
Die gerade aktuelle Taktzahl.  Für ein Beispiel, das die Benutzung
dieser Eigenschaft zeigt, siehe @ref{Bar numbers}.

@item measureLength (Taktlänge)
Die Länge der Takte mit der aktuellen Taktart.  In einem 4/4-Takt
ist sie 1, in einem 6/8-Takt 3/4.  Dieser Wert bestimmt, wann
eine Taktlinie gezogen wird und wie automatische Balken erstellt
werden sollen.

@item measurePosition (Taktposition)
Der Schlag im Takt zum aktuellen Moment.  Dieser Wert wird
zurückgesetzt, indem @code{measureLength} (die Taktlänge) abgezogen
wird, wenn der Wert von @code{measureLength} erreicht oder
überschritten wird.  Wenn das passiert, wird der Zähler
@code{currentBarNumber} (aktuelle Taktnummer) erhöht.

@item timing (Zeitberechnung)
Wenn auf wahr gesetzt, werden die oben genannten Variablen
zu jedem Zeitpunkt aktualisiert.  Wenn auf falsch gesetzt,
bleibt der Engraver unendlich lange im aktuellen Takt.

@end table

Zeitverwaltung kann geändert werden, indem man diese Variablen
direkt beeinflusst.  Im nächsten Beispiel wird die normale
Taktart mit 4/4 angegeben, aber @code{measureLength} wird
auf 5/4 gesetzt.  An der Stelle 4/8 des dritten Taktes wird die
Taktposition (@code{measurePosition}) um 1/8 auf 5/8 erhöht, so
dass der Takt im Ergebnis 1/8 kürzer ist.  Die nächste Taktlinie
wird dann auch bei 9/8 gezogen und nicht bei 5/4.

@lilypond[quote,verbatim,relative=1]
\set Score.measureLength = \musicLength 4*5
c1 c4
c1 c4
c4 c4
\set Score.measurePosition = \musicLength 8*5
b4 b4 b8
c4 c1
@end lilypond

@noindent
Wie das Beispiel zeigt, erstellt @code{ly:make-moment n m}
die Dauer Zähler/Nenner einer ganzen Note.  Zum Beispiel heißt
@code{ly:make-moment 1 8} die Dauer einer Achtelnote, und
@code{ly:make-moment 7 16} die Dauer von sieben Sechszehntelnoten.


@morerefs
Notationsreferenz:
@ref{Bar numbers},
@ref{Unmetered music}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Timing_translator},
@rinternals{Score}
