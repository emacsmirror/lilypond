@c -*- coding: utf-8; mode: texinfo; documentlanguage: es -*-

@ignore
    Translation of GIT committish: 1ea236291f96dbe583059f64a9b3048b413b6e0b

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c \version "2.19.22"

@node Tweaking output
@chapter Trucar la salida

Este capítulo trata de cómo modificar la salida.  LilyPond es
extremadamente configurable; prácticamente todos los fragmentos de
la salida se pueden cambiar.


@menu
* Tweaking basics::
* The Internals Reference manual::
* Appearance of objects::
* Placement of objects::
* Vertical spacing::
* Collisions of objects::
* Further tweaking::
@end menu

@node Tweaking basics
@section Elementos de trucaje

@menu
* Introduction to tweaks::
* Objects and interfaces::
* Naming conventions of objects and properties::
* Tweaking methods::
@end menu

@node Introduction to tweaks
@subsection Introducción al trucaje

El @q{Trucaje} es un término de LilyPond que denota los diversos
métodos que el usuario tiene a su disposición para modificar el
proceso de interpretación del archivo de entrada y cambiar la
apariencia de la salida impresa.  Algunos trucos son muy fáciles
de usar; otros son más complejos.  Pero en su conjunto, los
métodos de trucaje disponibles posibilitan conseguir casi
cualquier apariencia que deseemos en la música impresa.

En esta sección vamos a estudiar los conceptos básicos que se
necesitan para comprender el trucaje.  Más tarde daremos un amplio
abanico de instrucciones listas para usar, que podrá simplemente
copiar para obtener el mismo efecto en sus partituras, y al mismo
tiempo mostraremos la forma de construir dichas instrucciones para
que pueda aprender cómo desarrollar sus propios trucos.

Antes de comenzar con este capítulo, quizá quiera echar un vistazo
a la sección @ref{Contexts and engravers}, pues los Contextos, los
Grabadores y las Propiedades que se contienen en ellos son
fundamentales para comprender y construir los trucos.

@node Objects and interfaces
@subsection Objetos e interfaces

@cindex objeto
@cindex grob
@cindex objeto de extensión
@cindex interfaz
@cindex propiedades de objetos
@cindex objeto, propiedades de
@cindex layout (disposición), objeto de
@cindex objeto de disposición (layout)

El trucaje consiste en modificar el funcionamiento y estructura
interna del programa LilyPond, por lo que en primer lugar
introduciremos algunos términos que se usan para describir dichas
operaciones y estructuras internas.

El término @q{Objeto} es un término genérico que se usa para
referirse a la multitud de estructuras internas que LilyPond
construye durante el procesado de un archivo de entrada.  Así,
cuando se encuentra una instrucción como @code{\new Staff}, se
construye un objeto nuevo del tipo @code{Staff}.  Entonces, este
objeto @code{Staff} contiene todas las propiedades asociadas con
ese pentagrama en particular, por ejemplo, su nombre y su
armadura, además de otros detalles de los grabadores que se han
asignado para que operen dentro del contexto del pentagrama.  De
forma similar, hay objetos que guardan las propiedades de todos
los demás contextos, como objetos de @code{Voice}, objetos de
@code{Score}, objetos de @code{Lyrics}, así como objetos que
representan todos los elementos notacionales como líneas
divisorias, cabezas de las notas, ligaduras, indicaciones
dinámicas, etc.  Cada objeto tiene su propio conjunto de valores
de propiedad.

Ciertos tipos de objetos reciben nombres especiales.  Los objetos
que representan elementos de notación sobre la salida impresa como
cabezas de notas, plicas, ligaduras de expresión y de unión,
digitaciones, claves, etc. reciben el nombre de @q{Objetos de
presentación}, a menudo conocidos como @q{Objetos gráficos}, o
abreviadamente @q{Grobs}.  Aún son objetos en el sentido genérico
que hemos mencionado, y también todos ellos tienen propiedades
asociadas, como su posición, tamaño, color,etc.

Ciertos objetos de presentación son aún más especializados.  Las
ligaduras de fraseo, los reguladores, las indicaciones de octava
alta y baja, y muchos otros objetos gráficos no están situados en
un solo lugar: tienen un punto de inicio, un punto de final, y
quizá otras propiedades relacionadas con su forma.  Los objetos
con una forma extendida como estos, reciben el nombre de «Objetos
de extensión» o @q{Spanners}.

Los «spanners» no se pueden trucar después de haberse creado.
Ello incluye tanto a @code{StaffSymbol} como a
@code{LedgerLineSpanner}, que continúan a lo largo de toda la
partitura (excepto si se les da fin con la instrucción
@code{\stopStaff} y se vuelven a crear con la instrucción
@code{\startStaff}.

Es más, existen objetos gráficos @q{abstractos} que no impriman
nada por sí mismos, sino que más bien recopilan, posicionan y
gestionan a otros objetos gráficos.  Los ejemplos usuales son
@code{DynamicLineSpanner}, @code{BreakAlignment},
@code{NoteColumn}, @code{VerticalAxisGroup},
@code{NonMusicalPaperColumn} y similares.  Más tarde veremos cómo
se usan algunos de ellos.

Aún falta por explicar qué son los @q{Interfaces}.  Muchos
objetos, incluso aunque son bastante diferentes, comparten
funcionalidades que se deben procesar de la misma manera.  Por
ejemplo, todos los objetos gráficos tienen un color, un tamaño,
una posición, etc., y todas estas propiedades se procesan de la
misma forma durante la interpretación del archivo de entrada por
parte de LilyPond.  Para simplificar estas operaciones internas,
estas acciones y propiedades comunes se agrupan en un objeto
llamado @code{grob-interface}, interface de grob.  Hay muchas
otras agrupaciones de propiedades comunes como ésta, y cada una
recibe un nombre que acaba en @code{interface}.  En total hay más
de 100 interfaces de éstos.  Veremos más adelante porqué esto es
del interés y de utilidad para el usuario.

Estos son, en fin, los términos principales relativos a los
objetos que vamos a utilizar en este capítulo.

@node Naming conventions of objects and properties
@subsection Convenciones de nombres de objetos y propiedades

@cindex nomenclatura, convenciones de, para objetos
@cindex nomenclatura, convenciones de, para propiedades
@cindex objetos, convenciones de nomenclatura
@cindex propiedades, convenciones de nomenclatura

Ya hemos visto ciertas convenciones de nomenclatura de objetos, en la
sección @ref{Contexts and engravers}.  En este lugar, para más fácil
referencia, presentamos una lista de los tipos de objetos y
propiedades más comunes, junto con las convenciones según las cuales
reciben su nombre, y un par de ejemplos de nombres reales.  Hemos
utilizado una @q{A} mayúscula para denotar cualquier carácter
alfabético en mayúsculas, y @q{aaa} para cualquier número de
caracteres alfabéticos en minúscula.  Otros caracteres se utilizan
literalmente como están.

@multitable @columnfractions .33 .33 .33
@headitem Objeto o tipo de propiedad
  @tab Convención de nomenclatura
  @tab Ejemplos
@item Contextos
  @tab Aaaa o AaaaAaaaAaaa
  @tab Staff, GrandStaff
@item Objetos de presentación
  @tab Aaaa o AaaaAaaaAaaa
  @tab Slur, NoteHead
@item Grabadores
  @tab Aaaa_aaa_engraver
  @tab Clef_engraver, Note_heads_engraver
@item Interfaces
  @tab aaa-aaa-interface
  @tab grob-interface, break-aligned-interface
@item Propiedades de contextos
  @tab aaa o aaaAaaaAaaa
  @tab alignAboveContext, skipBars
@item Propiedades de objetos de presentación
  @tab aaa o aaa-aaa-aaa
  @tab direction, beam-thickness
@end multitable

Como podremos ver en breve, las propiedades de distintos tipos de
objeto se modifican por parte de diferentes instrucciones; así pues,
es útil poder reconocer los tipos de objetos y propiedades
a partir de sus nombres.

@morerefs
Referencia de la notación:
@rnotationnamed{Modifying properties, Modificar las propiedades}.


@node Tweaking methods
@subsection Métodos de trucaje

@cindex trucaje, métodos de

@strong{La instrucción \override}

@menu
* The override command::
* The revert command::
* The once prefix::
* The overrideProperty command::
* The tweak command::
* The single prefix::
@end menu

@node The override command
@unnumberedsubsubsec La instrucción @code{\override}

@cindex override, instrucción
@cindex override (sobreescritura), sintaxis de

@funindex \override

Ya hemos visto las instrucciones @code{\set} y @code{\with}, que
se usan para cambiar las propiedades de los @strong{contextos} y
para quitar y poner @strong{grabadores}, en
@ref{Modifying context properties} y
@ref{Adding and removing engravers}.  Ahora debemos examinar
algunas otras instrucciones importantes.

La instrucción que cambia las propiedades de los @strong{objetos
de presentación} es @code{\override}.  Puesto que esta instrucción
debe modificar propiedades internas que se encuentran en un lugar
profundo dentro de LilyPond, su sintaxis no es tan simple como la
del resto de las instrucciones que hemos usado hasta ahora.  Tiene
que saber exactamente qué propiedad de qué objeto y en qué
contexto se debe modificar, y cuál debe ser su nuevo valor.
Veamos cómo se hace.

La sintaxis genérica de esta instrucción es:

@example
\override @var{Contexto}.@var{ObjetoDePresentación}.@var{propiedad-de-presentación} =
#@var{valor}
@end example

@noindent
Esto establecerá la propiedad de nombre
@var{propiedad-de-presentación} del objeto de presentación con el
nombre @var{ObjetoDePresentación}, que es miembro del contexto
@var{Contexto}, al valor @var{valor}.

El @var{contexto} se puede omitir (y normalmente así es) cuando el
contexto requerido se encuentra implicado sin ambigüedad y es uno
de los contextos del nivel más bajo, es decir: @code{Voice},
@code{ChordNames} o @code{Lyrics}, y lo omitiremos en muchos de
los ejemplos siguientes.  Veremos más tarde cuándo se debe
especificar.

Las últimas secciones tratan de forma exhaustiva las propiedades y
sus valores, véase @ref{Types of properties}.  Pero en esta
sección usaremos sólo unas cuantas propiedades y valores sencillos
que sean fáciles de entender, para ilustrar el formato y la
utilización de estas instrucciones.

Las expresiones principales de LilyPond son elementos musicales
como notas y duraciones, así como cadenas y elementos de marcado.  Las expresiones
más específicas como números, símbolos y listas se
procesan en el @q{modo de Scheme}, que se invoca por medio del
prefijo @samp{#} escrito antes del valor.  Para ver más información acerca del
modo de Scheme, consulte @rextendnamed{LilyPond Scheme syntax, Sintaxis del Scheme de LilyPond}.

@code{\override} es la instrucción de uso más común dentro del
trucaje, y durante la mayor parte del resto de este capítulo
presentaremos ejemplos de cómo se usa.  A continuación hay un
ejemplo sencillo para cambiar el color de una cabeza:

@cindex color, propiedad, ejemplo
@cindex NoteHead, ejemplo de sobreescritura

@lilypond[quote,ragged-right,verbatim]
\relative {
  c'4 d
  \override NoteHead.color = "red"
  e4 f |
  \override NoteHead.color = "green"
  g4 a b c |
}
@end lilypond


@node The revert command
@unnumberedsubsubsec La instrucción @code{\revert}

@cindex revert, instrucción

@funindex \revert

Una vez sobreescrita, la propiedad retiene su nuevo valor hasta
que se sobreescribe de nuevo o se encuentra una instrucción
@code{\revert}.  La instrucción @code{\revert} tiene la siguiente
sintaxis y ocasiona que el valor de la propiedad se devuelva a su
valor predeterminado original; observe que no es a su valor previo
si se han utilizado varias instrucciones @code{\override}.

@example
\revert @var{Contexto}.@var{ObjetoDePresentación}.@var{propiedad-de-presentación}
@end example

Una vez más, igual que @var{Contexto} dentro de la instrucción
@code{\override}, con frecuencia no es necesario especificar el
@var{Contexto}.  Se omitirá en muchos de los ejemplos siguientes.
Aquí devolvemos el color de la cabeza al valor predeterminado para
las dos últimas notas:

@cindex color, propiedad, ejemplo
@cindex NoteHead, ejemplo de sobreescritura

@lilypond[quote,ragged-right,verbatim]
\relative {
  c'4 d
  \override NoteHead.color = "red"
  e4 f |
  \override NoteHead.color = "green"
  g4 a
  \revert NoteHead.color
  b4 c |
}
@end lilypond


@node The once prefix
@unnumberedsubsubsec El prefijo @code{\once}

@funindex \once

@code{\override}, @code{\revert}, @code{\set} y @code{\unset} se
pueden hacer preceder por @code{\once}.  Esto hace que la
instrucción sea efectiva solamente durante el tiempo musical en
curso y antes de que la propiedad vuelva a tener otra vez su valor
anterior (que puede ser distinto de su valor predeterminado si aún
se está aplicando otra instrucción @code{\override} de
sobreescritura).  Utilizando el mismo ejemplo, podemos cambiar el
color de una sola nota de la siguiente manera:

@cindex color, propiedad, ejemplo
@cindex NoteHead, ejemplo de sobreescritura

@lilypond[quote,verbatim]
\relative {
  c'4 d
  \override NoteHead.color = "red"
  e4 f |
  \once \override NoteHead.color = "green"
  g4 a
  \once \revert NoteHead.color
  b c |
  \revert NoteHead.color
  f2 c |
}
@end lilypond

El prefijo @code{\once} también se puede usar delante de muchas
instrucciones predefinidas para limitar su efecto a un solo
momento musical:

@lilypond[quote,verbatim]
\relative {
  c'4( d)
  \once \slurDashed
  e4( f) |
  g4( a)
  \once \hideNotes
  b( c) |
}
@end lilypond

@node The overrideProperty command
@unnumberedsubsubsec La instrucción @code{\overrideProperty}

@cindex overrideProperty, instrucción

@funindex \overrideProperty

Hay otra forma para la instrucción de sobreescritura,
@code{\overrideProperty}, que ocasionalmente es necesaria.  La
mencionamos aquí con un propósito de exhaustividad, pero para ver
más detalles consulte @rextendnamed{Difficult tweaks, Trucos difíciles}.
@c Maybe explain in a later iteration  -td


@node The tweak command
@unnumberedsubsubsec La instrucción @code{\tweak}

@cindex tweak, instrucción

@funindex \tweak

La última instrucción de trucaje que está disponible es
@code{\tweak}.  Se debe utilizar cuando varios objetos tienen
lugar en el mismo momento musical pero solo queremos cambiar las
propiedades de algunos de ellos, como una sola nota dentro de un
acorde.  El uso de @code{\override} para la sobreescritura
afectaría a todas las notas del acorde, mientras que @code{\tweak}
afecta solamente al siguiente elemento del flujo de entrada.

He aquí un ejemplo.  Suponga que queremos cambiar el tamaño de la
cabeza de la nota intermedia (el Mi) en un acorde de Do mayor.  En
primer lugar, veamos lo que haría @code{\once \override}:

@cindex font-size, propiedad, ejemplo
@cindex NoteHead, ejemplo de sobreescritura

@lilypond[quote,ragged-right,verbatim]
\relative {
  <c' e g>4
  \once \override NoteHead.font-size = #-3
  <c e g>4
  <c e g>4
}
@end lilypond

Vemos que la sobreescritura con override afecta a @emph{todas} las
cabezas de las notas del acorde.  Esto es así porque todas las
notas de un acorde ocurren en el mismo @emph{momento musical}, y
la acción de @code{\once} es aplicar la sobreescritura a todos los
objetos de presentación del tipo especificado que ocurren en el
mismo momento musical que la propia instrucción de sobreescritura
@code{\override}.

La instrucción @code{\tweak} opera de una forma distinta.  Actúa
sobre el elemento inmediatamente siguiente dentro del flujo de
entrada.  En su forma más sencilla es efectivo solamente sobre
objetos que se crean directamente a partir del elemento siguiente,
en esencia las cabezas y las articulaciones.

Así pues, volviendo a nuestro ejemplo, el tamaño de la nota
intermedia se cambiaría de la siguiente forma:

@cindex font-size, propiedad, ejemplo
@cindex @code{\tweak}, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  <c' e g>4
  <c \tweak font-size #-3 e g>4
}
@end lilypond

Observe que la sintaxis de @code{\tweak} no es igual que la de
@code{\override}.  El contexto no se debe especificar; de hecho,
generaría un error hacerlo.  Tanto el contexto como el objeto de
presentación están implícitos por el siguiente elemento del flujo
de entrada.  Observe también que no debe haber un signo igual. Así
que la sintaxis de la instrucción @code{\tweak} en su forma
sencilla es:

@example
\tweak @var{propiedad-de-presentación} #@var{valor}
@end example

Una instrucción @code{\tweak} también se puede usar para modificar
sólo una de una serie de articulaciones, como se muestra aquí:

@cindex color, propiedad, ejemplo
@cindex @code{\tweak}, ejemplo

@lilypond[quote,fragment,ragged-right,verbatim]
a'4^"Black"
  -\tweak color "red" ^"Red"
  -\tweak color "green" _"Green"
@end lilypond

@noindent
Observe que la instrucción @code{\tweak} debe venir precedida de
una marca de articulación porque la propia expresión trucada debe
aplicarse como una articulación.  En el caso de más de una
sobreescritura de dirección (@code{^} o @code{_}), gana la
sobreescritura situada más a la izquierda porque se aplica en
último lugar.

@cindex @code{\tweak}, Accidental
@cindex @code{\tweak}, specific layout object

Los objetos tales como plicas y alteraciones accidentales se crean
más tarde, y no directamente a partir del evento que viene a
continuación.  Aún es posible utilizar @code{\tweak} sobre tales
objetos creados indirectamente mediante el nombrado explícito del
objeto de presentación, siempre y cuando LilyPond pueda rastrear
su origen hasta el evento original:

@lilypond[quote,fragment,ragged-right,verbatim]
<\tweak Accidental.color "red"   cis''4
 \tweak Accidental.color "green" es''
 g''>
@end lilypond

Esta forma extensa de la instrucción @code{\tweak} se puede describir
como
@example
\tweak @var{LayoutObject}.@var{layout-property} #@var{value}
@end example

@cindex grupos especiales anidados
@cindex tresillos anidados
@cindex corchete del grupo especial
@cindex corchete de tresillo
@cindex grupo especial, corchete de
@cindex tresillo, corchete de

@funindex TupletBracket

La instrucción @code{\tweak} también se debe usar para cambiar la
apariencia de uno solo de un conjunto de grupos especiales
anidados que comiencen en el mismo instante musical.  En el
siguiente ejemplo, el corchete del tresillo largo y el primero de
los tres corchetes cortos empiezan en el mismo momento musical, y
por ello cualquier instrucción @code{\override} se aplicaría a los
dos.  En el ejemplo se usa @code{\tweak} para distinguir entre
ellos.  La primera instrucción @code{\tweak} especifica que el
corchete del tresillo largo se debe colocar por encima de las
notas y el segundo especifica que el número del tresillo se debe
imprimir en rojo sobre el corchete del primer tresillo corto.

@cindex @code{\tweak}, ejemplo
@cindex direction, propiedad, ejemplo
@cindex color, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative c'' {
  \tweak direction #up
  \tuplet 3/4 {
    \tweak color "red"
    \tuplet 3/2 { c8[ c c] }
    \tuplet 3/2 { c8[ c c] }
    \tuplet 3/2 { c8[ c c] }
  }
}
@end lilypond

Si los grupos anidados no comienzan en el mismo momento, su
apariencia se puede modificar de la forma usual mediante
instrucciones @code{\override}:

@cindex text, propiedad, ejemplo
@cindex tuplet-number, función, ejemplo
@cindex transparent, propiedad, ejemplo
@cindex TupletNumber, ejemplo de sobreescritura

@lilypond[quote,ragged-right,verbatim]
\relative {
  \tuplet 3/2 { c'8[ c c] }
  \once \override TupletNumber.text = #tuplet-number::calc-fraction-text
  \tuplet 3/2 {
    c8[ c]
    c8[ c]
    \once \override TupletNumber.transparent = ##t
    \tuplet 3/2 { c8[ c c] }
    \tuplet 3/2 { c8[ c c] }
  }
}
@end lilypond


@morerefs
Referencia de la notación:
@rnotationnamed{The tweak command, La instrucción tweak}.

@node The single prefix
@unnumberedsubsubsec El prefijo @code{\single}

@funindex \single
@cindex truco, generado a partir de una sobreescritura

Supongamos que queremos enfatizar la cabeza de algunas notas
trazándolas de color e incrementando su tamaño, y supongamos
también hemos programado una función para hacer la tarea más
cómoda:

@lilypond[quote,verbatim]
emphNoteHead = {
  \override NoteHead.color = "red"
  \override NoteHead.font-size = 2
}
\relative {
  c''4 a \once \emphNoteHead f d |
}
@end lilypond

El prefijo @code{\once} funciona perfectamente para enfatizar
notas únicas o acordes completos, pero no se puede usar para
enfatizar una sola nota @emph{dentro} de un acorde.  Anteriormente
vimos cómo se puede usar la instrucción @code{\tweak} para
hacerlo, véase @ref{The tweak command}.  Pero @code{\tweak} no se puede usar con una
función; ahí es donde entra la instrucción @code{\single}:

@lilypond[quote,verbatim]
emphNoteHead = {
  \override NoteHead.color = "red"
  \override NoteHead.font-size = 2
}
\relative {
   <c'' a \single \emphNoteHead f d>4
}
@end lilypond

En resumen, @code{\single} convierte las sobreescrituras hechas
con@code{\override} en trucos hechos con @code{\tweak} de tal
manera que cuando hay varios objetos en el mismo instante de
tiempo musical (como las notas de un acorde), @code{\single}
afecta a una única nota, la que se genera por la expresión que
sigue inmediatamente, a diferencia de @code{\once} que afecta a
todos esos objetos.

El uso de @code{\single} de esta forma con una función cualquiera
que contenga solamente sobreescrituras, puede aplicarse a las
notas individuales de un acorde.  Sin embargo, @code{\single} no
convierte @code{\revert}, @code{\set} ni @code{\unset} en trucos
de @code{\tweak}.

@morerefs
Manual de aprendizaje:
@ref{The tweak command},
@ref{Using variables for layout adjustments}.


@node The Internals Reference manual
@section Manual de referencia de funcionamiento interno

@cindex Referencia de funcionamiento interno

@menu
* Properties of layout objects::
* Properties found in interfaces::
* Types of properties::
@end menu

@node Properties of layout objects
@subsection Propiedades de los objetos de presentación

@cindex propiedades de los objetos de presentación
@cindex propiedades de los grobs
@cindex grobs, propiedades de
@cindex presentación, propiedades de los objetos de
@cindex Referencia de funcionamiento interno

Suponga que tiene una partitura con una ligadura de expresión que
para su gusto es demasiado fina y quiere trazarla un poco más
gruesa. ¿Cómo debe proceder?  Ya sabe, por las afirmaciones
anteriores acerca de la flexibilidad de LilyPond, que tal
posibilidad existe, y seguramente piensa que una cierta
instrucción de sobreescritura @code{\override} será necesaria.
Pero ¿existe una propiedad de grosor para las ligaduras? y, si la
hay, ¿cómo se puede modificar?  Aquí es donde interviene el Manual
de Funcionamiento Interno.  Contiene toda la información que puede
necesitar para construir ésta y todas las demás instrucciones
@code{\override}, de sobreescritura.

Una advertencia antes de dirigir nuestra mirada a la referencia de
funcionamiento interno.  Éste es un documento de
@strong{referencia}, lo que significa que hay pocas o ninguna
explicación en él: su propósito es presentar la información de
forma precisa y concisa.  Por tanto, podrá parecerle desalentador
a primera vista.  ¡No se preocupe!  La guía y las explicaciones
que presentamos aquí le permitirán extraer la información de la
referencia de funcionamiento interno por sí mismo con tan sólo
algo de práctica.

@cindex sobreescritura, ejemplo de
@cindex Referencia de Funcionamiento Interno, ejemplo de utilización
@cindex @code{\addlyrics}, ejemplo

Utilicemos un ejemplo concreto con un sencillo fragmento de música
real:

@c Mozart, dúo, núm. 7 de La Flauta Mágica

@lilypond[quote,verbatim]
{
  \key es \major
  \time 6/8
  \relative {
    r4 bes'8 bes[( g]) g |
    g8[( es]) es d[( f]) as |
    as8 g
  }
  \addlyrics {
    The man who | feels love's sweet e -- | mo -- tion
  }
}
@end lilypond

Suponga ahora que decidimos que nos gustan las ligaduras algo más
gruesas.  ¿Es posible?  La ligadura es, ciertamente, un objeto de
presentación, así que la cuestión es @q{¿Hay una propiedad
perteneciente a las ligaduras de expresión que controle su
grosor?}  Para responder a esta pregunta debemos mirar el manual
de Referencia de Funcionamiento Interno, abreviadamente
RFI@footnote{@strong{IR} (Internals Reference) en inglés}.

El RFI de la versión de LilyPond que está usando se puede
encontrar en la página web de LilyPond en
@uref{https://lilypond.org}.  Vaya a la página de la documentación
y siga el enlace Manual de Referencia de Funcionamiento Interno
(RFI).  Para nuestros propósitos pedagógicos sería mejor que
utilizase la versión en HTML, no la @q{en una sola página} ni el
PDF.  Para que los siguientes párrafos tengan algún sentido deberá
consultarlo realmente al tiempo que lee.

@c Link names in English as those pages are not yet translated. FV
Bajo el encabezamiento @strong{Top} podrá ver cinco enlaces.
Seleccione el enlace @emph{Backend}, que es donde se encuentra la
información sobre los objetos de presentación.  Una vez allí, bajo
el encabezamiento @strong{Backend}, siga el enlace @emph{All
layout objects}.  La página que aparece relaciona todos los
objetos de presentación que se usan en su versión de LilyPond, en
orden alfabético.  Siga el enlace Slur (ligadura de expresión), y
aparecerán relacionadas las propiedades de las ligaduras de
expresión o Slurs.

Una forma alternativa de encontrar esta página es a partir de la
Referencia de la Notación.  En una de las páginas que tratan de
las ligaduras de expresión podrá encontrar un enlace al manual de
referencia del funcionamiento interno.  Este enlace le llevará
directamente a esta página, aunque si tiene una idea del nombre
del objeto de presentación que pretende trucar, le resultará más
fácil ir directamente al RFI y buscar allí.

Esta página sobre las ligaduras de expresión dentro del manual RFI
nos dice en primer lugar que los objetos Slur se crean por el
grabador Slur_engraver.  A continuación relaciona los ajustes
estándar.  Navegue por ellos buscando una propiedad que pudiera
controlar el grosor de las ligaduras, y encontrará

@example
thickness (number)
     1.2
     Line thickness, generally measured in line-thickness
@end example

Esto promete ser una buena opción para cambiar el grosor.  Nos
dice que el valor de @code{thickness} es un simple @emph{número},
que el valor predeterminado es 1.2, y que las unidades están
dentro de otra propiedad llamada @code{line-thickness}.

Como dijimos con anterioridad, existen entre pocas y ninguna
explicación en el RFI, pero ya tenemos información suficiente para
probar a cambiar el grosor de la ligadura.  Vemos que el nombre
del objeto de presentación es @code{Slur}, que el nombre de la
propiedad que debemos cambiar es @code{thickness} y que el nuevo
valor debe ser un número algo más grande que 1.2 si queremos hacer
las ligaduras más gruesas.

Ahora podemos construir la instrucción de sobreescritura
@code{\override} simplemente mediante la sustitución de los
valores que hemos encontrado para los nombres, omitiendo el
contexto.  Usaremos un valor muy grande para el grosor al
principio, para estar seguros de que la instrucción está
funcionando.  Obtenemos lo siguiente:

@example
\override Slur.thickness = #5.0
@end example

¡No olvide el @code{#'} antes del nombre de la propiedad
y@tie{}@code{#} antes del valor nuevo!

La pregunta final es @q{¿Dónde se debe colocar esta instrucción?}
Aunque nos falta seguridad y estamos todavía aprendiendo, la mejor
respuesta es: @q{Dentro de la música, antes de la primera ligadura
y cerca de ella.}  Hagámoslo así:

@cindex Slur, ejemplo de sobreescritura
@cindex thickness, propiedad, ejemplo

@lilypond[quote,verbatim]
{
  \key es \major
  \time 6/8
  \relative {
    % Increase thickness of all following slurs from 1.2 to 5.0
    \override Slur.thickness = #5.0
    r4 bes'8 bes[( g]) g |
    g8[( es]) es d[( f]) as |
    as8 g
  }
  \addlyrics {
    The man who | feels love's sweet e -- | mo -- tion
  }
}
@end lilypond

@noindent
y podemos ver que la ligadura, es sin duda, más pesada.

Así pues, ésta es la forma básica de construir instrucciones
@code{\override} o de sobreescritura.  Existen unas cuantas
complicaciones más con las que nos encontraremos en secciones
posteriores, pero ahora conoce todos los principios esenciales que
necesita para hacerlo por sí mismo (aunque aún necesita algo de
práctica).  La cual vendrá proporcionada por los ejemplos que
vienen a continuación.

@subsubsubheading Búsqueda del contexto

@cindex contexto, encontrar
@cindex contexto, buscar el, correcto

Pero en primer lugar ¿qué habría pasado si hubiésemos tenido que
especificar el contexto? ¿Cuál sería?  Podemos suponer que las
ligaduras están en el contexto de Voz, por estar claramente
asociados de manera estrecha con las líneas individuales de
música, pero ¿podemos estar seguros?  Para averiguarlo, vayamos de
nuevo al inicio de la página del RFI que describe las ligaduras
(Slur), donde dice @q{Slur objects are created by the following engraver(s): Slur_engraver.}
(«Los objetos de ligadura de expresión se crean por: el grabador
Slur»).  Así pues, las ligaduras de expresión se crean en
cualquier contexto en el que se encuentre el grabador
@code{Slur_engraver}.  Siga el enlace a la página del grabador
@code{Slur_engraver}.  Al final del todo, dice que el grabador
@code{Slur_engraver} es parte de siete contextos de voz, incluido
el contexto de voz estándar, @code{Voice}, por lo que nuestra
suposición era acertada.  Y a causa de que @code{Voice} es uno de
los contextos de más bajo nivel que se encuentra implícito sin
ambigüedad por el hecho de que estamos escribiendo notas, podemos
omitirlo en este lugar concreto.

@subsubsubheading Sobreescritura por una sola vez

@cindex sobreescritura por una sola vez
@cindex once override

@funindex \once

Como puede ver, @emph{todas} las ligaduras son más gruesas en el
último ejemplo.  Pero ¿y si quisiéramos que solamente la primera
ligadura fuese más gruesa?  Esto se consigue con la instrucción o
prefijo @code{\once}.  Colocado inmediatamente antes de la
instrucción @code{\override} ocasiona que solamente cambie la
ligadura que comienza en la nota @strong{inmediata siguiente}.  Si
la nota inmediata siguiente no da inicio a una ligadura, la
instrucción no tiene ningún efecto en absoluto: no se recuerda
hasta que se encuentre alguna ligadura, sino que simplemente se
ignora.  Así pues, la instrucción que lleva @code{\once} se debe
reposicionar de la forma siguiente:

@cindex Slur, ejemplo de sobreescritura
@cindex thickness, propiedad, ejemplo

@lilypond[quote,verbatim]
{
  \key es \major
  \time 6/8
  \relative {
    r4 bes'8
    % Increase thickness of immediately following slur only
    \once \override Slur.thickness = #5.0
    bes8[( g]) g |
    g8[( es]) es d[( f]) as |
    as8 g
  }
  \addlyrics {
    The man who | feels love's sweet e -- | mo -- tion
  }
}
@end lilypond

@noindent
Hemos hecho que ahora solamente la primera ligadura sea más
gruesa.

La instrucción o prefijo @code{\once} también se puede usar antes
de la instrucción @code{\set}.

@subsubsubheading Recuperación del ajuste

@cindex revertir
@cindex predeterminadas, recuperar las propiedades

@funindex \revert

Finalmente ¿y si quisiéramos que solamente las dos primeras
ligaduras fuesen más gruesas?  En fin; podríamos usar dos
instrucciones, cada una de ellas precedida por el prefijo
@code{\once}, situadas inmediatamente antes de cada una de las
notas en que comienzan las ligaduras:

@cindex Slur, ejemplo de sobreescritura
@cindex thickness, propiedad, ejemplo

@lilypond[quote,verbatim]
{
  \key es \major
  \time 6/8
  \relative {
    r4 bes'8
    % Increase thickness of immediately following slur only
    \once \override Slur.thickness = #5.0
    bes[( g]) g |
    % Increase thickness of immediately following slur only
    \once \override Slur.thickness = #5.0
    g8[( es]) es d[( f]) as |
    as8 g
  }
  \addlyrics {
    The man who | feels love's sweet e -- | mo -- tion
  }
}
@end lilypond

@noindent
o podríamos omitir la instrucción prefija @code{\once} y utilizar
la instrucción @code{\revert} (restablecer) para devolver la
propiedad del grosor, @code{thickness}, a su valor predeterminado
después de la segunda ligadura:

@cindex Slur, ejemplo de sobreescritura
@cindex thickness, propiedad, ejemplo

@lilypond[quote,verbatim]
{
  \key es \major
  \time 6/8
  \relative {
    r4 bes'8
    % Increase thickness of all following slurs from 1.2 to 5.0
    \override Slur.thickness = #5.0
    bes[( g]) g |
    g8[( es]) es
    % Revert thickness of all following slurs to default of 1.2
    \revert Slur.thickness
    d8[( f]) as |
    as8 g
  }
  \addlyrics {
    The man who | feels love's sweet e -- | mo -- tion
  }
}
@end lilypond

@noindent
la instrucción @code{\revert} se puede utilizar para devolver
cualquier propiedad que se haya cambiado con @code{\override} a su
valor predeterminado.  Puede utilizar el método que mejor se
adapte a aquello que quiere hacer.

Así finaliza nuestra introducción al manual de RFI, y el método
básico de trucaje.  A continuación, en las últimas secciones de
este capítulo encontrará varios ejemplos, en parte para
introducirle en algunas de las posibilidades adicionales del
manual RFI, y en parte para proporcionarle más práctica en cómo
extraer información de él.  Estos ejemplos irán conteniendo cada
vez menos palabras de guía y explicación.

@node Properties found in interfaces
@subsection Propiedades de los interfaces

@cindex interface
@cindex propiedades de los interfaces
@cindex interfaces, propiedades

Suponga ahora que queremos imprimir la letra de la canción en
cursiva.  ¿Qué forma de instrucción @code{\override} necesitamos
para hacerlo?  En primer lugar miramos en la página del RFI que
relaciona todos los objetos, @q{All layout objects}, como antes, y
buscamos un objeto que pueda controlar la letra de la canción.
Encontramos @code{LyricText}, que parece adecuado.  Al seguir este
enlace se presentan las propiedades ajustables para el texto de la
letra.  Estos incluyen @code{font-series} y @code{font-size}, pero
nada que pudiera aplicar una forma cursiva.  Esto es porque la
propiedad de la forma es común a todos los objetos de fuente
tipográfica, y por tanto, en vez de incluirlo en cada uno de los
objetos de presentación, se agrupa junto con otras propiedades
comunes similares y se deposita en un @strong{Interface}, el
interface de las fuentes tipográficas @code{font-interface}.

Por tanto, ahora necesitamos aprender cómo encontrar las
propiedades de los interfaces, y descubrir qué objetos usan estas
propiedades de interface.

Mire de nuevo la página del RFI que describe a LyricText.  Al
final de la página hay una lista de enlaces a los interfaces que
LyricText contempla.  La lista tiene siete elementos, entre ellos
@code{font-interface}.  Al seguir este enlace llegamos a las
propiedades asociadas con este interface, que también son
propiedades de todos los objetos que lo llevan, entre ellos
LyricText.

Ahora vemos todas las propiedades ajustables por el usuario que
controlan las tipografías, entre ellas @code{font-shape(symbol)},
donde @code{symbol} se puede establecer a @code{upright} (recta),
@code{italics} (cursiva)o @code{caps} (mayúsculas pequeñas).

Observará que @code{font-series} y @code{font-size} también se
encuentran aquí relacionadas.  Esto inmediatamente hace que surja
la pregunta: ¿Por qué están las propiedades comunes de tipografía
@code{font-series} y @code{font-size} relacionadas bajo
@code{LyricText} así como bajo el interface @code{font-interface}
pero @code{font-shape} no lo está?  La respuesta es que
@code{font-series} y @code{font-size} se cambian a partir de sus
valores predeterminados globales cuando se crea un objeto
@code{LyricText}, pero @code{font-shape} no lo hace.  Entonces los
elementos de la lista @code{LyricText} le dicen los valores para
esas dos propiedades que son de aplicación para @code{LyricText}.
Otros objetos que contemplan @code{font-interface} establecerán
dichas propiedades de forma diferente cuando se crean.

Veamos si ahora podemos construir la instrucción @code{\override}
para cambiar la letra a cursiva.  El objeto es @code{LyricText},
la propiedad es @code{font-shape} y el valor es @code{italic}.
Igual que antes, omitiremos el contexto.

Como nota aparte, aunque es importante, observe que ciertas
propiedades toman valores que son símbolos, como @code{italic}, y
deben ir precedidos de un apóstrofo, @code{'}.  Los símbolos se
leen a continuación internamente por parte de LilyPond.  Tenga en
cuenta la diferencia con las cadenas de texto arbitrarias, que
aparecerían como @code{"una cadena de texto"}; para ver más
detalles sobre los símbolos y las cadenas, consulte
@rextendnamed{Scheme tutorial, Tutorial de Scheme}.

Así pues, la instrucción @code{\override} necesaria para imprimir
la letra en cursiva, es:

@example
\override LyricText.font-shape = #'italic
@end example

@noindent
Esto debe escribirse justo delante de la letra a la que debe
afectar, de esta forma:

@cindex font-shape, propiedad, ejemplo
@cindex italic, ejemplo
@cindex LyricText, ejemplo de sobreescritura
@cindex @code{\addlyrics}, ejemplo

@lilypond[quote,ragged-right,verbatim]
{
  \key es \major
  \time 6/8
  \relative {
    r4 bes'8 bes[( g]) g |
    g8[( es]) es d[( f]) as |
    as8 g
  }
  \addlyrics {
    \override LyricText.font-shape = #'italic
    The man who | feels love's sweet e -- | mo -- tion
  }
}
@end lilypond

@noindent
y toda la letra se imprime en cursiva.

@warning{Dentro de la letra, deje siempre espacios entre la sílaba
final y la llave de cierre.}


@morerefs
Manual de Extensión:
@rextendnamed{Scheme tutorial, Tutorial de Scheme}.


@node Types of properties
@subsection Tipos de propiedades

@cindex propiedades, tipos de

Hasta ahora hemos visto dos tipos de propiedad:: @code{número} y
@code{símbolo}.  Para que sea válido, el valor que se da a una
propiedad debe ser del tipo correcto y obedecer las reglas de
dicho tipo.  El tipo de la propiedad se muestra siempre entre
paréntesis después del nombre de la propiedad en el RFI.  He aquí
una lista de los tipos que podrá necesitar, junto con las reglas
de dicho tipo, y algunos ejemplos.  Debe escribir siempre un
símbolo de almohadilla, @code{#}, por supuesto, delante de estos
valores cuando se introducen en la instrucción @code{\override},
incluso si el propio valor ya comienza por@tie{}@code{#}.
Solamente ofrecemos aquí ejemplos para constantes; si quiere
calcular un valor usando Scheme, consulte @rextendnamed{Calculations in Scheme, Cálculos en
Scheme}.

@multitable @columnfractions .2 .45 .35
@headitem Tipo de propiedad
  @tab Reglas
  @tab Ejemplos
@item Booleano
  @tab Verdadero o Falso, representado por #t o #f
  @tab @code{#t}, @code{#f}
@item Dimensión (en espacios de pentagrama)
  @tab Un número decimal (en unidades de espacios de pentagrama)
  @tab @code{2.5}, @code{0.34}
@item Dirección
  @tab Una constante válida de dirección o su equivalente numérico
  (@code{0} o @code{CENTER} indican una dirección neutra)
  @tab @code{LEFT}, @code{CENTER}, @code{UP},
       @code{1}, @w{@code{-1}}
@item Entero
  @tab Un número entero positivo
  @tab @code{3}, @code{-1}
@item Lista
  @tab Una secuencia de constantes o símbolos separados por espacios,
  encerrado entre paréntesis
  y precedido de un apóstrofo o comilla simple
  @tab @code{'(left-edge staff-bar)}, @code{'(1)}, @code{'()},
       @code{'(1.0 0.25 0.5)}
@item Marcado
  @tab Cualquier elemento válido de marcado de texto
  @tab @code{\markup @{ \italic "cresc." @}}, @code{"gaita"}
@item Momento
  @tab Una fracción de redonda construida con la función make-moment
  @tab @code{(ly:make-moment 1/4)},
       @code{(ly:make-moment 3/8)}
@item Número
  @tab Cualquier valor positivo o negativo, posiblemente decimal
  @tab @code{3}, @w{@code{-2.45}}
@item Pareja (de números)
  @tab Dos números separados por un @q{espacio . espacio}, encerrado entre paréntesis y precedido de un apóstrofo
  @tab @code{'(2 . 3.5)}, @code{'(0.1 . -3.2)}
@item Símbolo
  @tab Cualquiera del conjunto de símbolos permitidos para esa propiedad, precedido de un apóstrofo
  @tab @code{'italic}, @code{'inside}
@item Desconocido
  @tab Un procedimiento o @code{#f} para no producir ninguna acción
  @tab @code{bend::print}, @code{ly:text-interface::print},
       @code{#f}
@item Vector
  @tab Constantes
  encerradas entre @code{#(}@dots{}@code{)}.
  @tab @code{#(#t #t #f)}
@end multitable


@morerefs
Manual de Extensión:
@rextendnamed{Scheme tutorial, Tutorial de Scheme}.


@node Appearance of objects
@section Apariencia de los objetos

Ahora vamos a poner en práctica lo que hemos aprendido con unos
cuantos ejemplos que muestran cómo se pueden usar los trucos para
cambiar el aspecto de la música impresa.

@menu
* Visibility and color of objects::
* Size of objects::
* Length and thickness of objects::
@end menu

@node Visibility and color of objects
@subsection Visibilidad y color de los objetos

Dentro de un uso educativo de la música, podríamos desear imprimir
una partitura con ciertos elementos omitidos como ejercicio para
el alumno, a quien se le pide que los complete.  A la manera de
ejemplo sencillo, supongamos que el ejercicio es escribir las
líneas divisorias que faltan en un fragmento musical.  Pero las
líneas divisorias normalmente se insertan automáticamente. ¿Cómo
hacemos para que no se impriman?

Antes de enredarnos con esto, recordemos que las propiedades de
los objetos se agrupan en lo que hemos llamado @emph{interfaces}
(véase @ref{Properties found in interfaces}).  Esto es simplemente
agrupar las propiedades que se pueden usar juntas para trucar un
objeto gráfico: si una de ellas se necesita para un objeto,
también las otras.  Así, ciertos objetos usan las propiedades de
algunos interfaces, otros usan las de otros interfaces.  Los
interfaces que contienen las propiedades que un determinado grob
necesita se encuentran relacionadas en el manual RFI al final de
la página que describe dicho grob, y esas propiedades se pueden
ver mirando dichos interfaces.

Hemos explicado cómo encontrar información sobre los grobs en
@ref{Properties of layout objects}.  Usando el mismo
enfoque, vamos al RFI para buscar el objeto de presentación que
imprime las líneas divisorias.  A través del enlace @emph{Backend}
y @emph{All layout objects} encontramos que hay un objeto de
presentación llamado @code{BarLine}.  Entre sus propiedades se
encuentran dos que controlan la visibilidad:
@code{break-visibility} y @code{stencil}.  Las líneas divisorias
también contemplan un número de interfaces, entre ellos el
@code{grob-interface}, donde podemos encontrar las propiedades
@code{transparent} y @code{color}.  Todas ellas pueden afectar la
visibilidad de las barras de compás (y, por supuesto, por
extensión, también la de muchos otros objetos de presentación).
Vamos a considerar cada uno de ellos por orden.

@menu
* The stencil property::
* The break-visibility property::
* The transparent property::
* The color property::
@end menu

@node The stencil property
@unnumberedsubsubsec La propiedad @code{stencil} (sello)

@cindex stencil (sello), propiedad

Esta propiedad controla la apariencia de las barras de compás
mediante la especificación del símbolo (o «glifo») que se debe
imprimir.  Igual que como otras muchas propiedades, se puede
establecer de forma que no imprima nada ajustando su valor a
@code{#f}.  Vamos a probarlo, como antes, omitiendo el Contexto
implícito, @code{Voice}:

@cindex BarLine, ejemplo de sobreescritura
@cindex stencil, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override BarLine.stencil = ##f
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

Las barras de compás todavía se imprimen.  ¿Qué es lo que está
mal?  Vuelva al RFI y mire de nuevo la página que ofrece las
propiedades del objeto BarLine.  Al principio de la página dice
@qq{Barline objects are created by the following engraver(s): Bar_engraver.} (los objetos
Barline se crean por el grabador Bar_engraver).  Vaya a la página
del grabador @code{Bar_engraver} siguiendo el enlace.  Al final da
una lista de contextos en los que el grabador de líneas divisorias
opera.  Todos ellos son del tipo @code{Staff}, y así la razón de
que la instrucción @code{\override} no funcionara como
esperábamos, es porque @code{Barline} no se encuentra en el
contexto predeterminado @code{Voice}.  Si el contexto no se
especifica correctamente, la instrucción simplemente no funciona.
No se produce ningún mensaje de error, y no se registra nada en el
archivo log de registro.  Vamos a intentar corregirlo escribiendo
el contexto correcto:

@cindex BarLine, ejemplo de sobreescritura
@cindex stencil, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override Staff.BarLine.stencil = ##f
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

Ahora las barras de compás han desaparecido.  La operación de
fijar la propiedad @code{stencil} al valor @code{#f} es tan
frecuente que existe una abreviatura para ella, llamada
@code{\omit} (omitir):
@funindex \omit

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \omit Staff.BarLine
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

Sin embargo, observe que el establecimiento de la propiedad
@code{stencil} al valor @code{#f} produce errores cuando las se
requieren las dimensiones del objeto para un procesamiento
correcto.  Por ejemplo, se generan errores si la propiedad
@code{stencil} del objeto @code{NoteHead} se establece al valor
@code{#f}.  Si es el caso, podemos en vez de ello utilizar la
función @code{point-stencil}, que establece el sello a un objeto
con tamaño nulo:

@lilypond[quote,verbatim]
\relative {
  c''4 c
  \once \override NoteHead.stencil = #point-stencil
  c4 c
}
@end lilypond

@node The break-visibility property
@unnumberedsubsubsec The @code{break-visibility} (visibilidad en el salto)

@cindex break-visibility, propiedad

Vemos en las propiedades de @code{BarLine} que aparecen en el RFI
que la propiedad @code{break-visibility} requiere un vector de
tres valores booleanos.  Controlan respectivamente si las barras
de compás se imprimen al final de una línea, en mitad de una
línea, y al principio de las líneas.  Para nuestro ejemplo,
queremos que todas las barras de compás se supriman, por lo que el
valor que necesitamos es @code{#(#f #f #f)} (disponible también
bajo el nombre @code{all-invisible}, todas invisibles).  Vamos a
probarlo, recordando incluir el contexto de @code{Staff}.  Observe
también que al escribir este valor tenemos @code{##} antes del
paréntesis de apertura.  Se necesita un @code{#} como parte de la
sintaxis de las contantes vectoriales, y el primer símbolo de
almohadilla@tie{}@code{#} se necesita, como siempre, para preceder
el valor en sí dentro de la instrucción @code{\override}.

@cindex BarLine, ejemplo de sobreescritura
@cindex break-visibility, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override Staff.BarLine.break-visibility = ##(#f #f #f)
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

Y podemos ver que esto también quita todas las líneas divisorias.

@node The transparent property
@unnumberedsubsubsec La propiedad @code{transparent} (transparente)

@cindex transparent, propiedad
@cindex transparencia

En la relación de propiedades que se especifican en la página del
@code{grob-interface} del RFI podemos ver que la propiedad
@code{transparent} es un valor booleano.  Esto se debe establecer
a @code{#t} para hacer que el grob sea transparente.  En el
ejemplo siguiente vamos a hacer que la indicación de compás, y no
las líneas divisorias, sea transparente.  Para hacerlo tenemos que
buscar el nombre del grob de la indicación de compás.  Volviendo a
la página @q{All layout objects} del RFI, buscamos las propiedades
del objeto de presentación @code{TimeSignature}.  Se produce por
parte del grabador @code{Time_signature_engraver} que como puede
comprobar vive dentro del contexto de @code{Staff} y también
contempla el interface @code{grob-interface}.  Así pues, la
instrucción que hace transparente a la indicación de compás es:

@cindex TimeSignature, ejemplo de sobreescritura
@cindex transparent, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override Staff.TimeSignature.transparent = ##t
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

@noindent
Una vez más, el establecimiento de la propiedad @code{transparent}
es una operación bastante frecuente, de modo que tenemos una
abreviatura llamada @code{\hide} (ocultar):
@funindex \hide

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \hide Staff.TimeSignature
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

@noindent
En ninguno de los dos casos aparece ya la indicación de compás,
pero esta instrucción deja una separación en el lugar donde antes
estaba la indicación de compás.  Quizá esto es lo que queremos
para un ejercicio en que el alumno deba escribirlo, pero en otras
circunstancias esta separación podría no ser deseable.  En vez de
eso, para quitarla, el stencil o «sello» de la indicación de
compás se debe establecer al valor @code{#f}:

@cindex TimeSignature, ejemplo de sobreescritura
@cindex stencil, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \omit Staff.TimeSignature
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

@noindent
y la diferencia es obvia: al establecer el sello al valor
@code{#f} (posiblemente por medio de @code{\omit}) quitamos el
objeto por completo; al hacer el objeto @code{transparent} (lo que
puede hacerse utilizando @code{\hide}) lo dejamos donde está, pero
lo hacemos invisible.

@node The color property
@unnumberedsubsubsec La propiedad @code{color}

@cindex color, propiedad

Para finalizar, intentemos hacer invisibles las barras de compás
pintándolas de color blanco (hay un problema relacionado, que
consiste en que la línea divisoria blanca puede tapar o no tapar
las líneas del pentagrama a las que cruza.  Podrá observar en
algunos de los ejemplos que aparecen a continuación, que esto
sucede de forma impredecible.  Los detalles sobre por qué esto
ocurre así, y cómo controlarlo, se estudian en @rnotationnamed{Painting objects white, Pintar los
objetos de blanco}; de momento estamos estudiando el color, por lo
que le rogamos que acepte esta limitación por ahora).

El interface @code{grob-interface} especifica que la propiedad del
color es una lista, pero no hay ninguna explicación sobre lo que
debe ir en esa lista.  La lista que requiere es realmente una
lista de valores en unidades internas, pero para evitar tener que
saber cuáles son, se ofrecen varias vías para la especificación de
los colores.  La primera forma es utilizar uno de los colores
@q{CSS} predefinidos que están relacionados en la @rnotationnamed{List of colors, Lista de
colores}.  Para poner las líneas divisorias de color blanco,
escribimos:

@cindex BarLine, ejemplo de sobreescritura
@cindex color, propiedad, ejemplo
@cindex color, css
@cindex css, colores

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override Staff.BarLine.color = "white"
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

@noindent
y de nuevo podemos comprobar que las barras de compás no son
visibles.  Observe que @emph{white} no viene precedido de un
apóstrofo: no es un símbolo, sino una cadena de caracteres,
mapeado a una lista predefinida de valores internos.  A este
respecto, la sintaxis de LilyPond refleja el
@uref{https://www.w3.org/Style/CSS/, lenguaje CSS} que se usa
habitualmente en las páginas web; además de los nombres
predefinidos, podemos especificar un código de color hexadecimal:

@cindex BarLine, ejemplo de sobreescritura
@cindex color, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override Staff.BarLine.color = "#FFFFFF"
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}

@end lilypond

@noindent
Podemos incluso definir dicho color como variable, y después usar
esa variable como una definición de propiedad.  Como es al mismo
tiempo una variable de LilyPond y un objeto de Scheme, puede ir
prefijada por una barra invertida o un símbolo de almohadilla sin
distinción alguna:

@lilypond[quote,ragged-right,verbatim]
whiteVar = "#FFFFFF"

\relative {
  \time 12/16
  \override Staff.BarLine.color = \whiteVar
  c''4 b8 c d16 c d8 |
  \override Staff.BarLine.color = #whiteVar
  g,8 a16 b8 c d4 e16 |
  e8
}

@end lilypond

@cindex rgb, colores
@cindex color, rgb

@funindex rgb-color

Otra manera de añadir colores a nuestra partitura es mediante el
uso de una función.  Existen dos funciones útiles para ello; una
es la función @code{x11-color}, que utilizaremos más adelante.  La
otra es la función @code{rgb-color}, que presenta la lógica
interna de LilyPond: toma tres argumentos que dan las intensidades
de los colores rojo, verde y azul.  Cada uno de ellos toma valores
entre 0 y 1. Así pues, para establecer el color a rojo, el valor
sería @code{(rgb-color 1 0 0)} y para el blanco sería
@code{(rgb-color 1 1 1)}:

@cindex BarLine, ejemplo de sobreescritura
@cindex color, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override Staff.BarLine.color = #(rgb-color 1 1 1)
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

@noindent
Observe que en este caso, toda la llamada a la función debe estar
entre paréntesis.  Lo mismo vale para la función @code{x11-color}
que pasamos anteriormente por alto.

@cindex colores, de X11
@cindex X11, colores

@funindex x11-color

@code{x11-color}, de nuevo, lleva a cabo una asignación de nombres
de color predefinidos a valores internos, pero ofrece muchas más
alternativas que los nombres de CSS, como se ve en
@rnotationnamed{List of colors, Lista de colores}).  Por ejemplo, el conjunto de colores de
X11 incluye una completa gama de tonos de gris, cuyos nombres van
desde el negro, @code{'grey0}, hasta el blanco, @code{'grey100},
en pasos de@tie{}1.  Vamos a ilustrar esto estableciendo todos los
objetos de nuetro ejemplo en distintos tonos de gris:

@cindex StaffSymbol, ejemplo de sobreescritura
@cindex TimeSignature, ejemplo de sobreescritura
@cindex Clef, ejemplo de sobreescritura
@cindex NoteHead, ejemplo de sobreescritura
@cindex Stem, ejemplo de sobreescritura
@cindex BarLine, ejemplo de sobreescritura
@cindex color property, ejemplo
@cindex x11-color, ejemplo de utilización

@lilypond[quote,ragged-right,verbatim]
\relative {
  \time 12/16
  \override Staff.StaffSymbol.color = #(x11-color 'grey30)
  \override Staff.TimeSignature.color = #(x11-color 'grey60)
  \override Staff.Clef.color = #(x11-color 'grey60)
  \override Voice.NoteHead.color = #(x11-color 'grey85)
  \override Voice.Stem.color = #(x11-color 'grey85)
  \override Staff.BarLine.color = #(x11-color 'grey10)
  c''4 b8 c d16 c d8 |
  g,8 a16 b8 c d4 e16 |
  e8
}
@end lilypond

@noindent
Observe los contextos asociados con cada uno de los objetos de
presentación.  Es importante que estén correctamente escritos, o
las instrucciones ¡no funcionarán!  Recuerde que el contexto es
aquel en que se encuentra el grabador correspondiente.  El
contesto predeterminado para los grabadores puede encontrarse
empezando por el objeto de presentación, de ahí al grabador que lo
produce, y en la página del grabador del RFI aparece en qué
contexto se puede encontrar normalmente el grabador.


@node Size of objects
@subsection Tamaño de los objetos

@cindex cambiar el tamaño de los objetos
@cindex tamaño de los objetos
@cindex objetos, tamaño de
@cindex objetos, cambiar el tamaño de

Empezaremos examinando de nuevo un ejemplo anterior (véase
@ref{Nesting music expressions}) que nos mostraba cómo
introducir un pentagrama temporal, como en un @rglos{ossia}.

@cindex alignAboveContext, propiedad, ejemplo
@cindex @code{\with}, ejemplo

@lilypond[quote,ragged-right,verbatim]
\new Staff ="main" {
  \relative {
    r4 g'8 g c4 c8 d |
    e4 r8
    <<
      { f8 c c }
      \new Staff \with {
        alignAboveContext = "main" }
      { f8 f c }
    >>
    r4 |
  }
}
@end lilypond

Los fragmentos de Ossia se escriben normalmente sin clave ni
compás, y por lo normal se imprimen más pequeños que el pentagrama
principal.  Ya sabemos cómo quitar la clave y el compás:
simplemente establecemos el sello de cada uno de ellos a
@code{#f}, como sigue:

@cindex alignAboveContext, propiedad, ejemplo
@cindex @code{\with}, ejemplo
@funindex \omit
@cindex Clef, ejemplo de sobreescritura
@cindex TimeSignature, ejemplo de sobreescritura

@lilypond[quote,ragged-right,verbatim]
\new Staff ="main" {
  \relative {
    r4 g'8 g c4 c8 d |
    e4 r8
    <<
      { f8 c c }
      \new Staff \with {
        alignAboveContext = "main"
      }
      {
        \omit Staff.Clef
        \omit Staff.TimeSignature
        { f8 f c }
      }
    >>
    r4 |
  }
}
@end lilypond

@noindent
donde el par de llaves adicional después de la cláusula
@code{\with} es necesario para asegurar que la sobreescritura
encerrada y la música se aplican al pentagrama de ossia.

Pero ¿cuál es la diferencia entre modificar el contexto de
pentagrama usando @code{\with} y modificar los sellos de clave y
de compás con \override, o en este caso @code{\omit}?  La
diferencia principal es que los cambios que se realizan en una
cláusula @code{\with} se hacen en el momento en que se crea el
contexto, y permanecen activos como valores
@strong{predeterminados} durante toda la duración de dicho
contexto, mientras que las instrucciones @code{\set} o
@code{\override} incluidas dentro de la música son dinámicas:
hacen cambios sincronizados con un punto concreto de la música.
Si los cambios se deshacen o se devuelven mediante @code{\unset} o
@code{\revert} volverán a su valor predeterminado que será el
establecido en la cláusula @code{\with}, o si no se ha establecido
ninguno en este lugar, los valores predeterminados normales.

Ciertas propiedades de contexto se pueden modificar solamente
dentro de cláusulas @code{\with}.  Son aquellas propiedades que no
se pueden cambiar después de que el contexto se ha creado.
@code{alignAboveContext} y su compañero, @code{alignBelowContext},
son dos de tales propiedades: una vez que el pentagrama se ha
creado, su alineación está decidida y no tendría sentido intentar
cambiarla más tarde.

Los valores predeterminados de las propiedades de los objetos de
presentación también se pueden establecer dentro de cláusulas
@code{\with}.  Simplemente utilice la instrucción @code{\override}
normal dejando aparte el nombre del contexto, ya que está definido
sin ambigüedad como el contexto que la cláusula @code{\with} está
modificando.  De hecho, se producirá un error si se especifica un
contexto en este lugar.

Así pues, podemos reemplazar el ejemplo anterior con

@cindex alignAboveContext, propiedad, ejemplo
@cindex @code{\with}, example
@cindex Clef, ejemplo de sobreescritura
@cindex TimeSignature, ejemplo de sobreescritura

@lilypond[quote,ragged-right,verbatim]
\new Staff ="main" {
  \relative {
    r4 g'8 g c4 c8 d |
    e4 r8
    <<
      { f8 c c }
      \new Staff \with {
        alignAboveContext = "main"
        % Don't print clefs in this staff
        \override Clef.stencil = ##f
        % Don't print time signatures in this staff
        \override TimeSignature.stencil = ##f
      }
      { f8 f c }
    >>
    r4 |
  }
}
@end lilypond

Resulta que también podemos emplear aquí las abreviaturas
@code{\hide} y @code{\omit} para fijar la propiedad
@code{transparent} y borrar el @code{stencil}, lo que conduce al
resultado siguiente:

@lilypond[quote,ragged-right,verbatim]
\new Staff ="main" {
  \relative {
    r4 g'8 g c4 c8 d |
    e4 r8
    <<
      { f8 c c }
      \new Staff \with {
        alignAboveContext = "main"
        % Don't print clefs in this staff
        \omit Clef
        % Don't print time signatures in this staff
        \omit TimeSignature
      }
      { f8 f c }
    >>
    r4 |
  }
}
@end lilypond

Finalmente llegamos a la forma de cambiar el tamaño de los objetos
de presentación.

Ciertos objetos de presentación se crean como glifos sacados de
una fuente tipográfica.  Entre ellos se encuentran las cabezas,
alteraciones, elementos de marcado, claves, indicaciones de
compás, indicaciones dinámicas y la letra de las canciones.  Su
tamaño se cambia mediante la modificación de la propiedad
@code{font-size}, como veremos en breve.  Otros objetos de
presentación como ligaduras de unión y de expresión (en general,
objetos de extensión) se trazan individualmente, por lo que no hay
un tamaño de tipografía @code{font-size} asociado a ellos.  Estos
objetos generalmente derivan su tamaño de los objetos a los que
están adosados, y por ello normalmente no hay necesidad de
cambiarles el tamaño manualmente.  Aún otras propiedades como la
longitud de las plicas y las barras de compás, el grosor de las
barras de corchea y otras líneas, y la separación de las líneas
del pentagrama se deben modificar de otras formas especiales.

Volviendo al ejemplo del ossia, vamos a cambiar en primer lugar el
tamaño de la tipografía.  Podemos hacerlo de dos formas.  Podemos
cambiar el tamaño de las tipografías de cada uno de los tipos de
objeto como las cabezas (@code{NoteHead}s) con instrucciones como

@example
\override NoteHead.font-size = #-2
@end example

o podemos cambiar el tamaño de todas las tipografías estableciendo
una propiedad especial, @code{fontSize}, utilizando @code{\set}, o
mediante su inclusión dentro de una cláusula @code{\with} (pero
sin el @code{\set}).

@example
\set fontSize = #-2
@end example

Los dos enunciados producirían una reducción del tamaño de la
tipografía en dos pasos a partir de su valor previo, donde cada
paso reduce o aumenta el tamaño aproximadamente en un 12%.

Vamos a probarlo en nuestro ejemplo del ossia:

@cindex alignAboveContext, propiedad, ejemplo
@cindex @code{\with}, ejemplo
@cindex Clef, ejemplo de sobreescritura
@cindex TimeSignature, ejemplo de sobreescritura
@cindex fontSize, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\new Staff ="main" {
  \relative {
    r4 g'8 g c4 c8 d |
    e4 r8
    <<
      { f8 c c }
      \new Staff \with {
        alignAboveContext = "main"
        \omit Clef
        \omit TimeSignature
        % Reduce all font sizes by ~24%
        fontSize = #-2
      }
      { f8 f c }
    >>
    r4 |
  }
}
@end lilypond

Aún no está demasiado bien.  Las cabezas y los corchetes de las
notas son más pequeños, pero las plicas son demasiado largas en
proporción, y las líneas del pentagrama están demasiado separadas
entre sí.  Se debe reducir su escala en proporción a la reducción
de la tipografía.  El siguiente apartado trata sobre cómo se hace
esto.

@node Length and thickness of objects
@subsection Longitud y grosor de los objetos

@cindex distancias
@cindex grosor
@cindex longitud
@cindex magstep
@cindex tamaño, cambiar
@cindex plica, cambiar la longitud
@cindex pentagrama, cambiar la separación de las líneas

Las distancias y longitudes en LilyPond se miden generalmente en
espacios de pentagrama, la distancia entre líneas adyacentes de la
pauta (o de manera ocasional medios espacios), mientras que la
mayoría de las propiedades de @code{thickness} (grosor) se miden
en unidades de una propiedad interna llamada
@code{line-thickness.}  Por ejemplo, de forma predeterminada, a
las líneas de los reguladores se les da un grosor de 1 unidad de
@code{line-thickness}, mientras que el @code{thickness} de una
plica es 1.3.  Observe sin embargo que ciertas propiedades de
grosor son diferentes; por ejemplo, el grosor de las barras de
corchea se controla por medio del valor de @code{beam-thickness},
que se mide en espacios de pentagrama.

Entonces ¿cómo se tienen que escalar las longitudes en proporción
al tamaño de la tipografía?  Se puede hacer con la ayuda de una
función especial que se llama @code{magstep}, pensada
especialmente para este propósito.  Toma un argumento, el cambio
de tamaño de la tipografía (#-2 en nuestro ejemplo) y devuelve un
factor de escalado adecuado para reducir otros objetos en la misma
proporción.  Se usa de la siguiente forma:

@cindex alignAboveContext, propiedad, ejemplo
@cindex @code{\with}, ejemplo
@cindex Clef, ejemplo de sobreescritura
@cindex TimeSignature, ejemplo de sobreescritura
@cindex fontSize, propiedad, ejemplo
@cindex StaffSymbol, ejemplo de sobreescritura
@cindex magstep, función, ejemplo de utilización
@cindex staff-space, propiedad, ejemplo
@cindex stencil, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\new Staff ="main" {
  \relative {
    r4 g'8 g c4 c8 d |
    e4 r8
    <<
      { f8 c c }
      \new Staff \with {
        alignAboveContext = "main"
        \omit Clef
        \omit TimeSignature
        fontSize = #-2
        % Reduce stem length and line spacing to match
        \override StaffSymbol.staff-space = #(magstep -2)
      }
      { f8 f c }
    >>
    r4 |
  }
}
@end lilypond

@noindent
Puesto que la longitud de las plicas y muchas otras propiedades
relacionadas con la longitudes calculan siempre con relación al
valor de la propiedad @code{staff-space}, su longitud también ve
reducida su escala automáticamente.  Observe que esto afecta
solamente a la escala vertical del ossia: la escala horizontal se
determina por medio de la disposición de la música principal con
el objeto de mantenerse en sincronía con ella, de forma que no
resulte afectada por ninguno de estos cambios de tamaño.  Por
supuesto, si la escala de toda la música principal se cambiase de
esta forma, entonces el espaciado horizontal se vería afectado.
Trataremos de esto más tarde en la sección sobre la disposición.

Esto, en fin, completa la creación de un ossia.  Los tamaños y
longitudes del resto de los objetos se pueden modificar de manera
análoga.

Para cambios de escala pequeños, como en el ejemplo de arriba, el
grosor de las diversas líneas dibujadas como divisorias, barras de
corchea, reguladores, ligaduras, etc, no requieren normalmente
ningún ajuste global.  Si el grosor de cualquier objeto de
presentación en particular necesita ajustarse, se puede hacer
mejor mediante la sobreescritura de su propiedad @code{thickness}.
Anteriormente mostramos un ejemplo de cambio de grosor en las
ligaduras, en @ref{Properties of layout objects}.
El grosor de todos los objetos trazados (es decir, aquellos que no
se producen a partir de una tipografía) se pueden cambiar de la
misma forma.


@node Placement of objects
@section Colocación de los objetos

@menu
* Automatic behavior::
* Within-staff objects::
* Outside-staff objects::
@end menu


@node Automatic behavior
@subsection Comportamiento automático

@cindex dentro del pentagrama, objetos
@cindex fuera del pentagrama, objetos
@cindex objetos dentro del pentagrama
@cindex objetos fuera del pentagrama

Hay ciertos objetos en notación musical que pertenecen al
pentagrama y otros cuyo lugar se sitúa fuera del pentagrama.
Reciben el nombre de objetos dentro-del-pentagrama y objetos
fuera-del-pentagrama, respectivamente.

Los objetos dentro-del-pentagrama son los que se sitúan sobre la
pauta: cabezas, plicas, alteraciones, etc.  Sus posiciones
normalmente se fijan por la propia música; se posicionan
verticalmente sobre líneas específicas del pentagrama o están
unidos a otros objetos posicionados de esta forma.  Las colisiones
entre cabezas, plicas y alteraciones en acordes de notas muy
juntas, normalmente se evitan automáticamente.  Hay instrucciones
y sobreescrituras que pueden modificar este comportamiento
automático, como veremos en breve.

Entre los objetos que pertenecen al exterior de la pauta se
encuentran cosas como las marcas de ensayo, las marcas de texto y
las de dinámica.  La regla de LilyPond para la colocación vertical
de los objetos fuera-de-pentagrama es colocarlos tan cerca del
pentagrama como sea posible, pero no tan cerca como para que
puedan chocar con algún otro objeto.  LilyPond utiliza la
propiedad @code{outside-staff-priority} para determinar el orden
en que se deben situar los objetos, como veremos ahora.

En primer lugar, LilyPond sitúa todos los objetos
dentro-del-pentagrama.  Después ordena los objetos
fuera-del-pentagrama de acuerdo con su prioridad
@code{outside-staff-priority}.  Los objetos fuera-del-pentagrama
se toman de uno en uno, comenzando por el que tiene la prioridad
@code{outside-staff-priority} más baja, y se sitúan de forma que
no colisionen con ningún objeto que se haya colocado ya. Esto es,
si dos grobs fuera-del-pentagrama compiten por el mismo espacio,
el que tiene la prioridad @code{outside-staff-priority} más baja
se colocará más cerca del pentagrama.  Si dos objetos tienen la
misma @code{outside-staff-priority}, el que se ha encontrado
primero se situará más cerca de la pauta.

En el siguiente ejemplo, todos los textos de marcado tienen la
misma prioridad (pues no se ha establecido explícitamente).
Observe que @q{Text3} se posiciona de nuevo automáticamente cerca
del pentagrama, acomodado por debajo de @q{Text2}.

@cindex markup, ejemplo

@lilypond[quote,fragment,ragged-right,verbatim]
c''2^"Text1"
c''2^"Text2" |
c''2^"Text3"
c''2^"Text4" |
@end lilypond

Los pentagramas también se posicionan, de forma predeterminada,
tan cerca unos de otros como sea posible (sujeto a una separación
mínima).  Si las notas se proyectan muy lejos en dirección a un
pentagrama adyacente, forzarán a alejarse a los pentagramas sólo
si en caso contrario fuese a ocurrir un solapamiento de la
notación.  El ejemplo siguiente muestra esta acomodación
@q{nestling} de las notas sobre pentagramas adyacentes:

@lilypond[quote,ragged-right,verbatim]
<<
  \new Staff {
    \relative { c'4 a, }
  }
  \new Staff {
    \relative { c''''4 a, }
  }
>>
@end lilypond


@node Within-staff objects
@subsection Objetos interiores al pentagrama

Ya hemos visto cómo las instrucciones @code{\voiceXXX} afectan a
la dirección de las ligaduras de expresión y de unión,
digitaciones y todo lo demás que dependa de la dirección de las
plicas (véase @ref{Explicitly instantiating voices}).  Cuando se escribe música
polifónica, estas instrucciones son esenciales para que puedan
distinguirse varias líneas melódicas entrelazadas.  Pero
ocasionalmente puede ser necesario sobreescribir este
comportamiento automático.  Se puede hacer por secciones de música
completas o incluso para una nota individual.  La propiedad que
controla este comportamiento es la propiedad de @code{direction}
(dirección) de cada objeto de presentación.  En primer lugar
explicaremos qué hace esto, y luego introduciremos algunas
instrucciones listas para usar que le evitarán tener que codificar
sobreescrituras explícitas para las modificaciones más comunes.

Algunos objetos de presentación como las ligaduras se curvan hacia
arriba o hacia abajo; otros como las plicas y los corchetes
también se mueven a la derecha o a la izquierda cuando apuntan
hacia arriba o hacia abajo.  Esto se controla automáticamente
cuando está establecida la propiedad @code{direction}.

@menu
* The direction property::
* Fingering::
@end menu

@node The direction property
@unnumberedsubsubsec La propiedad @code{direction} (dirección)

@cindex abajo
@cindex arriba
@cindex centro
@cindex neutro
@cindex down
@cindex up
@cindex center
@cindex neutral

El ejemplo siguiente muestra en el primer compás la colocación
predeterminada de las ligaduras de expresión, estando por encima
las que comienzan en notas agudas y por debajo las que comienzan
en notas graves, seguido de un compás con ambas ligaduras forzadas
hacia abajo, otro compás con las dos forzadas hacia arriba y por
último un compás con las ligaduras devueltas a su comportamiento
predeterminado.

@cindex Slur, ejemplo de sobreescritura
@cindex direction, propiedad, ejemplo

@lilypond[quote,fragment,verbatim]
a'4( g') c''( a') |
\override Slur.direction = #DOWN
a'4( g') c''( a') |
\override Slur.direction = #UP
a'4( g') c''( a') |
\revert Slur.direction
a'4( g') c''( a') |
@end lilypond

Aquí hemos usado las constantes @code{DOWN} (abajo) y @code{UP}
(arriba).  Éstos tienen los valores @w{@code{-1}} y @code{+1}
respectivamente, y dichos valores numéricos también se pueden usar
directamente.  El valor @code{0} también se puede usar en algunos
casos.  Se trata simplemente con el significado de @code{UP} para
las ligaduras de expresión, pero para algunos objetos tiene el
significado de @q{centrado}.  Existe una constante @code{CENTER}
que tiene el valor @code{0}.

Sin embargo, estas sobreescrituras no se usan muy a menudo porque
están disponibles instrucciones predefinidas equivalentes más
sencillas.  Aquí podemos ver una tabla de las más comunes.  Se
menciona el significado de cada una allí donde no es obvio.

@multitable @columnfractions .2 .2 .25 .35
@headitem Abajo o Izquierda
  @tab Arriba o Derecha
  @tab Anular
  @tab Efecto
@item @code{\arpeggioArrowDown}
  @tab @code{\arpeggioArrowUp}
  @tab @code{\arpeggioNormal}
  @tab La flecha está abajo, arriba o no hay flecha
@item @code{\dotsDown}
  @tab @code{\dotsUp}
  @tab @code{\dotsNeutral}
  @tab Dirección del desplazamiento para evitar las líneas del pentagrama
@item @code{\dynamicDown}
  @tab @code{\dynamicUp}
  @tab @code{\dynamicNeutral}
  @tab
@item @code{\phrasingSlurDown}
  @tab @code{\phrasingSlurUp}
  @tab @code{\phrasingSlurNeutral}
  @tab Nota: diferente de las instrucciones de ligaduras de expresión
@item @code{\slurDown}
  @tab @code{\slurUp}
  @tab @code{\slurNeutral}
  @tab
@item @code{\stemDown}
  @tab @code{\stemUp}
  @tab @code{\stemNeutral}
  @tab
@item @code{\textSpannerDown}
  @tab @code{\textSpannerUp}
  @tab @code{\textSpannerNeutral}
  @tab El texto introducido como objeto de extensión está debajo o encima del pentagrama
@item @code{\tieDown}
  @tab @code{\tieUp}
  @tab @code{\tieNeutral}
  @tab
@item @code{\tupletDown}
  @tab @code{\tupletUp}
  @tab @code{\tupletNeutral}
  @tab Los grupos especiales están debajo o encima de las notas
@end multitable

Las variantes neutras o normales de estas instrucciones están
implementadas usando @code{\revert} y éstas @strong{no} pueden ir
precedidas de @code{\once}.  Si quiere limitar el efecto de las
otras instrucciones (que están implementadas usando
@code{\override}) a un solo paso de tiempo, puede precederla de
@code{\once} de la misma forma en que lo haría con las
sobreescrituras explícitas.

O bien, si un único objeto de presentación necesita forzarse hacia
arriba o hacia abajo, pueden usarse los indicadores de dirección,
@code{^} o @code{_}:

@lilypond[quote,fragment,verbatim]
a'4( g') c''( a') |
a'4^( g') c''_( a') |
@end lilypond

@node Fingering
@unnumberedsubsubsec Digitaciones

@cindex digitación, colocación
@cindex digitación de acordes

La colocación de las digitaciones sobre notas sueltas también se
puede controlar mediante la propiedad @code{direction}, pero los
cambios sobre @code{direction} no tienen ningún efecto sobre las
notas de los acordes.  Como veremos, existen instrucciones
especiales que permiten controlar las digitaciones de notas
individuales, situando la digitación encima, debajo, a la
izquierda o a la derecha de cada nota.

En primer lugar, he aquí el efecto de @code{direction} sobre las
digitaciones aplicadas a notas sueltas.  Se muestra en el primer
compás el comportamiento predeterminado, y en los dos compases
siguiente el efecto de especificar @code{DOWN} y @code{UP}:

@cindex Fingering, ejemplo de sobreescritura
@cindex direction, propiedad, ejemplo

@lilypond[quote,verbatim]
\relative {
  c''4-5 a-3 f-1 c'-5 |
  \override Fingering.direction = #DOWN
  c4-5 a-3 f-1 c'-5 |
  \override Fingering.direction = #UP
  c4-5 a-3 f-1 c'-5 |
}
@end lilypond

Sin embargo, la sobreescritura de la propiedad @code{direction} no
es la forma más sencilla de especificar manualmente la digitación
por encima o por debajo de las notas; suele ser preferible usar
@code{_} o @code{^} en lugar de @code{-}, antes del número de la
digitación.  Este es el ejemplo anterior utilizando este método:

@cindex fingering, ejemplo
@cindex digitación, ejemplo

@lilypond[quote,verbatim]
\relative {
  c''4-5 a-3 f-1 c'-5 |
  c4_5 a_3 f_1 c'_5 |
  c4^5 a^3 f^1 c'^5 |
}
@end lilypond

La propiedad @code{direction} se ignora para los acordes, pero los
prefijos direccionales @code{_} y @code{^} sí funcionan.  De forma
predeterminada, las digitaciones se colocan automáticamente encima
y debajo de las notas de un acorde, como se muestra aquí:

@cindex fingering, ejemplo
@cindex digitación, ejemplo

@lilypond[quote,verbatim]
\relative {
  <c''-5 g-3>4
  <c-5 g-3 e-2>4
  <c-5 g-3 e-2 c-1>4
}
@end lilypond

@noindent
pero se puede forzar de manera que todos o algunos de los números
de digitación estén por encima o por debajo:

@cindex fingering, ejemplo
@cindex digitación, ejemplo

@lilypond[quote,verbatim]
\relative {
  <c''-5 g-3 e-2 c-1>4
  <c^5 g_3 e_2 c_1>4
  <c^5 g^3 e^2 c_1>4
}
@end lilypond

Es posible ejercer un control aún mayor sobre la colocación de las
digitaciones mediante la utilización de la instrucción @code{\set
fingeringOrientations}.  El formato de esta instrucción es:

@example
\set fingeringOrientations = #'([up] [left/right] [down])
@end example

@noindent
se utiliza @code{\set} porque @code{fingeringOrientations} es una
propiedad del contexto @code{Voice}, creado y usado por el
grabador @code{New_fingering_engraver}.

La propiedad se puede establecer al valor de una lista de entre
uno y tres valores.  Controla si las digitaciones se pueden
colocar por encima (si @code{up} aparece en la lista), por debajo
(si aparece @code{down}), a la izquierda (si aparece @code{left})
o a la derecha (si aparece @code{right}).  A la inversa, si una
colocación no está en la lista, no se sitúa ninguna digitación en
dicho lugar.  LilyPond coma estas restricciones y se trabaja la
mejor colocación para la digitación de las notas de los acordes
que siguen.  Observe que @code{left} y @code{right} son mutuamente
excluyentes: las digitaciones pueden situarse en un lado o en el
otro, no en los dos.

@warning{Para controlar la colocación de la digitación de una sola
nota usando esta instrucción es necesario escribirla como un
acorde de una sola nota encerrándola entre ángulos simples.}

Aquí podemos ver algunos ejemplos:

@cindex fingering, ejemplo
@cindex digitación, ejemplo
@cindex @code{\set}, ejemplo de utilización
@cindex fingeringOrientations, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  \set fingeringOrientations = #'(left)
  <f'-2>4
  <c-1 e-2 g-3 b-5>4
  \set fingeringOrientations = #'(left)
  <f-2>4
  <c-1 e-2 g-3 b-5>4 |
  \set fingeringOrientations = #'(up left down)
  <f-2>4
  <c-1 e-2 g-3 b-5>4
  \set fingeringOrientations = #'(up left)
  <f-2>4
  <c-1 e-2 g-3 b-5>4 |
  \set fingeringOrientations = #'(right)
  <f-2>4
  <c-1 e-2 g-3 b-5>4
}
@end lilypond

@noindent
Si la digitación parece un poco superpoblada, se puede reducir el
tamaño @code{font-size}.  El valor predeterminado puede verse en
el objeto @code{Fingering} del RFI que es @w{@code{-5}}, así que
probaremos @w{@code{-7}}:

@lilypond[quote,ragged-right,verbatim]
\relative {
  \override Fingering.font-size = #-7
  \set fingeringOrientations = #'(left)
  <f'-2>4
  <c-1 e-2 g-3 b-5>4
  \set fingeringOrientations = #'(left)
  <f-2>4
  <c-1 e-2 g-3 b-5>4 |
  \set fingeringOrientations = #'(up left down)
  <f-2>4
  <c-1 e-2 g-3 b-5>4
  \set fingeringOrientations = #'(up left)
  <f-2>4
  <c-1 e-2 g-3 b-5>4 |
  \set fingeringOrientations = #'(right)
  <f-2>4
  <c-1 e-2 g-3 b-5>4
}
@end lilypond


@node Outside-staff objects
@subsection Objetos fuera del pentagrama

Los objetos fuera-del-pentagrama se sitúan automáticamente para
evitar las colisiones.  Existen varias formas de sobreescribir la
colocación automática si el posicionado no resulta óptimo.

@menu
* The outside-staff-priority property::
* The textLengthOn command::
* Dynamics placement::
* Grob sizing::
@end menu


@node The outside-staff-priority property
@unnumberedsubsubsec La propiedad @code{outside-staff-priority} (prioridad fuera del pentagrama)

Los objetos fuera-del-pentagrama se colocan automáticamente para
evitar las colisiones.  Los objetos que tienen el valor más bajo
de la propiedad @code{outside-staff-priority} se sitúan más cerca
del pentagrama, y entonces otros objetos fuera-del-pentagrama se
elevan tanto como sea necesario para evitar la colisión.  La
prioridad @code{outside-staff-priority} se defina en el
@code{grob-interface} y así es una propiedad de todos los objetos
de presentación.  De forma predeterminada se establece a @code{#f}
para todos los objetos dentro-del-pentagrama, y a un valor
numérico adecuado a cada objeto fuera-del-pentagrama cuando se
crea el objeto.  La tabla siguiente presenta los valores numéricos
predeterminados para algunos de los objetos fuera-del-pentagrama
más comunes.

@cindex objetos de extensión

Observe los nombres algo inusuales de algunos de los objetos: los
objetos de extensión se crean automáticamente para controlar el
posicionamiento vertical de los grobs que (quizá) comienzan y
terminan en distintos momentos musicales, de manera que cualquier
modificación a la prioridad @code{outside-staff-priority} del grob
subyacente no tiene ningún efecto.  Por ejemplo, cambiar la
@code{outside-staff-priority} del objeto de regulador
@code{Hairpin} no tiene efecto sobre la posición vertical de los
reguladores: en lugar de eso, tenemos que cambiar la
@code{outside-staff-priority} del objeto asociado
@code{DynamicLineSpanner}.  Esta sobreescritura se debe escribir
al comienzo del objeto de extensión, que podría incluir varios
reguladores o matices dinámicos encadenados.

@multitable @columnfractions .3 .3 .3
@headitem Objeto de presentación
  @tab Prioridad
  @tab Controla la posición de:
@item @code{RehearsalMark}
  @tab @code{1500}
  @tab Letras de ensayo
@item @code{MetronomeMark}
  @tab @code{1000}
  @tab Indicaciones metronómicas
@item @code{VoltaBracketSpanner}
  @tab @code{600}
  @tab Cajetines de primera y segunda vez
@item @code{TextScript}
  @tab @code{450}
  @tab Texto en elementos de marcado
@item @code{MultiMeasureRestText}
  @tab @code{450}
  @tab Texto sobre silencios de compás completo
@item @code{OttavaBracket}
  @tab @code{400}
  @tab Corchetes de octava alta y baja
@item @code{TextSpanner}
  @tab @code{350}
  @tab Objetos de extensión de texto
@item @code{DynamicLineSpanner}
  @tab @code{250}
  @tab Todas las indicaciones dinámicas
@item @code{VoltaBracketSpanner}
  @tab @code{100}
  @tab Números de compás
@item @code{TrillSpanner}
  @tab @code{50}
  @tab Trinos mantenidos
@end multitable

He aquí un ejemplo que muestra la situación predeterminada de
algunos de ellos.

@cindex texto, extensiones de
@cindex octava alta y baja, corchete de

@funindex \startTextSpan
@funindex \stopTextSpan

@cindex TextSpanner, ejemplo de sobreescritura
@cindex bound-details, propiedad, ejemplo

@lilypond[quote,fragment,ragged-right,verbatim]
% Set details for later Text Spanner
\override TextSpanner.bound-details.left.text
    = \markup { \small \bold Slower }
% Place dynamics above staff
\dynamicUp
% Start Ottava Bracket
\ottava #1
c''4 \startTextSpan
% Add Dynamic Text and hairpin
c''4\pp\<
c''4
% Add Text Script
c''4^Text |
c''4 c''
% Add Dynamic Text and terminate hairpin
c''4\ff c'' \stopTextSpan |
% Stop Ottava Bracket
\ottava #0
c'4 c' c' c' |
@end lilypond

Este ejemplo también muestra cómo crear textos con extensión (Text
Spanners): textos con líneas extensoras por encima de una sección
de música.  El extensor abarca desde la instrucción
@code{\startTextSpan} hasta la instrucción @code{\stopTextSpan}, y
el formado del texto se define por medio de la instrucción
@code{\override TextSpanner}.  Para ver más detalles, consulte
@rnotationnamed{Text spanners, Extensiones de texto}.

También muestra la manera de crear corchetes de octava alta y
baja.

@cindex trucar la situación de los números de compás
@cindex números de compás, ajustar posición
@cindex trucar la situación de marcas metronómicas
@cindex metrónomo, situación de las indicaciones de
@cindex trucar la situación de las letras de ensayo
@cindex ensayo, letras, trucar la colocación

Si los valores predeterminados de @code{outside-staff-priority} no
le ofrecen las colocaciones deseadas se puede sobreescribir la
prioridad de cualquiera de los objetos.  Suponga que quisiéramos
que el corchete de octava estuviera situado por debajo del
elemento extensor de texto en el ejemplo de arriba.  Todo lo que
debemos hacer es localizar la prioridad de @code{OttavaBracket} en
el RFI o en las tablas anteriores, y reducirlo a un valor inferior
al de @code{TextSpanner}, recordando que @code{OttavaBracket} se
crea dentro del contexto de @code{Staff}:

@cindex TextSpanner, ejemplo de sobreescritura
@cindex bound-details, propiedad, ejemplo

@lilypond[quote,fragment,ragged-right,verbatim]
% Set details for later Text Spanner
\override TextSpanner.bound-details.left.text
    = \markup { \small \bold Slower }
% Place dynamics above staff
\dynamicUp
% Place following Ottava Bracket below Text Spanners
\once \override Staff.OttavaBracket.outside-staff-priority = #340
% Start Ottava Bracket
\ottava #1
c''4 \startTextSpan
% Add Dynamic Text
c''4\pp
% Add Dynamic Line Spanner
c''4\<
% Add Text Script
c''4^Text |
c''4 c''
% Add Dynamic Text
c''4\ff c'' \stopTextSpan |
% Stop Ottava Bracket
\ottava #0
c'4 c' c' c' |
@end lilypond

Observe que algunos de estos objetos, concretamente los números de
compás, las indicaciones metronómicas y las letras de ensayo, se
alojan de forma predeterminada dentro del contexto @code{Score};
así pues, debe asegurarse de que utiliza el contexto adecuado
cuando se sobreescriben sus propiedades.

@cindex ligaduras y outside-staff-priority
@cindex ligaduras y articulaciones
@cindex articulaciones y ligaduras

De forma predeterminada, las ligaduras de expresión están
clasificadas como objetos dentro-del-pentagrama, pero con
frecuencia aparecen encima del pentagrama si las notas que une son
muy agudas.  Ello puede empujar a una posición muy elevada a los
objetos fuera-del-pentagrama como las articulaciones, pues la
ligadura se colocará en primer lugar.  La propiedad
@code{avoid-slur} de la articulación se puede establecer al valor
@code{'inside} (por dentro) para llevarla al interior de la
ligadura, pero la propiedad @code{avoid-slur} es efectiva
solamente si la prioridad @code{outside-staff-priority} está
también ajustada al valor @code{#f}.  De forma alternativa, la
prioridad @code{outside-staff-priority} de la ligadura se puede
fijar en un valor numérico para hacer que se sitúe en línea con
otros objetos fuera del pentagrama de acuerdo con este valor.  He
aquí un ejemplo que muestra el efecto de los dos métodos:

@lilypond[quote,verbatim]
\relative c'' {
  c4( c^\markup { \tiny \sharp } d4.) c8 |
  c4(
    \once \override TextScript.avoid-slur = #'inside
    \once \override TextScript.outside-staff-priority = ##f
    c4^\markup { \tiny \sharp } d4.) c8 |
  \once \override Slur.outside-staff-priority = #500
    c4( c^\markup { \tiny \sharp } d4.) c8 |
}
@end lilypond

Los cambios en @code{outside-staff-priority} también se pueden
emplear para controlar la situación vertical de los objetos
individuales, aunque los resultados pueden no siempre ser
deseables.  Suponga que quiere que @qq{Text3} se sitúe por encima
de @qq{Text4} en el ejemplo bajo el epígrafe Comportamiento
Automático de más arriba (véase @ref{Automatic behavior}).
Todo lo que debemos hacer es localizar la prioridad de
@code{TextScript} en el RFI o en las tablas de arriba, y aumentar
la prioridad de @qq{Text3} hasta un valor superior:

@cindex TextScript, ejemplo de sobreescritura
@cindex outside-staff-priority, propiedad, ejemplo

@lilypond[quote,fragment,ragged-right,verbatim]
c''2^"Text1"
c''2^"Text2" |
\once \override TextScript.outside-staff-priority = #500
c''2^"Text3"
c''2^"Text4" |
@end lilypond

Esto, ciertamente, eleva a @qq{Text3} por encima de @qq{Text4}
pero también lo eleva por encima de @qq{Text2}, y @qq{Text4} ahora
se desploma hacia abajo.  Quizá no sea tan buena idea.  ¿Y si lo
que realmente queremos hacer es posicionar todas las anotaciones a
la misma distancia por encima del pentagrama?  Para hacerlo, vamos
a necesitar claramente espaciar las notas en sentido horizontal
para hacer sitio para el texto.  Esto se hace empleando la
instrucción @code{textLengthOn}.

@node The textLengthOn command
@unnumberedsubsubsec La instrucción @code{\textLengthOn}

@cindex notas, espaciar junto al texto

@funindex \textLengthOn
@funindex \textLengthOff

De forma predeterminada, el texto producido mediante marcado no
ocupa ningún espacio horizontal en cuanto se refiere a la
disposición de la música.  La instrucción @code{\textLengthOn}
invierte este comportamiento, ocasionando que las notas resulten
tan espaciadas como sea necesario para acomodar el texto:

@lilypond[quote,fragment,ragged-right,verbatim]
\textLengthOn  % Cause notes to space out to accommodate text
c''2^"Text1"
c''2^"Text2" |
c''2^"Text3"
c''2^"Text4" |
@end lilypond

La instrucción para volver al comportamiento predeterminado es
@code{\textLengthOff}.  De forma alternativa, se puede usar
@code{\once} con @code{\textLengthOn} si el efecto se ha de
limitar a un solo momento musical.  El comportamiento de espaciado
correspondiente para las llamadas de ensayo y las indicaciones de
tempo se controla independientemente con las instrucciones
@code{\markLengthOn} y @code{\markLengthOff}.

@cindex marcado, texto de, permitir las colisiones en

El texto de marcado también evita las notas que se proyectan por
encima del pentagrama.  Si esto no es lo que deseamos, el
desplazamiento automático hacia arriba se puede desactivar
mediante el establecimiento de la prioridad a @code{#f}.  He aquí
un ejemplo que muestra cómo el texto de marcado interactúa con
tales notas.

@cindex TextScript, ejemplo de sobreescritura
@cindex outside-staff-priority, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim]
\relative {
  % This markup is short enough to fit without collision
  c''2^"Tex" c'' |
  R1 |

  % This is too long to fit, so it is displaced upwards
  c,,2^"Text" c'' |
  R1 |

  % Turn off collision avoidance
  \once \override TextScript.outside-staff-priority = ##f
  c,,2^"Long Text   " c'' |
  R1 |

  % Turn off collision avoidance
  \once \override TextScript.outside-staff-priority = ##f
  \textLengthOn        % and turn on textLengthOn
  c,,2^"Long Text   "  % Spaces at end are honored
  c''2 |
}
@end lilypond

@node Dynamics placement
@unnumberedsubsubsec Posicionamiento de los matices dinámicos

@cindex trucar la colocación de los matices
@cindex dinámica, trucar la colocación de las indicaciones de
@cindex matices, trucar la colocación

Las indicaciones de matiz dinámico normalmente se colocarán por
debajo del pentagrama, pero se pueden posicionar por encima con la
instrucción @code{\dynamicUp}.  Se situarán verticalmente respecto
a la nota a la que van adosadas, y flotarán por debajo (o por
encima) de todos los objetos dentro-del-pentagrama tales como
ligaduras de fraseo y números de compás.  Esto puede ofrecer
resultados bastante aceptables, como muestra este ejemplo:

@lilypond[quote,ragged-right,verbatim]
\relative {
  \clef "bass"
  \key aes \major
  \time 9/8
  \dynamicUp
  bes4.~\f\< \( bes4 bes8 des4\ff\> c16 bes\! |
  ees,2.~\)\mf ees4 r8 |
}
@end lilypond

Sin embargo, si las notas y sus indicaciones dinámicas adosadas
están muy cerca, la colocación automática evitará las colisiones
desplazando las marcas dinámicas posteriores más lejos, aunque
este puede no ser el lugar óptimo, como muestra el siguiente
ejemplo más bien artificial:

@lilypond[quote,ragged-right,verbatim,fragment]
\dynamicUp
\relative { a'4\f b\mf a\mp b\p }
@end lilypond

@noindent
Si se presentara una situación similar en música @q{real}, podría
ser preferible espaciar las notas un poco más entre sí, de forma
que todas las marcas dinámicas puedan caber a la misma distancia
vertical desde el pentagrama.  Hemos sido capaces de hacer esto
para el texto de marcado utilizando la instrucción
@code{\textLengthOn}, pero no existe una instrucción equivalente
para las indicaciones de matiz dinámico.  Por tanto, tendremos que
averiguar cómo hacerlo utilizando instrucciones @code{\override}.

@node Grob sizing
@unnumberedsubsubsec Escalado de un «Grob»

@cindex grob, cambio de tamaño de un
@cindex escala de los grobs

En primer lugar debemos aprender cómo se especifica el tamaño de
los grobs.  Todos los grobs tienen un punto de referencia definido
dentro de ellos que se usa para colocarlos respecto a su objeto
padre.  Entonces, este punto del grob se posiciona a una distancia
horizontal, @code{X-offset}, y una distancia vertical,
@code{Y-offset}, a partir de su padre.  La dimensión horizontal
del objeto viene dada por una pareja de números, @code{X-extent},
que dice dónde están los límites izquierdo y derecho respecto del
punto de referencia.  La amplitud vertical se define de forma
similar mediante una pareja de números, @code{Y-extent}.  Éstas
son propiedades de todos los grobs que contemplan el
@code{grob-interface}.

@cindex @code{extra-spacing-width}

De forma predeterminada, los objetos fuera-del-pentagrama reciben
una anchura cero, de manera que pueden solaparse en la dirección
horizontal.  Esto se hace mediante el truco de hacer que la
dimensión más a la izquierda sea igual a infinito y que la
dimensión más a la derecha sea igual a menos infinito,
estableciendo el valor de @code{extra-spacing-width} a
@code{'(+inf.0 . -inf.0)}.  Así, para asegurar que no se
superponen en la dirección horizontal tendremos que sobreescribir
este valor de @code{extra-spacing-width} para darles un poco de
espacio adicional.  Las unidades son el espacio entre dos líneas
del pentagrama, de forma que debería bastar mover el límite
izquierdo media unidad a la izquierda y el límite derecho media
unidad a la derecha:

@example
\override DynamicText.extra-spacing-width = #'(-0.5 . 0.5)
@end example

@noindent
Veamos si funciona en nuestro ejemplo anterior:

@cindex DynamicText, ejemplo de sobreescritura
@cindex extra-spacing-width, propiedad, ejemplo

@lilypond[quote,ragged-right,verbatim,fragment]
\dynamicUp
% Extend width by 1 staff space
\override DynamicText.extra-spacing-width = #'(-0.5 . 0.5)
\relative { a'4\f b\mf a\mp b\p }
@end lilypond

@noindent
Esto tiene un mejor aspecto, pero quizá habríamos preferido que
las indicaciones de dinámica estuvieran alineadas sobre la misma
línea de base en lugar de ir hacia arriba y hacia abajo con las
notas.  La propiedad que lo hace es @code{staff-padding} (relleno
de pentagrama) que se estudia en la sección dedicada a las
colisiones (véase @ref{Collisions of objects}).

@node Vertical spacing
@section Espaciado vertical

Por lo general, el espaciado vertical de los objetos musicales que
LilyPond hace es bastante bueno.  Veamos cómo se comporta con una
canción sencilla, con dos voces y acompañamiento de piano:

@lilypond[quote,fragment,ragged-right]
<<
  \new ChoirStaff
  <<
    \new Staff {
      \new Voice = "music" {
        b'2 c' c' c'
      }
    }
    \new Lyrics
    \lyricsto "music" {
      Here are some lyrics
    }
    \new Staff {
      \clef bass e'2 f e c
    }
  >>
  \new PianoStaff
  <<
    \new Staff {
      g''2 c'' c'' a''
    }
    \new Staff {
      \clef bass e2 f c e
    }
  >>
>>
@end lilypond

No hay ningún problema con el espaciado vertical predeterminado.
Sin embargo, supongamos que estamos trabajando con un editor que
tiene ciertos requisitos específicos para el espaciado vertical de
los pentagramas y la letra: quiere que la letra está más separada
de las notas, que el acompañamiento de piano esté más separado de
la línea vocal y que los dos pentagramas de piano estén más juntos
entre sí.  Comenzaremos con la letra.

La letra se encuentra en el interior de un sistem, y por tanto las
instrucciones para aplicarle el espaciado estarán en
@rnotationnamed{Flexible vertical spacing within systems, Espaciado vertical flexible dentro de los sistemas}.  Allí
se dice que el texo son líneas del tipo @qq{no-pauta} y por tanto
la instrucción para cambiar su espaciado hará referencia a la
propiedad @code{nonstaff}.  Para separarlas del pentagrama al que
pertenecen (la pauta superior) usaremos la propiedad
@code{relatedstaff}.  Para separarlas de la línea inferior
usaremos la propiedad @code{unrelatedstaff}.  Las partes vocales
pertenecen a un grupo vertical @code{VerticalAxisGroup}, por lo
que tenemos que ajustar sus propiedades.  Probémoslo y veamos si
funciona.

@lilypond[quote,fragment,ragged-right,verbatim]
<<
  \new ChoirStaff
  <<
    \new Staff {
      \new Voice = "music" {
        b'2 c' c' c'
      }
    }
    \new Lyrics \with {
      \override VerticalAxisGroup.
        nonstaff-relatedstaff-spacing.padding = #5
      \override VerticalAxisGroup.
        nonstaff-unrelatedstaff-spacing.padding = #5
    }
    \lyricsto "music" {
      Here are some lyrics
    }
    \new Staff {
      \clef bass e'2 f e c
    }
  >>
  \new PianoStaff
  <<
    \new Staff {
      g''2 c'' c'' a''
    }
    \new Staff {
      \clef bass e2 f c e
    }
  >>
>>
@end lilypond

Bien: sí, funciona, pero quizá demasiado bien.  Cuando
establecemos el @code{padding} (relleno) a 5, LilyPond añade 5
espacios de pentagrama a la distancia entre los objetos, lo que es
excesivo para nosotros en este caso.  Usaremos un valor de 2.

A continuación, desplazaremos la música de piano para separarla de
las partes vocales.  La música vocal es una @code{ChoirStaff} (un
contexto de sistema coral), y por tanto tenemos que aumentar el
espaciado entre ese grupo de pentagramas y el sistema de piano que
se encuentra debajo.  Lo haremos cambiando la
@code{basic-distance} (distancia básica) del @code{StaffGrouper}
del @code{staffgroup-staff-spacing}.

@lilypond[quote,fragment,ragged-right,verbatim]
<<
  \new ChoirStaff \with {
    \override StaffGrouper.
      staffgroup-staff-spacing.basic-distance = #15
  }
  <<
    \new Staff {
      \new Voice = "music" {
        b'2 c' c' c'
      }
    }
    \new Lyrics \with {
      \override VerticalAxisGroup.
        nonstaff-relatedstaff-spacing.padding = #2
      \override VerticalAxisGroup.
        nonstaff-unrelatedstaff-spacing.padding = #2
    }
    \lyricsto "music" {
      Here are some lyrics
    }
    \new Staff {
      \clef bass e'2 f e c
    }
  >>
  \new PianoStaff
  <<
    \new Staff {
      g''2 c'' c'' a''
    }
    \new Staff {
      \clef bass e2 f c e
    }
  >>
>>
@end lilypond

Muy bien.  Ahora, sólo nos queda el último requisito de hacer que
los pentagramas de piano estén más juntos.  Para conseguirlo, de
nuevo alteramos las propiedades del @code{StaffGrouper}, pero esta
vez vamos a reducir tanto la @code{basic-distance} (distancia
básica) como el @code{padding} (relleno).  Podemos hacerlo como se
muestra a continuación.

@lilypond[quote,fragment,ragged-right,verbatim]
<<
  \new ChoirStaff \with {
    \override StaffGrouper.
      staffgroup-staff-spacing.basic-distance = #15
  }
  <<
    \new Staff {
      \new Voice = "music" {
        b'2 c' c' c'
      }
    }
    \new Lyrics \with {
      \override VerticalAxisGroup.
        nonstaff-relatedstaff-spacing.padding = #2
      \override VerticalAxisGroup.
        nonstaff-unrelatedstaff-spacing.padding = #2
    }
    \lyricsto "music" {
      Here are some lyrics
    }
    \new Staff {
      \clef bass e'2 f e c
    }
  >>
  \new PianoStaff \with {
    \override StaffGrouper.staff-staff-spacing = #'(
                            (basic-distance . 0)
                            (padding . 0))
  }
  <<
    \new Staff {
      g''2 c'' c'' a''
    }
    \new Staff {
      \clef bass e2 f c e
    }
  >>
>>
@end lilypond

Con esto los hemos colocado muy juntos entre sí (pero es lo que el
editor quería).  Se podrían haber separado más alterando el
relleno, @code{padding}, o la distancia básica,
@code{basic-distance}, si quisiéramos.

Hay muchas formas de alterar el espaciado vertical.  Un punto
clave que debemos recordar es que el espaciado entre objetos
dentro de un @code{StaffGroup} (como los grupos @code{GrandStaff}
o @code{PianoStaff}) se controla con las variables de espaciado
del @code{StaffGrouper}. El espaciado de los pentagramas no
agrupados (como @code{Lyrics} y @code{Staff}) se controla con las
variables del @code{VerticalAxisGroup}.  Para ver más detalles,
consulte
@rnotationnamed{Flexible vertical spacing paper variables, Variables de espaciado de paper verticales flexibles} y
@rnotationnamed{Flexible vertical spacing within systems, Espaciado vertical flexible dentro de los sistemas}.


@node Collisions of objects
@section Colisiones de objetos

@menu
* Moving objects::
* Fixing overlapping notation::
* Real music example::
@end menu

@node Moving objects
@subsection Mover objetos

@cindex mover objetos superpuestos
@cindex mover objetos que colisionan
@cindex mover grobs que colisionan
@cindex objetos que colisionan, mover
@cindex grobs que colisionan, mover

Aunque pueda sorprenderle, LilyPond no es perfecto.  Ciertos
elementos de notación se pueden superponer, lo que es una lástima,
pero en realidad es bastante poco frecuente.  Normalmente la
necesidad de mover objetos es por claridad o razones estéticas: el
aspecto es mejor con un poco más o un poco menos de espacio de
separación.

Existen tres enfoques principales que llevan a la resolución de
superposiciones en la notación.  Se deben considerar en el
siguiente orden:

@enumerate
@item
La @strong{dirección} de uno de los objetos que se superponen se
puede cambiar usando las instrucciones predefinidas que están
relacionadas arriba para los objetos dentro-del-pentagrama (véase
@ref{Within-staff objects}).  Se pueden recolocar
fácilmente las plicas, ligaduras de expresión y de unión, barras
de corchea, indicaciones dinámicas, texto y grupos de valoración
especial de esta forma.  La limitación es que sólo tiene la
posibilidad de elegir entre dos posiciones, y podría ser que
ninguna de ellas sea la adecuada.

@item
Las @strong{propiedades del objeto}, que LilyPond usa cuando está
colocando los objetos de presentación, se pueden modificar usando
la instrucción de sobreescritura @code{\override}.  Las ventadas
de hacer cambios a este tipo de propiedad son: a) que algún otro
objeto se moverá automáticamente si es necesario, para dejarle
sitio, y b) una única sobreescritura se puede aplicar a todas las
instancias del mismo tipo de objeto.  Entre tales propiedades se
encuentran:

@itemize

@item
@code{direction} (dirección)

Ya se ha estudiado con cierto detalle: véase @ref{Within-staff objects}.

@item
@code{padding} (relleno),
@code{right-padding} (relleno por la derecha),
@code{staff-padding} (relleno de pentagrama)

@cindex relleno
@cindex padding, propiedad
@cindex right-padding, propiedad
@cindex staff-padding, propiedad

Según un objeto se está colocando, el valor de su propiedad de
relleno @code{padding} especifica el espacio intermedio que se
debe dejar entre él mismo y el límite más próximo del objeto
contra el que se está colocando.  Observe que es el valor de
@code{padding} del objeto @strong{que se está colocando} el que se
usa; el valor de @code{padding} del objeto que ya está colocado se
ignora.  Los espacios intermedios especificados mediante
@code{padding} se pueden aplicar a todos los objetos que
contemplan el interface @code{side-position-interface}.

En lugar de con @code{padding}, la colocación de los grupos de
alteraciones se controla con @code{right-padding}.  Esta propiedad
se encuentra en el objeto @code{AccidentalPlacement} que, observe,
vive dentro del contexto de @strong{Staff}.  Durante el proceso
tipográfico, las cabezas de las notas se componen tipográficamente
en primer lugar, y después las alteraciones, si existen, se añaden
a la izquierda de las cabezas utilizando la propiedad de relleno
por la derecha @code{right-padding} para determinar la separación
entre la alteración y la cabeza, y de las alteraciones entre sí.
Así pues, sólo la propiedad de relleno por la derecha
@code{right-padding} del objeto @code{AccidentalPlacement} tiene
efecto sobre la colocación de las alteraciones.

La propiedad @code{staff-padding} está estrechamente relacionada
con la propiedad @code{padding}: @code{padding} controla la
separación mínima entre cualquier objeto que contemple el
interface @code{side-position-interface} y el objeto más cercano
(generalmente la nota o las líneas del pentagrama);
@code{staff-padding} se aplica sólo a los objetos que siempre se
sitúan fuera del pentagrama: controla la separación mínima entre
dicho objeto y el pentagrama.  Observe que @code{staff-padding} no
tiene ningún efecto sobre objetos que se posicionan respecto a la
nota en vez de hacerlo respecto al pentagrama, incluso aunque
puede ser sobreescrito sin error por tales objetos: simplemente se
ignora.

Para descubrir qué propiedad de relleno se necesita para el objeto
que quiere recolocar, debe volver al manual de RFI y buscar las
propiedades del objeto.  Tenga cuidado porque las propiedades de
relleno podrían no estar en el objeto más obvio, así que busque en
los objetos que puedan tener alguna relación con él.

Todos los valores de relleno se miden en espacios del pentagrama.
Para la mayor parte de los objetos el valor se establece de forma
predeterminada en aproximadamente 1.0 o menos (varía con cada
objeto).  Se puede sobreescribir si se necesita una separación
intermedia mayor (o menor).

@item
@code{self-alignment-X} (Auto-alineamiento en el eje X)

@cindex self-alignment-X, propiedad

Esta propiedad se puede usar para alinear el objeto a la
izquierda, a la derecha, o centrarlo con respecto al punto de
referencia del objeto «padre».  Se puede usar con todos los
objetos que contemplan el interface
@code{self-alignment-interface}.  En general son objetos que
contienen texto.  Los valores son @code{LEFT}, @code{RIGHT} o
@code{CENTER}.  De forma alternativa se puede especificar un valor
numérico entre @w{@code{-1}} y @code{+1}, donde @w{@code{-1}} es
alineado por la izquierda, @code{+1} es alineado por la derecha, y
los números intermedios mueven el texto progresivamente desde
alineado por la izquierda hasta alineado por la derecha.  Se
pueden especificar valores numéricos mayores de @code{1} para
mover el texto incluso más lejos hacia la izquierda, o menos de
@w{@code{-1}} para alejarlo más hacia la derecha.  Un cambio en
@code{1} en el valor corresponde a un movimiento de la mitad de la
longitud total del propio texto.

@item
@code{extra-spacing-width} (anchura de separación adicional)

@cindex extra-spacing-width, propiedad

Esta propiedad está disponible para todos los objetos que
contemplan el interface @code{item-interface}.  Toma dos números,
el primero se suma al límite izquierdo y el segundo se suma al
límite derecho.  Los números negativos desplazan el límite a la
izquierda y los positivos a la derecha, por lo que para ensanchar
un objeto el primer número debe ser negativo y el segundo
positivo.  Observe que no todos los objetos ostentan los dos
números.  Por ejemplo, el objeto @code{Accidental} (alteración)
sólo toma nota del primer número (el borde izquierdo).

@item
@code{staff-position} (posición de pentagrama)

@cindex staff-position, propiedad

@code{staff-position} es una propiedad del interface
@code{staff-symbol-referencer-interface}, que está contemplado por
los objetos que se colocan con relación al pentagrama.  Especifica
la posición vertical del objeto con relación a la tercera línea
del pentagrama en medios espacios de pentagrama.  Es útil en la
resolución de colisiones entre objetos de presentación como
silencios multi-compás, ligaduras de unión y notas en distintas
voces.

@item
@code{horizontal-shift}

@cindex horizontal-shift, propiedad
@cindex nota, columna de
@cindex nota, colisiones
@cindex colisiones de notas
@cindex desplazamiento, instrucciones de
@funindex \shiftOff
@funindex \shiftOn
@funindex \shiftOnn
@funindex \shiftOnnn

Dentro de una voz, todas las notas que se producen en el mismo
moemtno se agrupan en una columna de notas, y se crea un objeto
@code{NoteColumn} para controlar el posicionamiento horizonal de
dicho grupo de notas (véase @qq{Columnas de nota} en @ref{Explicitly instantiating voices}).  Si @emph{y sólo si} dos o más columnas de nota
dentro de un solo contexto de pauta, las dos con las plicas en la
misma dirección, aparecen en el mismo momento musical, los valores
de sus propiedades @code{horizontal-shift} se usan para asignarles
una puntuación y las columnas con puntuaciones más altas se
desplazan progresivamente para evitar las colisiones entre las
cabezas de las notas.  Esta propiedad se establece con las
instrucciones @code{\voiceXXX} y se pueden sobreescribir
directamente con una instrucción @code{\override} o, de forma más
común con las instrucciones @code{\shiftOn}.  Observe que esta
propiedad se usa para @emph{calificar} las columnas de nota o para
aplicar desplazamientos: no especifica la magnitud del
desplazamiento, que se va incrementando progresivamente en pasos
basándolse en la anchura de las cabezas de nota para cada
puntuación.  Los pasos son normalmente de la mitad de la anchura
de una cabeza de nota, pero puede ser el ancho completo de la
cabeza de una nota cuando está implicado un grupo de notas muy
apretadas entre sí.

@item
@code{force-hshift} (forzar desplazamiento horizontal)

@cindex force-hshift, propiedad

La propiedad @code{force-hshift} es una propiedad de una
@code{NoteColumn} (realmente lo es del interface
@code{note-column-interface}).  Modificarlo permite mover una
columna de notas en situaciones donde las columnas de notas se
superponen.  Observe que no tiene efecto sobre las columnas de
nota que no se superponen.  Se especifica en unidades adecuadas a
una columna de notas, por ejemplo la anchura de la cabeza de la
nota de la primera voz.  Se debe usar en situaciones complejas
donde las instrucciones @code{\shiftOn} normales (véase @ref{Explicitly instantiating voices}) no resuelven el conflicto entre las notas de forma
satisfactoria.  Es preferible a la propiedad @code{extra-offset}
para este propósito porque no hay necesidad de averiguar la
distancia en espacios de pentagrama, y mover las notas dentro o
fuera de una @code{NoteColumn} afecta a otras acciones como a la
fusión entre cabezas de nota.

@end itemize

@item
Finalmente, cuando todo lo demás falla, los objetos se pueden
reposicionar manualmente con relación a la tercera línea del
pentagrama verticalmente, o desplazándolas una cierta distancia a
una nueva posición.  Las desventajas son que los valores correctos
para el reposicionamiento se deben adivinar, a menudo por ensayo y
error, para cada objeto individual y, puesto que el movimiento se
hace después de que LilyPond ha colocado todos los demás objetos
es usuario es responsable de evitar cualquier colisión que pudiera
producirse.  Pero la dificultar principal con este enfoque es que
los valores de reposicionado podrían tener que ser vueltos a
calcular si la música se modifica más tarde.  Las propiedades que
se pueden usar para este tipo de posicionamiento manual son:

@table @code
@item extra-offset (desplazamiento adicional)

@cindex extra-offset, propiedad

Esta propiedad se aplica a cualquier objeto de presentación que
contemple el @code{grob-interface}.  Toma una pareja de números
que especifican el desplazamiento adicional en las direcciones
horizontal y vertical.  Los números negativos mueven el objeto a
la izquierda o hacia abajo.  Las unidades son espacios de
pentagrama.  El desplazamiento adicional se hace después de que la
composición tipográfica de los objetos ha terminado, así que un
objeto puede ser reposicionado a cualquier lugar sin afectar a
ninguna otra cosa.

@item positions (posiciones)

@cindex positions, propiedad

Ésta es de la mayor utilidad para ajustar manualmente la
inclinación y la altura de las barras de corchea, ligaduras de
expresión y corchetes de grupos de valoración especial.  Toma una
pareja de números que dan la posición de los extremos izquierdo y
derecho de la barra, ligadura, etc. con relación a la tercera
línea del pentagrama.  Las unidades son espacios de pentagrama.
Observe, sin embargo, que las ligaduras de expresión y de fraseo
no se pueden reposicionar en cantidades arbitrariamente grandes.
LilyPond en primer lugar genera una lista de posiciones posibles
para la ligadura y de forma predeterminada encuentra la ligadura
que tiene @qq{mejor aspecto}.  Si la propiedad @code{positions} se
ha sobreescrito, la ligadura que está más cerca de las posiciones
que se han solicitado, se selecciona de la lista.
@end table

@end enumerate

Un objeto en particular podría no tener todas estas propiedades.
Es necesario ir al manual RFI para buscar qué propiedades se
encuentran disponibles para el objeto en cuestión.


Aquí presentamos una lista de los objetos que es más probable que
estén implicados en colisiones, con el nombre del objeto que
habría que buscar en el RFI para descubrir qué propiedades se
deben usar para moverlos.

@multitable @columnfractions .5 .5
@headitem Tipo de objeto           @tab Nombre del objeto
@item Articulaciones            @tab @code{Script}
@item Barras                    @tab @code{Beam}
@item Dinámica (verticalmente)  @tab @code{DynamicLineSpanner}
@item Dinámica (horizontalmente)   @tab @code{DynamicText}
@item Digitaciones                @tab @code{Fingering}
@item Llamadas de ensayo y textuales   @tab @code{RehearsalMark}
@item Ligaduras de expresión    @tab @code{Slur}
@item Texto, por ejemplo @code{^"texto"}  @tab @code{TextScript}
@item Ligaduras de unión        @tab @code{Tie}
@item Grupos de valoración especial @tab @code{TupletBracket}
@end multitable


@node Fixing overlapping notation
@subsection Arreglar notación con superposiciones

Veamos ahora cómo pueden ser de ayuda las propiedades que hemos
visto en la sección anterior, para resolver problemas de notación
que se superpone.

@menu
* The padding property::
* The right-padding property::
* The staff-padding property::
* The self-alignment-X property::
* The staff-position property::
* The extra-offset property::
* The positions property::
* The force-hshift property::
@end menu

@node The padding property
@unnumberedsubsubsec La propiedad @code{padding} (relleno)

@cindex relleno
@cindex arreglar notación que se superpone
@cindex superpuesta, notación

La propiedad @code{padding} se puede ajustar para aumentar (o
disminuir) la distancia entre símbolos impresos encima o debajo de
las notas.

@cindex Script, ejemplo de sobreescritura
@cindex padding, propiedad, ejemplo

@lilypond[quote,fragment,verbatim]
c'2\fermata
\override Script.padding = #3
b2\fermata
@end lilypond

@cindex MetronomeMark, ejemplo de sobreescritura
@cindex padding, propiedad, ejemplo

@lilypond[quote,fragment,verbatim]
% This will not work, see below
\override MetronomeMark.padding = #3
\tempo 4 = 120
c'1 |
% This works
\override Score.MetronomeMark.padding = #3
\tempo 4 = 80
d'1 |
@end lilypond

Observe en el segundo ejemplo la gran importancia que tiene saber
qué contexto maneja un determinado objeto.  Puesto que el objeto
@code{MetronomeMark} se maneja dentro del contexto @code{Score},
los cambios de propiedades en el contexto @code{Voice} pasarán
inadvertidos.
Para ver más detalles, consulte @rnotationnamed{Modifying properties, Modificar las propiedades}.

Si la propiedad de relleno @code{padding} de un objeto se
incrementa cuando dicho objeto se encuentra en una pila de objetos
que se están colocando de acuerdo a su prioridad
@code{outside-staff-priority}, entonces ese objeto se moverá, y
también todos los que están por fuera de él.


@node The right-padding property
@unnumberedsubsubsec La propiedad @code{right-padding} (relleno por la derecha)

@cindex right-padding, propiedad

La propiedad @code{right-padding} afecta al espaciado entre la
alteración y la nota a que se aplica.  Normalmente no es
necesaria, pero el espaciado predeterminado puede estar mal para
ciertos glifos de alteraciones o combinaciones de glifos que se
usan en música microtonal.  Éstos tienen que introducirse
sobreescribiendo el sello de la alteración con un elemento de
marcado que contenga los símbolos deseados, así:

@cindex Accidental, ejemplo de sobreescritura
@cindex text, propiedad, ejemplo
@cindex stencil, propiedad, ejemplo
@cindex AccidentalPlacement, ejemplo de sobreescritura
@cindex right-padding, propiedad, ejemplo


@lilypond[quote,ragged-right,verbatim]
sesquisharp = \markup { \sesquisharp }
\relative {
  c''4
  % This prints a sesquisharp but the spacing is too small
  \once \override Accidental.stencil = #ly:text-interface::print
  \once \override Accidental.text = #sesquisharp
  cis4 c
  % This improves the spacing
  \once \override Score.AccidentalPlacement.right-padding = #0.6
  \once \override Accidental.stencil = #ly:text-interface::print
  \once \override Accidental.text = #sesquisharp
  cis4 |
}
@end lilypond

@noindent
Esto utiliza necesariamente una sobreescritura para el sello de la
alteración que no se estudiará hasta más adelante.  El tipo de
sello debe ser un procedimiento, aquí modificado para que imprima
el contenido de la propiedad @code{text} del objeto
@code{Accidental}, que a su vez está establecido como un signo de
sesquisostenido.  Entonces el signo se puede separar de la cabeza
de la nota sobreescribiendo @code{right-padding}.

@noindent

@node The staff-padding property
@unnumberedsubsubsec La propiedad @code{staff-padding} (relleno de pentagrama)

@cindex alineación de objetos sobre la línea base
@cindex objetos, alineación sobre la línea base

@code{staff-padding} se puede usar para alinear objetos como
matices dinámicos a lo largo de una línea de base a una distancia
fija del pentagrama, siempre que no exista ningún otro elemento de
notación que fuerce una distancia mayor al pentagrama.  No es una
propiedad de @code{DynamicText} sino de @code{DynamicLineSpanner}.
Esto es así porque la línea de base debe aplicarse por igual a
@strong{todas} las dinámicas, entre ellas las que se han creado
como objetos de extensión.  Así que ésta es la forma de alinear
las indicaciones de matiz en el ejemplo de la sección anterior:

@cindex DynamicText, ejemplo de sobreescritura
@cindex extra-spacing-width, propiedad, ejemplo
@cindex DynamicLineSpanner, ejemplo de sobreescritura
@cindex staff-padding, propiedad, ejemplo

@lilypond[quote,fragment,ragged-right,verbatim]
\override DynamicLineSpanner.staff-padding = #3
\relative { a'4\f b\mf a\p b\mp }
@end lilypond


@node The self-alignment-X property
@unnumberedsubsubsec La propiedad @code{self-alignment-X} (auto-alineación en X)

El ejemplo siguiente muestra cómo ajustar la posición de un objeto
de digitación de cuerda en relación a la plica de una nota
mediante el alineamiento del límite derecho con el punto de
referencia de la nota «padre»:

@cindex StringNumber, ejemplo de sobreescritura
@cindex self-alignment-X, propiedad, ejemplo

@lilypond[quote,fragment,ragged-right,verbatim]
\voiceOne
<a''\2>
\once \override StringNumber.self-alignment-X = #RIGHT
<a''\2>
@end lilypond

@node The staff-position property
@unnumberedsubsubsec La propiedad @code{staff-position} (posición en el pentagrama)

@cindex objeto, colisión dentro del pentagrama

Los silencios multi-compás en una voz pueden chocar con las notas
en otra voz.  Puesto que estos silencios se tipografían centrados
entre las barras de compás se necesitaría bastante esfuerzo para
que LilyPond averiguara qué otras notas podrían chocar con él, ya
que actualmente todo el manejo de colisiones entre notas y
silencios se hace solamente para notas y silencios que ocurren al
mismo tiempo.  He aquí un ejemplo de colisión de este tipo:

@lilypond[quote,verbatim,ragged-right]
<< \relative { c'4 c c c } \\ { R1 } >>
@end lilypond

La mejor solución aquí es mover el silencio multi-compás hacia
abajo, pues el silencio está en la voz dos.  El ajuste
predeterminado para @code{\voiceTwo} (es decir, en la segunda voz
de una construcción @code{<<@{@dots{}@} \\ @{@dots{}@}>>}) es que
@code{staff-position} tenga el valor -6 para MultiMeasureRest, así
que tenemos que bajarlo, digamos, cuatro semi-espacios de
pentagrama, al valor @w{@code{-10}}.

@cindex MultiMeasureRest, ejemplo de sobreescritura
@cindex staff-position, propiedad, ejemplo

@lilypond[quote,verbatim,ragged-right]
<<
  \relative { c'4 c c c }
  \\
  \override MultiMeasureRest.staff-position = #-10
  { R1 }
>>
@end lilypond

Esto es mejor que utilizar, por ejemplo, @code{extra-offset},
porque la línea adicional por encima del silencio se inserta
automáticamente.

Consulte la sección @q{Edición manual de las ligaduras} en
@rnotationnamed{Ties, Ligaduras de unión} para ver la diferencia entre valores
exactos e inexactos.

@node The extra-offset property
@unnumberedsubsubsec La propiedad @code{extra-offset} (desplazamiento adicional)

@cindex posicionar objetos
@cindex posicionar grobs
@cindex objetos, posicionar
@cindex grobs, posicionar

La propiedad @code{extra-offset} da un completo control sobre el
posicionamiento de un objeto tanto vertical como horizontalmente.

En el ejemplo siguiente, la segunda digitación se desplaza
ligeramente a la izquierda, y 1.8 espacios de pentagrama hacia
abajo:

@cindex fingering (digitación), ejemplo de sobreescritura
@cindex extra-offset, propiedad, ejemplo

@lilypond[quote,fragment,verbatim]
f'4-5
\once \override Fingering.extra-offset = #'(-0.3 . -1.8)
f'4-5
@end lilypond


@node The positions property
@unnumberedsubsubsec La propiedad @code{positions} (posiciones)

@cindex controlar manualmente grupos especiales, ligaduras y barras
@cindex manual, control, de grupos especiales, ligaduras y barras
@cindex grupos especiales, barras de, control manual
@cindex ligaduras de expresión, control manual
@cindex ligaduras de fraseo, control manual
@cindex barras de corchea, control manual

La propiedad @code{positions} permite controlar manualmente la
posición vertical y de ahí también la inclinación de los
tresillos, ligaduras de expresión y de fraseo, y barras de
corchea.

He aquí un ejemplo en el que las ligaduras de fraseo y de
expresión chocan entre sí:

@lilypond[quote,verbatim,ragged-right]
\relative { a'8 \( ( a'16 ) a \) }
@end lilypond

@cindex PhrasingSlur, ejemplo de sobreescritura
@cindex positions, propiedad, ejemplo

@noindent
Una posibilidad sería mover los dos extremos de la ligadura de
fraseo hacia arriba.  Podemos tratar de establecer el extremo
izquierdo a 2.5 espacios de pentagrama por encima de la tercera
línea y el extremo derecho a 4.5 también hacia arriba, y LilyPond
seleccionaría la ligadura de fraseo de entre las candidatas que ha
encontrado con sus extremos más cercanos a éstos:

@lilypond[quote,verbatim,fragment,ragged-right]
\once \override PhrasingSlur.positions = #'(2.5 . 4.5)
a'8 \( ( a''16 ) a'' \)
@end lilypond

Esto supone una mejora, pero ¿por qué no bajar un poco el extremo
derecho de la ligadura de expresión?  Si lo probamos, veremos que
no se puede hacer así.  Ello es a causa de que no existen
ligaduras de expresión candidatas que estén más bajas que la que
ya se ha seleccionado, y en este caso la propiedad
@code{positions} no tiene ningún efecto.  Sin embargo, las
ligaduras de unión, expresión y fraseo @emph{se pueden} colocar y
conformar de manera muy exacta cuando se necesita.  Para aprender
la manera de hacerlo, consulte @rnotationnamed{Modifying ties and slurs, Modificación de ligaduras de
unión y de expresión}.

Presentamos otro ejemplo.  Vemos que la barra choca con las
ligaduras:

@lilypond[quote,verbatim,ragged-right]
{
  \time 4/2
  <<
    \relative { c'1~ 2. e8 f }
    \\
    \relative {
      e''8 e e e
      e e e e
      f2 g
    }
  >>
  <<
    \relative { c'1~ 2. e8 f }
    \\
    \relative {
      e''8 e e e
      e e e e
      f2 g
    }
  >>
}
@end lilypond

@noindent
Esto se puede resolver manualmente elevando los dos extremos de la
barra desde su posición a 1.81 espacios de pentagrama bajo la
línea central hasta, digamos, 1 espacio:

@cindex Beam, ejemplo de sobreescritura
@cindex positions, propiedad, ejemplo

@lilypond[quote,verbatim,ragged-right]
{
  \time 4/2
  <<
    \relative { c'1~ 2. e8 f }
    \\
    \relative {
      \override Beam.positions = #'(-1 . -1)
      e''8 e e e
      e e e e
      f2 g
    }
  >>
  <<
    \relative { c'1~ 2. e8 f }
    \\
    \relative {
      e''8 e e e
      e e e e
      f2 g
      \revert Beam.positions
    }
  >>
}
@end lilypond

@noindent
Observe que la sobreescritura sigue aplicándose en la segunda voz
del segundo compás de corcheas, pero no a ninguna de las barras de
la primera voz, ni siquiera a las que están en el segundo compás,
que es posterior.  Tan pronto como la sobreescritura no pueda
tener ningún efecto, debería ser revertida como se muestra.

@node The force-hshift property
@unnumberedsubsubsec La propiedad @code{force-hshift} (forzar desplazamiento horizontal)

Ahora podremos ver cómo aplicar las correcciones finales al
ejemplo de Chopin que presentamos al final de @ref{I'm hearing voices},
que dejamos con este aspecto:

@lilypond[quote,verbatim,fragment,ragged-right]
\new Staff \relative {
  \key aes \major
  <<
    { c''2 aes4. bes8 }
    \\
    { <ees, c>2 des }
    \\
    \\
    { aes'2 f4 fes }
  >> |
  <c ees aes c>1 |
}
@end lilypond

@noindent
Es necesario que la nota interior del primer acorde (el La bemol
de la cuarta voz) no se aparte de la columna vertical de la nota
aguda, por lo que usamos @code{\shiftOff}.

En el segundo acorde preferimos que el Fa esté alineado con el La
bemol y que la nota grave se coloque ligeramente a la derecha para
evitar una colisión de las plicas.  Lo conseguimos ajustando el
valor de @code{force-hshift} en la @code{NoteColumn} del Re bemol
grave para moverlo a la derecha medio espacio de pentagrama, y
fijando @code{force-hshift} para el Fa al vaor cero.  Observe que
usamos @code{\once} para evitar que los ajustes se propaguen más
allá del momento musical inmediato, aunque en este pequeño ejemplo
podrían omitirse el @code{\once} y el segundo @code{\override} de
la cuarta voz.  Ello no supondría una buena práctica.

Presentamos a continuación el resultado final:

@cindex NoteColumn, ejemplo de sobreescritura
@cindex force-hshift, propiedad, ejemplo

@lilypond[quote,verbatim,fragment,ragged-right]
\new Staff \relative {
  \key aes \major
  <<
    { c''2 aes4. bes8 }
    \\
    { <ees, c>2 \once \override NoteColumn.force-hshift = 0.5 des }
    \\
    \\
    { \once \shiftOff aes'2 \once \shiftOff f4 fes }
  >> |
  <c ees aes c>1 |
}
@end lilypond


@node Real music example
@subsection Ejemplos reales de música

Finalizaremos esta sección sobre los trucos mostrando los pasos
que se deben tomar para tratar con un ejemplo complicado que
necesita varios trucos para producir el resultado deseado.  El
ejemplo se ha escogido deliberadamente para ilustrar el uso de la
Referencia de la Notación para resolver problemas de notación poco
comunes.  No es representativo del proceso de grabado más usual,
por lo que ¡le recomendamos que no deje que estas dificultades le
desanimen!  ¡Afortunadamente, las dificultades como éstas no son
muy comunes!

El ejemplo está extraído de la Primera Balada de Chopin, Op. 23,
compases 6 al 9, la transición entre el Lento inicial y el
Moderato.  Presentamos en primer lugar el aspecto que queremos que
tenga el resultado, pero para evitar complicar demasiado el
ejemplo hemos quitado las indicaciones dinámicas, las digitaciones
y el pedal.

@c The following should appear as music without code
@c This example should not be indexed
@c line-width ensures no break
@lilypond[quote,ragged-right,line-width=6\in]
rhMusic = \relative {
  \new Voice {
    r2 c''4.\( g8 |
    \once \override Tie.staff-position = #3.5
    bes1~ |
    \bar "||"
    \time 6/4
    \mergeDifferentlyHeadedOn
    \mergeDifferentlyDottedOn
    bes2.\tempo "Moderato" r8
    <<
      { c,8 d fis bes a }
      \new Voice {
        \voiceTwo
        c,8~
        % Reposition the c2 to the right of the merged note
        \once \override NoteColumn.force-hshift = #1.0
        % Move the c2 out of the main note column
        % so the merge will work
        \shiftOnn
        c2
      }
      \new Voice {
        \voiceThree
        s8
        % Stem on the d2 must be down to permit merging
        \stemDown
        % Stem on the d2 should be invisible
        \tweak Stem.transparent ##t
        d2
      }
      \new Voice {
        \voiceFour
        s4 fis4.
      }
    >> |
    \mergeDifferentlyHeadedOff
    \mergeDifferentlyDottedOff
    g2.\)
  }
}

lhMusic = \relative {
  r2 <c' g ees>2( |
  <d g, d>1)\arpeggio |
  r2. d,,4 r4 r |
  r4
}

\score {
  \new PianoStaff <<
    \new Staff = "RH"  <<
      \key g \minor
      \rhMusic
    >>
    \new Staff = "LH" <<
      \key g \minor
      \clef "bass"
      \lhMusic
    >>
  >>
}
@end lilypond

Observamos en primer lugar que la parte de la mano derecha del
tercer compás requiere cuatro voces.  Son las cinco corcheas
unidas por una barra, la nota Do ligada, el Re blanca que se funde
con el Re corchea, y el Fa sostenido negra con puntillo, que
también está fundida con la corchea de su misma altura.  Todo lo
demás está en una sola voz, así que lo más fácil es introducir
estas tres voces adicionales, en el momento en que se necesiten y
de forma temporal.  Si ha olvidado cómo hacerlo, lea las secciones
@ref{I'm hearing voices} y @ref{Explicitly instantiating voices}.  Aquí tomamos la
decisión de utilizar voces instanciadas explícitamente para el
pasaje polifónico, dado que LilyPond es más probable que pueda
evitar las colisiones si todas las voces se instancian
explícitamente de esta forma.

Vamos a comenzar introduciendo las notas como dos variables y
disponiendo la estructura de pentagramas en un bloque Score, y
veremos qué produce LilyPond de forma predeterminada:

@c line-width ensures no break
@lilypond[quote,verbatim,ragged-right,line-width=6\in]
rhMusic = \relative {
  \new Voice {
    r2 c''4. g8 |
    bes1~ |
    \time 6/4
    bes2. r8
    % Start polyphonic section of four voices
    <<
      { c,8 d fis bes a }  % continuation of main voice
      \new Voice {
        \voiceTwo
        c,8~ 2
      }
      \new Voice {
        \voiceThree
        s8 d2
      }
      \new Voice {
        \voiceFour
        s4 fis4.
      }
    >> |
    g2.  % continuation of main voice
  }
}

lhMusic = \relative {
  r2 <c' g ees>2 |
  <d g, d>1 |
  r2. d,,4 r4 r |
  r4
}

\score {
  \new PianoStaff <<
    \new Staff = "RH"  <<
      \key g \minor
      \rhMusic
    >>
    \new Staff = "LH" <<
      \key g \minor
      \clef "bass"
      \lhMusic
    >>
  >>
}
@end lilypond

Todas las notas son correctas, pero el aspecto está lejos de ser
satisfactorio.  La ligadura de unión choca con el cambio de
compás, ciertas notas no se funden correctamente, y faltan algunos
elementos de notación.  En primer lugar trataremos con lo más
fácil.  Podemos añadir fácilmente la ligadura de expresión de la
mano izquierda y la ligadura de fraseo de la mano derecha, pues
todo ello se estudió en el Tutorial.  Al hacerlo así obtenemos:

@c line-width ensures no break
@lilypond[quote,verbatim,ragged-right,line-width=6\in]
rhMusic = \relative {
  \new Voice {
    r2 c''4.\( g8 |
    bes1~ |
    \time 6/4
    bes2. r8
    % Start polyphonic section of four voices
    <<
      { c,8 d fis bes a }  % continuation of main voice
      \new Voice {
        \voiceTwo
        c,8~ 2
      }
      \new Voice {
        \voiceThree
        s8 d2
      }
      \new Voice {
        \voiceFour
        s4 fis4.
      }
    >> |
    g2.\)  % continuation of main voice
  }
}

lhMusic = \relative {
  r2 <c' g ees>2( |
  <d g, d>1) |
  r2. d,,4 r4 r |
  r4
}

\score {
  \new PianoStaff <<
    \new Staff = "RH"  <<
      \key g \minor
      \rhMusic
    >>
    \new Staff = "LH" <<
      \key g \minor
      \clef "bass"
      \lhMusic
    >>
  >>
}
@end lilypond

El primer compás ahora es correcto.  El segundo compás contiene un
arpegio y acaba en una doble barra.  ¿Cómo los hacemos, pues no
han sido mencionados en este Manual de Aprendizaje?  Aquí es donde
tenemos que volver e la Referencia de la Notación.  Buscando la
palabra @q{arpegio} y @q{línea divisoria} en el índice nos muestra
rápidamente que un arpegio se hace añadiendo @code{\arpeggio} a un
acorde, y la doble barra se produce por medio de la instrucción
@code{\bar "||"}.  Esto podemos hacerlo fácilmente.  A
continuación tenemos que corregir la colisión entre la ligadura de
unión y la indicación de compás.  Esto se hace mejor moviendo la
ligadura hacia arriba.  Estudiamos cómo mover objetos
anteriormente en @ref{Moving objects}, donde dice que los objetos
que están situados de forma relativa al pentagrama se pueden mover
verticalmente sobreescribiendo su propiedad @code{staff-position},
que se especifica en unidades de medio espacio de pentagrama
respecto de la línea central del pentagrama.  Así pues, la
sobreescritura siguiente colocada justo antes de la primera nota
ligada subirá la ligadura 3.5 medios espacios de pentagrama por
encima de la línea central:

@code{\once \override Tie.staff-position = #3.5}

Con esto se completa el compás dos, dando como resultado:

@c line-width ensures no break
@lilypond[quote,verbatim,ragged-right,line-width=6\in]
rhMusic = \relative {
  \new Voice {
    r2 c''4.\( g8 |
    \once \override Tie.staff-position = #3.5
    bes1~ |
    \bar "||"
    \time 6/4
    bes2. r8
    % Start polyphonic section of four voices
    <<
      { c,8 d fis bes a }  % continuation of main voice
      \new Voice {
        \voiceTwo
        c,8~ 2
      }
      \new Voice {
        \voiceThree
        s8 d2
      }
      \new Voice {
        \voiceFour
        s4 fis4.
      }
    >> |
    g2.\)  % continuation of main voice
  }
}

lhMusic = \relative {
  r2 <c' g ees>2( |
  <d g, d>1)\arpeggio |
  r2. d,,4 r4 r |
  r4
}

\score {
  \new PianoStaff <<
    \new Staff = "RH"  <<
      \key g \minor
      \rhMusic
    >>
    \new Staff = "LH" <<
      \key g \minor
      \clef "bass"
      \lhMusic
    >>
  >>
}
@end lilypond

Vayamos ahora al tercer compás y comienzo de la sección Moderato.
El tutorial nos enseñó cómo escribir una indicación de tempo
mediante la instrucción @code{\tempo}, por lo que añadir
@qq{Moderato} es fácil.  Pero ahora ¿cómo fundimos notas que están
en distintas voces?  Aquí es donde debemos volver a buscar ayuda
en el manual de Referencia de la notación. Al buscar la palabra
@qq{merge} (mezcla) en el índice de la Referencia de la notación
llegamos rápidamente a las instrucciones para mezclar notas con
distinta cabeza y con o sin puntillo, en @rnotationnamed{Collision resolution, Resolución de las
colisiones}.  En nuestro ejemplo tenemos que fusionar ambos tipos
de nota en el transcurso de la sección polifónica del compás 3;
por tanto, en virtud de la información que aparece en la
Referencia de la Notación, escribimos

@example
\mergeDifferentlyHeadedOn
\mergeDifferentlyDottedOn
@end example

@noindent
al principio de la sección, y

@example
\mergeDifferentlyHeadedOff
\mergeDifferentlyDottedOff
@end example

@noindent
al final, dando como resultado:

@c line-width ensures no break
@lilypond[quote,ragged-right,line-width=6\in]
rhMusic = \relative {
  \new Voice {
    r2 c''4.\( g8 |
    \once \override Tie.staff-position = #3.5
    bes1~ |
    \bar "||"
    \time 6/4
    bes2.\tempo "Moderato" r8
    \mergeDifferentlyHeadedOn
    \mergeDifferentlyDottedOn
    % Start polyphonic section of four voices
    <<
      { c,8 d fis bes a }  % continuation of main voice
      \new Voice {
        \voiceTwo
        c,8~ 2
      }
      \new Voice {
        \voiceThree
        s8 d2
      }
      \new Voice {
        \voiceFour
        s4 fis4.
      }
    >> |
    \mergeDifferentlyHeadedOff
    \mergeDifferentlyDottedOff
    g2.\)  % continuation of main voice
  }
}

lhMusic = \relative {
  r2 <c' g ees>2( |
  <d g, d>1)\arpeggio |
  r2. d,,4 r4 r |
  r4
}

\score {
  \new PianoStaff <<
    \new Staff = "RH"  <<
      \key g \minor
      \rhMusic
    >>
    \new Staff = "LH" <<
      \key g \minor
      \clef "bass"
      \lhMusic
    >>
  >>
}
@end lilypond

Estas sobreescrituras han fundido los dos Fa sostenido, pero no
los dos Re.  ¿Por qué no?  La respuesta está en la misma sección
de la Referencia de la Notación: las notas que se fusionan deben
tener las plicas en direcciones opuestas y dos notas no se pueden
fusionar bien si hay una tercera nota en la misma columna.  Aquí
los dos Re tienen las plicas hacia arriba y hay una tercera nota:
el Do.  Sabemos cómo cambiar la dirección de la plica usando
@code{\stemDown}, y la Referencia de la Notación también explica
cómo mover el Do: aplicar un desplazamiento usando una de las
instrucciones @code{\shift}.  Pero ¿cuál?  El Do está en la voz
dos que tiene desactivado el desplazamiento, y los dos Re están en
las voces uno y tres, que tienen el desplazamiento desactivado y
activado, respectivamente.  Por ello tenemos que desplazar el Do
un nivel más todavía, usando @code{\shiftOnn} para evitar que
interfiera con los dos Re.  Al aplicar estos cambios obtenemos:

@cindex Tie, ejemplo de sobreescritura
@cindex staff-position, propiedad, ejemplo

@c line-width ensures no break
@lilypond[quote,verbatim,ragged-right,line-width=6\in]
rhMusic = \relative {
  \new Voice {
    r2 c''4.\( g8 |
    \once \override Tie.staff-position = #3.5
    bes1~ |
    \bar "||"
    \time 6/4
    bes2.\tempo "Moderato" r8
    \mergeDifferentlyHeadedOn
    \mergeDifferentlyDottedOn
    % Start polyphonic section of four voices
    <<
      { c,8 d fis bes a }  % continuation of main voice
      \new Voice {
        \voiceTwo
        % Move the c2 out of the main note column
        % so the merge will work
        c,8~ \shiftOnn c2
      }
      \new Voice {
        \voiceThree
        % Stem on the d2 must be down to permit merging
        s8 \stemDown d2
      }
      \new Voice {
        \voiceFour
        s4 fis4.
      }
    >> |
    \mergeDifferentlyHeadedOff
    \mergeDifferentlyDottedOff
    g2.\)  % continuation of main voice
  }
}

lhMusic = \relative {
  r2 <c' g ees>2( |
  <d g, d>1)\arpeggio |
  r2. d,,4 r4 r |
  r4
}

\score {
  \new PianoStaff <<
    \new Staff = "RH"  <<
      \key g \minor
      \rhMusic
    >>
    \new Staff = "LH" <<
      \key g \minor
      \clef "bass"
      \lhMusic
    >>
  >>
}
@end lilypond

Ya casi está.  Solamente quedan dos problemas: la plica hacia
abajo sobre el Re fusionado no tendría que estar ahí, y el Do
estaría mejor colocado a la derecha de los Re.  Sabemos cómo hacer
las dos cosas a partir de trucos anteriores: hacemos la plica
transparente, y movemos el Do con la propiedad
@code{force-hshift}.  Aquí tenemos el resultado final:

@cindex NoteColumn, ejemplo de sobreescritura
@cindex force-hshift, propiedad, ejemplo
@cindex Stem, ejemplo de sobreescritura
@cindex transparent, propiedad, ejemplo

@c line-width ensures no break
@lilypond[quote,verbatim,ragged-right,line-width=6\in]
rhMusic = \relative {
  \new Voice {
    r2 c''4.\( g8 |
    \once \override Tie.staff-position = #3.5
    bes1~ |
    \bar "||"
    \time 6/4
    bes2.\tempo "Moderato" r8
    \mergeDifferentlyHeadedOn
    \mergeDifferentlyDottedOn
    % Start polyphonic section of four voices
    <<
      { c,8 d fis bes a }  % continuation of main voice
      \new Voice {
        \voiceTwo
        c,8~
        % Reposition the c2 to the right of the merged note
        \once \override NoteColumn.force-hshift = #1.0
        % Move the c2 out of the main note column
        % so the merge will work
        \shiftOnn
        c2
      }
      \new Voice {
        \voiceThree
        s8
        % Stem on the d2 must be down to permit merging
        \stemDown
        % Stem on the d2 should be invisible
        \tweak Stem.transparent ##t
        d2
      }
      \new Voice {
        \voiceFour
        s4 fis4.
      }
    >> |
    \mergeDifferentlyHeadedOff
    \mergeDifferentlyDottedOff
    g2.\)  % continuation of main voice
  }
}

lhMusic = \relative {
  r2 <c' g ees>2( |
  <d g, d>1)\arpeggio |
  r2. d,,4 r4 r |
  r4
}

\score {
  \new PianoStaff <<
    \new Staff = "RH"  <<
      \key g \minor
      \rhMusic
    >>
    \new Staff = "LH" <<
      \key g \minor
      \clef "bass"
      \lhMusic
    >>
  >>
}
@end lilypond


@node Further tweaking
@section Trucajes adicionales

@menu
* Other uses for tweaks::
* Using variables for layout adjustments::
* Style sheets::
* Other sources of information::
* Advanced tweaks with Scheme::
@end menu

@node Other uses for tweaks
@subsection Otras aplicaciones de los trucos

@menu
* Tying notes across voices::
* Simulating a fermata in MIDI::
@end menu

@cindex eliminar objetos
@cindex objetos, eliminar

@node Tying notes across voices
@unnumberedsubsubsec Unir notas entre voces distintas

@cindex ligar notas entre voces distintas

El ejemplo siguiente muestra cómo conectar notas que están en
distintas voces utilizando ligaduras de unión.  Normalmente sólo
se pueden conectar mediante ligaduras de unión notas que estén en
la misma voz.  Usando dos voces, con las notas ligadas en una de
ellas:

@lilypond[quote]
<< { b'8~ 8\noBeam } \\ { b'8[ g'] } >>
@end lilypond

@noindent
y borrando la primera plica (con su corchete) hacia arriba en esa
voz, da la impresión de que la ligadura se cruza entre las voces:

@funindex \omit
@cindex Stem, example of removing
@cindex Flag, example of removing
@cindex @code{\omit}, example
@cindex example of @code{\omit}

@lilypond[quote,verbatim]
<<
  {
    \once \omit Stem
    \once \omit Flag
    b'8~ 8\noBeam
  }
\\
  { b'8[ g'] }
>>
@end lilypond

@morerefs
Manual de aprendizaje
@ref{The once prefix},
@ref{The stencil property}.


@node Simulating a fermata in MIDI
@unnumberedsubsubsec Simulación de un calderón en el MIDI

@cindex sello, uso de la propiedad
@cindex fermata, realización en MIDI

Para los objetos fuera-del-pentagrama, normalmente es mejor
sobreescribir la propiedad @code{stencil} («sello») del objeto que
su propiedad @code{transparent} cuando desee quitarlos de la
salida impresa.  Mediante el establecimiento de la propiedad
@code{stencil} de un objeto al valor @code{#f} podemos quitar el
objeto por completo de la salida impresa.  Esto significa que no
tiene efecto sobre la colocación de otros objetos que pudieran
colocarse en relación a él.

Por ejemplo, si quisiéramos cambiar la indicación metronómica con
el propósito de simular un calderón en la salida MIDI, seguramente
no querríamos que la indicación metronómica apareciese en la
salida impresa, y no querríamos influir sobre la separación entre
los dos sistemas ni sobre la colocación de las anotaciones
adyacentes sobre el pentagrama.  Por lo tanto, establecer su
propiedad @code{stencil} al valor @code{#f} sería la mejor manera.
Mostramos aquí el efecto de los dos métodos:

@cindex MetronomeMark, ejemplo de sobreescritura
@cindex transparent, propiedad, ejemplo

@lilypond[quote,verbatim,ragged-right]
\score {
  \relative {
    % Visible tempo marking
    \tempo 4=120
    a'4 a a
    \once \hide Score.MetronomeMark
    % Invisible tempo marking to lengthen fermata in MIDI
    \tempo 4=80
    a4\fermata |
    % New tempo for next section
    \tempo 4=100
    a4 a a a |
  }
  \layout { }
  \midi { }
}
@end lilypond

@cindex MetronomeMark, ejemplo de sobreescritura
@cindex stencil, propiedad, ejemplo

@lilypond[quote,verbatim,ragged-right]
\score {
  \relative {
    % Visible tempo marking
    \tempo 4=120
    a'4 a a
    \once \omit Score.MetronomeMark
    % Invisible tempo marking to lengthen fermata in MIDI
    \tempo 4=80
    a4\fermata |
    % New tempo for next section
    \tempo 4=100
    a4 a a a |
  }
  \layout { }
  \midi { }
}
@end lilypond

@noindent
Ambos métodos quitan de la salida impresa la indicación
metronómica que alarga el calderón, y los dos afectan al tempo del
MIDI tal y como queríamos, pero la indicación metronómica
transparente de la primera línea fuerza una colocación muy alta de
la indicación de tempo que sigue, mientras que la segunda (con el
sello suprimido) no lo hace.

@morerefs
Glosario musical:
@rglos{system}.

@node Using variables for layout adjustments
@subsection Uso de variables para los ajustes de disposición

@cindex variables, usar para sobreescrituras
@cindex sobreescrituras, usar variablas para
@cindex ajustes, usar variables para
@cindex ajustes de disposición, usar variables para hacer

Las instrucciones de sobreescritura son con frecuencia largas y
tediosas de escribir, y se tienen que escribir de forma
absolutamente correcta.  Si las mismas sobreescrituras se van a
utilizar muchas veces, podría merecer la pena definir variables
para guardarlas.

Supongamos que queremos realzar ciertas palabras de la letra de
una canción imprimiéndolas en cursiva y negrita.  Las
instrucciones @code{\italic} y @code{\bold} sólo funcionan dentro
de la letra de las canciones si están incluidas, junto con la
palabra o palabras que se pretenden modificar, dentro de un
@code{\markup}, lo que las hace tediosas de escribir. La necesidad
de incluir las propias palabras impide que se puedan usar en
variables simples. ¿Podríamos, como alternativa, utilizar las
instrucciones @code{\override} y @code{\revert}?

@example
\override Lyrics.LyricText.font-shape = #'italic
\override Lyrics.LyricText.font-series = #'bold

\revert Lyrics.LyricText.font-shape
\revert Lyrics.LyricText.font-series
@end example

Estas instrucciones también serían extremadamente tediosas de
escribir si hubiera muchas palabras que quisiéramos subrayar.
Pero sí @emph{podemos} definirlas como dos variables y usarlas
para delimitar las palabras que destacar.  Otra ventaja de la
utilización de variables para estas sobreescrituras es que ya no
son necesarios los espacios que rodean al punto, puesto que no se
interpretan directamente en el modo @code{\lyricmode}.  He aquí un
ejemplo de esto, aunque en la práctica quizá elegiríamos unos
nombres de variable más cortos para que fueran más rápidos de
teclear:

@cindex LyricText, ejemplo de sobreescritura
@cindex font-shape, propiedad, ejemplo
@cindex font-series, propiedad, ejemplo

@lilypond[quote,verbatim]
emphasize = {
  \override Lyrics.LyricText.font-shape = #'italic
  \override Lyrics.LyricText.font-series = #'bold
}

normal = {
  \revert Lyrics.LyricText.font-shape
  \revert Lyrics.LyricText.font-series
}

global = { \key c \major \time 4/4 \partial 4 }

SopranoMusic = \relative { c'4 | e4. e8 g4 g    | a4   a   g  }
AltoMusic    = \relative { c'4 | c4. c8 e4 e    | f4   f   e  }
TenorMusic   = \relative  { e4 | g4. g8 c4.  b8 | a8 b c d e4 }
BassMusic    = \relative  { c4 | c4. c8 c4 c    | f8 g a b c4 }

VerseOne = \lyricmode {
  E -- | ter -- nal \emphasize Fa -- ther, | \normal strong to save,
}

VerseTwo = \lyricmode {
  O | \once \emphasize Christ, whose voice the | wa -- ters heard,
}

VerseThree = \lyricmode {
  O | \emphasize Ho -- ly Spi -- rit, | \normal who didst brood
}

VerseFour = \lyricmode {
  O | \emphasize Tri -- ni -- ty \normal of | love and pow'r
}

\score {
  \new ChoirStaff <<
    \new Staff <<
      \clef "treble"
      \new Voice = "Soprano"  { \voiceOne \global \SopranoMusic }
      \new Voice = "Alto" { \voiceTwo \AltoMusic }
      \new Lyrics \lyricsto "Soprano" { \VerseOne }
      \new Lyrics \lyricsto "Soprano" { \VerseTwo }
      \new Lyrics \lyricsto "Soprano" { \VerseThree }
      \new Lyrics \lyricsto "Soprano" { \VerseFour }
    >>
    \new Staff <<
      \clef "bass"
      \new Voice = "Tenor" { \voiceOne \TenorMusic }
      \new Voice = "Bass"  { \voiceTwo \BassMusic }
    >>
  >>
}
@end lilypond


@node Style sheets
@subsection Hojas de estilo

La salida que produce LilyPond se puede modificar profundamente;
consulte @ref{Tweaking output} para leer detalles sobre este
asunto.  Pero ¿qué ocurre si tiene muchos archivos a los que les
quiere aplicar sus propios trucos?  O ¿qué ocurre si,
sencillamente, quiere separar los trucos de la propia música?
Todo esto es bastante fácil de conseguir.

Veamos un ejemplo.  No se preocupe si no entiende las partes que
tienen todos los @code{#()}.  Esto se explicará en @ref{Advanced tweaks with Scheme}.

@lilypond[quote,verbatim,ragged-right]
mpdolce =
  \tweak self-alignment-X #-0.6
  #(make-dynamic-script
    #{ \markup { \dynamic mp \normal-text \italic \bold dolce } #})

inst =
#(define-music-function
     (string)
     (string?)
   #{ <>^\markup \bold \box #string #})

\relative {
  \tempo 4=50
  a'4.\mpdolce d8 cis4--\glissando a |
  b4 bes a2 |
  \inst "Clarinet"
  cis4.\< d8 e4 fis |
  g8(\! fis)-. e( d)-. cis2 |
}
@end lilypond

Hagamos algo respecto a las definiciones @code{mpdolce} e
@code{inst}.  Éstas producen la salida que deseamos, pero quizá
las querríamos utilizar en otra pieza.  Podríamos simplemente
copiarlas y pegarlas al principio de cada archivo, pero sería
bastante molesto.  También hace que se queden las definiciones a
la vista dentro de nuestros archivos de música, y yo personalmente
encuentro todos los @code{#()} bastante poco estéticos.  Los vamos
a esconder dentro de otro archivo:

@example
%%% guardar esto en un archivo con el nombre "definiciones.ily"
mpdolce =
  \tweak self-alignment-X #-0.6
  #(make-dynamic-script
    #@{ \markup @{ \dynamic mp \normal-text \italic \bold dolce @} #@})

inst =
#(define-music-function
     (string)
     (string?)
   #@{ <>^\markup \bold \box #string #@})
@end example

Haremos referencia a este archivo utilizando la instrucción
@code{\include} al principio del archivo de música (la extensión
@code{.ily} se utiliza para distinguir este archivo de inclusión
--que se supone que no debe ser procesado de forma independiente--
del archivo principal).  Ahora modificaremos la música (guardemos
este archivo como @file{musica.ly}).

@c  We have to do this awkward example/lilypond-non-verbatim
@c  because we can't do the \include stuff in the manual.

@example
\include "definiciones.ily"

\relative @{
  \tempo 4=50
  a'4.\mpdolce d8 cis4--\glissando a |
  b4 bes a2 |
  \inst "Clarinete"
  cis4.\< d8 e4 fis |
  g8(\! fis)-. e( d)-. cis2 |
@}
@end example

@lilypond[quote,ragged-right]
mpdolce =
  \tweak self-alignment-X #-0.6
  #(make-dynamic-script
    #{ \markup { \dynamic mp \normal-text \italic \bold dolce } #})

inst =
#(define-music-function
     (string)
     (string?)
   #{ <>^\markup \bold \box #string #})

\relative {
  \tempo 4=50
  a'4.\mpdolce d8 cis4--\glissando a |
  b4 bes a2 |
  \inst "Clarinet"
  cis4.\< d8 e4 fis |
  g8(\! fis)-. e( d)-. cis2 |
}
@end lilypond

Eso tiene mejor aspecto, pero haremos algunos cambios más.  El
glissando es difícil de ver, así que lo haremos más grueso y lo
acercaremos a las cabezas de las notas.  Pondremos la indicación
metronómica encima de la clave, en lugar de ir encima de la
primera nota.  Y por último, mi profesor de composición odia las
indicaciones de compás @q{C}, así que la convertiremos en @q{4/4}.

Sin embargo, no debemos cambiar el archivo @file{musica.ly}.
Sustituyamos nuestro archivo @file{definiciones.ily} con éste:

@example
%%%  definiciones.ily
mpdolce =
  \tweak self-alignment-X #-0.6
  #(make-dynamic-script
    #@{ \markup @{ \dynamic mp \normal-text \italic \bold dolce @} #@})

inst =
#(define-music-function
     (string)
     (string?)
   #@{ <>^\markup \bold \box #string #@})

\layout@{
  \context @{
    \Score
    \override MetronomeMark.extra-offset = #'(-5 . 0)
    \override MetronomeMark.padding = #'3
  @}
  \context @{
    \Staff
    \override TimeSignature.style = #'numbered
  @}
  \context @{
    \Voice
    \override Glissando.thickness = #3
    \override Glissando.gap = #0.1
  @}
@}
@end example

@lilypond[quote,ragged-right]
mpdolce =
  \tweak self-alignment-X #-0.6
  #(make-dynamic-script
    #{ \markup { \dynamic mp \normal-text \italic \bold dolce } #})

inst =
#(define-music-function
     (string)
     (string?)
   #{ <>^\markup \bold \box #string #})

\layout{
  \context {
    \Score
    \override MetronomeMark.extra-offset = #'(-5 . 0)
    \override MetronomeMark.padding = #'3
  }
  \context {
    \Staff
    \override TimeSignature.style = #'numbered
  }
  \context {
    \Voice
    \override Glissando.thickness = #3
    \override Glissando.gap = #0.1
  }
}

\relative {
  \tempo 4=50
  a'4.\mpdolce d8 cis4--\glissando a |
  b4 bes a2 |
  \inst "Clarinet"
  cis4.\< d8 e4 fis |
  g8(\! fis)-. e( d)-. cis2 |
}
@end lilypond

¡Eso tiene un aspecto mucho mejor!  Ahora suponga que quiere
publicar esta pieza.  A mi profesor de composición no le gustan
las indicaciones de compás @q{C}, pero yo les tengo cierto cariño.
Copiaremos el archivo actual @file{definiciones.ily} a
@file{publicar-web.ily} y modificaremos éste.  Como el propósito
de esta música es producir un PDF que va a mostrarse en la
pantalla, también vamos a aumentar el tamaño general de la salida.

@example
%%%  publicar-web.ily
mpdolce =
  \tweak self-alignment-X #-0.6
  #(make-dynamic-script
    #@{ \markup @{ \dynamic mp \normal-text \italic \bold dolce @} #@})

inst =
#(define-music-function
     (string)
     (string?)
   #@{ <>^\markup \bold \box #string #@})

#(set-global-staff-size 23)

\layout@{
  \context @{
    \Score
    \override MetronomeMark.extra-offset = #'(-5 . 0)
    \override MetronomeMark.padding = #'3
  @}
  \context @{
    \Staff
  @}
  \context @{
    \Voice
    \override Glissando.thickness = #3
    \override Glissando.gap = #0.1
  @}
@}
@end example

@lilypond[quote,ragged-right]
mpdolce =
  \tweak self-alignment-X #-0.6
  #(make-dynamic-script
    #{ \markup { \dynamic mp \normal-text \italic \bold dolce } #})

inst =
#(define-music-function
     (string)
     (string?)
   #{ <>^\markup \bold \box #string #})

#(set-global-staff-size 23)

\layout{
  \context { \Score
    \override MetronomeMark.extra-offset = #'(-5 . 0)
    \override MetronomeMark.padding = #'3
  }
  \context { \Voice
    \override Glissando.thickness = #3
    \override Glissando.gap = #0.1
  }
}

\relative {
  \tempo 4=50
  a'4.\mpdolce d8 cis4--\glissando a |
  b4 bes a2 |
  \inst "Clarinet"
  cis4.\< d8 e4 fis |
  g8(\! fis)-. e( d)-. cis2 |
}
@end lilypond

Ahora, en la música, simplemente sustituyo @code{\include
"definiciones.ily"} por @code{\include "publicar-web.ily"}.  Por
supuesto, podríamos hacer esto aún más práctico.  Podríamos hacer
un archivo @file{definiciones.ily} que contuviera solamente las
definiciones de @code{mpdolce} y de @code{inst}, un archivo
@file{publicar-web.ily} que contuviera solamente la sección
@code{\layout} que se mostró en el ejemplo, y un archivo
@file{universidad.ily} que contendría solamente los trucos para
producir la salida que le gusta a mi profesor.  El comienzo de
@file{musica.ly} tendría entonces este aspecto:

@example
\include "definiciones.ily"

%%%  ¡Quitar el comentario de una sola de estas líneas!
\include "publicar-web.ily"
%\include "universidad.ily"
@end example

Este enfoque puede ser útil incluso si va a producir sólo un
conjunto de particellas.  Yo utilizo media docena de archivos de
@q{hojas de estilo} para mis proyectos.  Comienzo todos los
archivos de música con @code{\include "../global.ily"}, que
contiene

@example
%%%   global.ily
\version @w{"@version{}"}

#(ly:set-option 'point-and-click #f)

\include "../iniciar/iniciar-definiciones.ily"
\include "../iniciar/iniciar-disposicion.ily"
\include "../iniciar/iniciar-cabeceras.ily"
\include "../iniciar/iniciar-papel.ily"
@end example


@node Other sources of information
@subsection Otras fuentes de información

La documentación del manual de Referencia de Funcionamiento
Interno contiene montañas de información sobre LilyPond, pero se
puede obtener más información aún leyendo los archivos internos de
LilyPond.  Para echarles un vistazo, en primer lugar debe buscar
la carpeta correspondiente a su sistema.  La ubicación de esta
carpeta depende (a) de si consiguió el programa LilyPond
descargando un binario precompilado desde el sitio web
lilypond.org o si lo instaló mediante un gestor de paquetes (es
decir, distribuido con GNU/Linux, o instalado bajo fink o cygwin)
o fue compilado a partir de la fuente, y (b) de qué sistema
operativo está utilizando:

@subsubsubheading Descargado de lilypond.org

@itemize @bullet
@item GNU/Linux

Diríjase a
@example
@file{@var{CARPETA_DE_INSTALACIÓN}/lilypond/usr/@/share/lilypond/current/}
@end example

@item MacOS X

Diríjase a
@example
@file{@var{CARPETA_DE_INSTALACIÓN}/LilyPond.app/Contents/@/Resources/share/lilypond/current/}
@end example

bien haciendo @code{cd} hacia este directorio desde el Terminal, o
bien manteniendo pulsada la tecla de Control y haciendo click
sobre la aplicación de LilyPond, y allí eligiendo @q{Mostrar el
contenido del paquete}.

@item Windows

Mediante el Explorador de Windows, diríjase a
@example
@file{@var{CARPETA_DE_INSTALACIÓN}/LilyPond/usr/@/share/lilypond/current/}
@end example

@end itemize

@subsubsubheading Instalado mediante un gestor de paquetes o compilado a partir de la fuente

Diríjase a @file{@var{PREFIJO}/share/lilypond/@var{X.Y.Z}/}, donde
@var{PREFIJO} se encuentra determinado por su administrador de
paquetes o guión @code{configure}, y @var{X.Y.Z} es el número de
la versión de LilyPond.

@smallspace

Dentro de esta carpeta, las dos subcarpetas interesantes son

@itemize
@item @file{ly/} - contiene archivos en formato LilyPond
@item @file{scm/} - contiene archivos en formato Scheme
@end itemize

Vamos a comenzar observando algunos archivos que están en
@file{ly/}.  Abra @file{ly/property-init.ly} con un editor de
textos.  El mismo que usaría normalmente para los archivos
@file{.ly} servirá perfectamente.  Este archivo contiene las
definiciones de todas las instrucciones estándar predefinidas de
LilyPond, como por ejemplo @code{\tieUp} y @code{\slurDotted}.
Podrá ver que no son nada más que definiciones de variables que
contienen una o varias instrucciones @code{\override}.  Por
ejemplo, @code{\tieDotted} está definido de tal forma que su valor
es:

@example
tieDotted = @{
  \override Tie.dash-period = #0.75
  \override Tie.dash-fraction = #0.1
@}
@end example

Si no le gustan los valores predeterminados, estas instrucciones
predefinidas se pueden redefinir con facilidad como cualquier otra
variable, al principio de su archivo de código de entrada.

Los siguientes son los archivos más útiles que se encuentran en
@file{ly/}:

@multitable @columnfractions .4 .6
@headitem Archivo
  @tab Contenido
@item @file{ly/engraver-init.ly}
  @tab Definiciones de Contextos de grabadores
@item @file{ly/paper-defaults-init.ly}
  @tab especificaciones de valores predeterminados relacionados con el papel
@item @file{ly/performer-init.ly}
  @tab Definiciones de Contextos de interpretación
@item @file{ly/property-init.ly}
  @tab Definiciones de todas las instrucciones predefinidas que son comunes
@item @file{ly/spanner-init.ly}
  @tab Definiciones de las instrucciones predefinidas relacionadas con los objetos de extensión
@end multitable

Otros ajustes (como las definiciones de las instrucciones de
marcado) se almacenan como archivos @file{.scm} (de Scheme).  El
lenguaje de programación Scheme se utiliza para proporcionar un
interfaz programable en el funcionamiento interno de LilyPond.
Cualquier explicación adicional sobre estos archivos se encuentra
por el momento fuera del ámbito de este manual, porque se
requieren conocimientos del lenguaje Scheme.  Se advierte a los
usuarios que se necesita una importante cantidad de conocimientos
técnicos o de tiempo para comprender el lenguaje Scheme y estos
archivos (véase @rextendnamed{Scheme tutorial, Tutorial de Scheme}).

Si ya tiene estos conocimientos, los archivos de Scheme que pueden
interesarle son:

@multitable @columnfractions .4 .6
@headitem Archivo
  @tab Contenido
@item @file{scm/auto-beam.scm}
  @tab Valores predeterminados de sub-barrado
@item @file{scm/define-grobs.scm}
  @tab valores predeterminados de las propiedades de grobs
@item @file{scm/define-markup-commands.scm}
  @tab Especificar todas las instrucciones de marcado
@item @file{scm/midi.scm}
  @tab Ajustes predeterminados para la salida MIDI
@item @file{scm/output-lib.scm}
  @tab Ajustes que afectan al aspecto de los trastes, colores, alteraciones, lineas divisorias, etc.
@item @file{scm/parser-clef.scm}
  @tab Definiciones de las claves contempladas
@item @file{scm/script.scm}
  @tab Ajustes predeterminados para las articulaciones
@end multitable


@node Advanced tweaks with Scheme
@subsection Trucos avanzados con Scheme

Aunque es posible hacer muchas cosas con las instrucciones
@code{\override} y @code{\tweak} , tenemos una forma incluso más
poderosa de modificar el funcionamiento de LilyPond, a través de
un interface programable hacia las operaciones internas de
LilyPond.  Se puede incorporar código escrito en el lenguaje de
programación Scheme, directamente en el mecanismo de
funcionamiento de LilyPond.  Por supuesto, para hacer esto se
necesitan al menos unos conocimientos básicos de programación en
Scheme, y damos una introducción en el @rextendnamed{Scheme tutorial, Tutorial de
Scheme}.

Como ejemplo que ilustra una de las muchas posibilidades, en lugar
de dar a una propiedad un valor constante, se puede establecer al
resultado de un procedimiento de Scheme que se invoca cada vez que
LilyPond accede a esta propiedad.  La propiedad se puede
establecer dinámicamente a un valor determinado por el
procedimiento en el momento en que se invoca.  En este ejemplo
damos a las cabezas de las notas un color que depende de su
posición dentro del pentagrama.

@cindex x11-color, función, ejemplo de utilización
@cindex NoteHead, ejemplo de sobreescritura
@cindex color, propiedad, establecer a procedimiento de Scheme

@lilypond[quote,verbatim,ragged-right]
#(define (color-notehead grob)
   "Color the notehead according to its position on the staff."
   (let ((mod-position (modulo (ly:grob-property grob 'staff-position)
                               7)))
     (case mod-position
       ;;   Return rainbow colors
       ((1) (x11-color 'red    ))  ; for C
       ((2) (x11-color 'orange ))  ; for D
       ((3) (x11-color 'yellow ))  ; for E
       ((4) (x11-color 'green  ))  ; for F
       ((5) (x11-color 'blue   ))  ; for G
       ((6) (x11-color 'purple ))  ; for A
       ((0) (x11-color 'violet ))  ; for B
       )))

\relative {
  % Arrange to obtain color from color-notehead procedure
  \override NoteHead.color = #color-notehead
  a2 b | c2 d | e2 f | g2 a |
}
@end lilypond

Se pueden encontrar ejemplos adicionales que muestran la
utilización de estos interfaces programables, en
@rextendnamed{Callback functions, Funciones de callback}.
